%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: mywriteup.dvi
%%CreationDate: Mon Apr 15 11:42:13 2013
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMR17 CMTI10 CMBX10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter mywriteup.dvi -o
%+ mywriteup.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.04.15:1142
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMBX10
%!PS-AdobeFont-1.1: CMBX10 1.00B
%%CreationDate: 1992 Feb 19 19:54:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 58 /colon put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
/FontBBox{-301 -250 1164 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6209615BC08173FF
1805BDFCCA4B11F50D6BD483FD8639F9E8D0245B463D65A0F12C26C8A8EE2910
757696C3F13144D8EA5649816AAD61A949C3A723ABB585990593F20A35CD6B7E
0FA0AD8551CEE41F61924DC36A464A10A1B14C33FAFB04862E30C66C1BC55665
6D07D93B8C0D596E109EE2B1AAB479F7FAA35279ADB468A624BE26D527BFF5ED
E067598E1B8B781EB59569E3D0D54D8EFAE0F3EDE26279776ABA15341E42E636
6E02817082BE6FE0B04249A4840C11F95F8ADEFF72173E9A5F2AB2F62C427E5B
DC010E18641EAC906A5EF0F9BC2108062134A7F10956219C5847C0D82F0E8663
12D963E012DF0DD899911EC5D8096F80B49CA3444CF1294FBFAB57DFACC9D01C
46F3BA2F3D1C14EC30CBF83E5729F1C074D4F1665405CF54722827FBC24AEF08
F6DD0BC6A79A2DB1FF539454E8F5D1A42D40CCFBC093AFD3E57973A009095CEA
B91FAFD236C47F453B38DB0067907A28EB5E9ADE87A2181F1D6DE4E183631716
C21F0F952E0666AC74371F8B5C888DC44FBA5607435A619684F502CF625663C7
94B0DAA79BE8E129E7F5C5AD1B7495C1BC9B1C759867467F55148C7FF2F914D8
95218C4C3C2D2DB3482C21EA050F23D6A7A056B172EB210276CDB3B1DCA47A99
96AF4B0A1E4A219C2559BDAF6F4C56D862C31ED9A2DED98A79B1993FE3C7F50F
9AAC0E3EBD9F7431FFB1082E6AA28DE5B53A98A948712ABF73AB114DC38D9839
9FA64661DDBF98F643505AE097A11C866CC356BFB3FD3DED862021B7CBDEBB2E
58A5E703476326AB1A733C953BBD45FDF1D09BC880352A92D61E3D8527FF95CB
CFBE0DF07F5273AE3A7A2B2AA4D2957B0F49F6F4B57A0E9FAC8FED40A71E05E4
BA8D7FC6B2C0E5E54C15A992C960D0F262622226742A2E57BCBB1CC1FF621987
A51B4F1E092FEB04C3A6A0FE09FE120FDC2364A75F0322F3096364F39F0AEE50
60A735984517C337EB66833D4E5F97CE288B42F92DDD085AB3B051A4210CD859
9C54CC057B6DE8AF4130B680BB9BCBD729EC8B9098E45D2042ED9F946D7234C5
765FB383B006992FBA7EF3910FC0E6D16C20F45B3A1128232A26CF0DCA0D38A0
08AE9312894B9743045EAF35E082E46D84B345CC06B5E32A340E83ADEB44EA8B
1DF11AD1840E87B0F02505FF5B2BF5090D33C6D91CFE074469D94C8213B032EB
694B31851BF3E84E8D063A27D8CC0DC63918AE9C6649F338383587CB13CE0B29
D318260FBC314986223F9EC4DB5B0EF2EF59192014CD4E60CBE9A8698637CA6F
B421B6EDBA3C9A8BFC0A5D4DEEC0E56A55E18E0B8D3ECDBECA9AB8A2F81DF94F
170E5545FB36E814CC56D9611165900214B7E294F62E44597E80B7D3FD49E1D4
2CFCAB133FB909F1D1334F63AFFB2E963D2399629D1D3248190845959E0895BB
8AED95AC89F3AF1D136A4BFC3B3915599906BAE5A8875D97DCFC7B6737F1B2F5
A3B55A8A3BE288E1FB7C2B7607098277F9F907C77340E6EDD70B291772B25D1E
6F7285D52E0D0C95AA0D6034B06ECFF111EA36455C7031324C6B0B92515E23C0
04852C56E644C7A73757B8693F994E991069CDC3616CA9512C4E42960F902BAB
BC2C3B4357F7299BF0C52073450E1C5EF2373849E0F8EE732328B9794EF5A3EF
B3E7DD0C568FB40E8F88650623CCE21ED60541E416EA51C55AE326CED51361D0
AE9C739A2311084CB00E3965D344539FDFC3257BCC15DD6D9F66DBBB05CF5C66
190286C10A57DED229ACF6E1FEBE6A3F3B41224A20D7D879EE2F852A6F169B6E
378843CB240F57D91834D82909B853F910C5AC252772B6A92AF5A7CFA315BD09
A351424872AD6BCE4E2BD59623ADBE19717ADD4CE0A9C9D0DA82700BF128FAB7
3768CFEF135EA2113A27DA5237BF7DA23909BC43520BB3B81DA6BE4C7F49245B
7DFAC34A71532CEF975718A53C54C5F2010595DE4F61649ADB3CA0E00E6C1F1E
D6976804930207B9C159F228FC8D987792632F864B10D63F0C245F2AD4E93F18
F71AB1BC6865ED986DE2F4432198C7BFA423AE435C9A41A658190A15C6010578
3B83E59AE5DA4A44B95A793F8363FA179E65A4FE14AEBB3D7DED14A45B10C50B
B6BE882D4BD0A2ECEB97A0E21FD077172651F5F0639C4C58AF30F7ECB95127F1
7C427D263C8AB36D5E0CE95EB5A5442ADB21AAA59A0422EBB4AC2C5ECC01DE8D
F44D3E3E815F0E6B2D2E151AB134BB55ADB8F8BBA4BA4CE6C8E6E3E6B21334D3
0B77099EF78CE8276E27E1A06A37CC48601AF3C2805F1A3B3F9C47AA9D252F76
42E009B617006AC78AB7776BEC5B4E6C2262C154D33077E69B28B292958F8685
F928119166ED6FBDF8DF63078A7F050DFA2A6ACEAE8381D39E2B0EE222CFA928
5EE5405A30692484779A46D6FA765E7ECC6E34A52D44065C28AF831A36820238
D0BA85F631AE5C0301E397D3B1456121A68D6DCF352C399AA0A8B2E3EC2D6E61
8F71D96FF48E6A883A056F75EC8499BFADDF1EBA7E4F7EFD8F241B50CF1D0F08
A576E57425A0C3AC0B4F147F7C9124869A15413A020590E47CC12FF9527E5046
D68E40F6EFBB397E707DBD6AF3C8CCD68FFB14CFEE24AB7B63C6A7CAFDDC2C60
7712B623BD66CD5E25C8F4F0A94389DCE2911F0218F1BDFD1E211E7EC16103E8
671BD6EDB60683310C40304C01C58B52E14D3C0F9F316563A996E295EE71D12D
1007A73A637F6645EE5EB87E03BB0961749FC3C17C66E8048ACFA26321B14446
D0E794B1C55F9521305BBD828CC6176A36DDB67B817F7242813078554391D574
C5F9B3098D73EA5EFFC1210809C5E8BF0831B8D2123199272BED874C6BC78BB6
52EB3BA716CA7DD645F044FE68C7EADB62A905BF1C7AAA96F4A98FEF87024458
2E7977E4E82F31448DF2CF1AB02DA1B55E04DA9B70B41845F3B25C62C1CF173F
5414B561F21CAE2D0563A84F6BCA6BEB998A3321E3FBC86B726F2E34BF778F58
6B73F9CA002FA8A4D70C1003DEF9AE676F928BDB103208B6DC054917EC875681
282139A614C8E50BF07662B3E36AB985EBE02B24FAB56E194B12EE059D5B0A50
EEF1BC4800A163C00B6C5957FBDFECF822DCAA033B162FBC45CAA1561A022357
11E57608AAF4DA4905404632937E57AAC31C3544493DA421DD370900BDF0E460
CDA978D01AB896A197D4D8D2C118154591B5B5AD8BB3AA7A73044BAB9CAB5D13
ABBEE4F6E553305F193481EE2A2FB7C3C18A61D6285B549AEBA7EF2BB03E56C7
B1B5254A6B246602C05C898DF03674F94434D1B7E2407127349001E87EA2DF4B
AC29EC99783C0B0CB14CDBC9992182D6AF4A8DD98676A96ACE01D29A944D83F4
9533A4F73D9004A95CAC081399575EBA8DF818AF6DFD50E1DD27CE6B86752F84
EC75ED794FB30616D6F93A4FDAC834B240E863AF8CD9B0EF23A99FE1C2500757
01C27DBE634A8F464CC5B60EAFE9D70020F54A2804F15EF34C474EF4E5E530F9
06F19EA17051EC5ED84EE1F0BB76DEFA7FEAFCCC403945064A3D0136CA4ACE25
16DA8D15EA2599C83EFE528956E237E0D9A4F6DC7F3F636D163EE4170B170F05
4F0053DE6999C80426BC9506471BC14804C98A57107656708790323235FAA974
9DB44C091491EDB2DCCD19BBA6FA01BFEA50C0B2060C49A5BBE39E0C51A61B12
DF61FFEBB0380CFBE8F3AF8E110710DDE0E6D82EED7E31AB93B6D186BFC41899
BA69D98FF94C2BE4262B4614A0EF95A619FFFC81BEB3410CA3CB81D78EF01E5A
69174A615F9853EED2D7DDF280974535D4B8726D1B05BD40E4EC4BD1C926DAFD
90C54265DFCF14911E70D3AF2E0F589E6EC67D4F4C71417FA8A0B03952E4A469
4B4824591D6DFE90B1B31D94EBEE9358E52FD217F8F218994B82C4EF2BF7C17C
768E86E8F2EB5F7753C94D171E8442619F148B2229D6CD4A91D9A0E7AEB34C50
14BC6BEBE8643876CE654FB7D6808412BA344B2E2B7EA639EC060D99CC7B921A
D52964DCCE028C787B04AFBC4EDF1E260ECA4B07107C194C46387E1DA9533B93
5B2F01CE6C5D6E1126E1FA7B9DC230F7A849122779D78E50DC8B662DD6667B24
F4F5681CFF6D37BB170CA1D59FC7FF0992D93C7177DCB1AA28F9460E7F74B8FC
563300C8EC572CD83A9F2783BC0509EECC582434827CD00B4CC8D0A63DD9346C
499DDFD1F6E834C9392CDE08A1A350FD7573B8662E3365565A5BCA6828DC0FB5
4C5359D0B387284964D5F9AED579F02D35F1AB2FC154B096CCB765A9EA39A4C2
803B9EF07EEFA4F62E8E438D2B5283358CB26526E16FD3315090E7486D00B9C5
D3089C3957517CBFF843E7C249C8691464CE3473DD6E484DFD65BA4FFF954247
74424E5BD59069FC373FAB5DF7BF8E890F1459A4F21EB3D92A53CD70FAACC73B
EE67BFFD6BC958AB038E906C4501C4325470687A7B82A5EAABD90FCEDF154779
5DE7E896C43DBAB173D12A5C7BC25D3EE5148568F3D6D23EB5F299CF1631329F
93251765EA80F7D77E0D29B6A407904CB22952D99AB44F8960CBF9008F82677D
EB67AFC317BB5B3413A5FF6CEA42CB64EA61C7B55A495EE4E3FF041458A5D9E5
1D863B22CC8D20E6F4DEAF7782626607D98246752A0F95B82B23E43B0CE45762
6B479F96A3DE32D2CC654FFD96602A74FCA1EB7811F88820F44FCE420DC3A5C6
0CF178126684E06CEF11FC827E6A35E94459E74C8D73978E0E50345F1FC3F354
B49B07AEDF18979D8D4707B83A6664F86FFDF0378BA2BD54CCC4FDD6264F5F7B
A63FC1A28C52B52BA806D9CFA39B02C811B562801510366106DB2A52C8A10F6B
DB2D0FFC4A207E4D6BAA3D694019483BB7190B1747A7CB8233EBF786681562A4
B16FBF54185BA5B12023E18AEF74E96DCDCEC910E64F48D8487EF71D8F729F35
9882480332720279710DD923A31343E7E33D4C8425E803E50D77BEF99A2A6430
FE48669F11A7C76B5A317D807DDB702A6D4C66B3E4241CABC5F71A6CC4F81B29
8C5C7F6321A7EB6D798358549729470E77CD7B223D08DB16CB3FD1CC69CD77C7
12AE88FFDB00C6C3A34C4A6A71270E1931B2D121AAE464B70A39BD1B6ABE8E63
824EEC22AF917F8FCE41D0105A22520DCA4827282BE303BD9FA66275EFF13E32
2C834579F0668AD2F15F1D44604AB8D5425EE366583170466D6BB1B74B6A45A4
28AD40998F553383B41D897C1FFCCB05B74DB084507DD134998C87114C4CD1BB
8552F23288B7EB9CB7B0804AC2D89D3D6040C23019C4EE09CC0486F086CDCB95
9D31C39D5C2B0BACA5260A8636321D55D8C5131BFFAF7DB0F1DFDABF212CC812
580E7CC82A62184D624FE2C79A3862AC71FE63133893E5F9A9208916A766F78A
8E38DD868216182641983891450007F199161AC9DDEE01540FCA214C73EBBE66
83468D46BEE8F375B3971DEBF1C5B5870DCEF667ED721F233205EC523AD01CBF
4EE06DAA0216ADD68BB68F153061FBF70147C59EA05CAB0EB4D21F93F5A5C272
31159CDD305B2A888923A037552415F50446046B7D5B62CC1F0BCA19D84238DF
345B485B86996EE6A6484C7191F9AE9528DC905FB95787B98C7B255CD349A3A7
271B13007D27021DFBB41E4EFB44522FB6F93656478CAE618DE5F7548719C462
BB59ED86EB2AA12942026140E023EBA40794CBEB4474C21859C09701AA413CF3
BA64467FF2622FDB22FBE60D95CC4D7A36B18538E6E0EE281F68EB959256C994
2683F401FEACCBD5123DFF8F44622799258FC37FC9DC168EAB3B5E8DF9D0C420
165485E1B2FFF71A57C8430FDD66FB6108B9B1F8DFD56F9FD3A8642FF36C9C59
D0BE2DA8608D12ECEE77BD2A9D92DB209AEE01A044833E02A65B4C60BEE2E820
326A53E9B649906CF0391E37800622EBD32A42C84163561C96CA6F5A980B0FFB
86477EF4A9ED7A967924AD19426EAF297E78E495219E54E88F3B64B216FD48D6
F5DB7F00B727BCDB615C408130024724AD74E2BC78701449DB479A0BD1548203
8E9EAE44CD41DBD062872AFF9DE1E3DED1B5CB88FD2B86A710F730B5A2BEEFC0
A786F2F1E7CBF197F8C64D1C49B6C34CA048AA16112744E99AC9ED8A8F29488C
2C3E6F89D2D9EB8F4167254B67EB6BFFED3013B91224E349848FBFF978630F10
82F204B06DA8709BE2673E793F97F000B3A054F9268FA3E089E00ABDBFD5462F
82AE0DA97AE0E202C0823DBEFDCAE4FD7F7C2930F5988444355DB876345B667B
35C0C9615E523BD4B93D8151E57BEEEE6CF6B689D50A6BC2C367285D10C461F4
B3FBA6854434746391050C119AD346DCBF5FE306B307FDC09F95C19E77229A7E
57AF5ADBF80CB84231B5AA3A0550D38AA3B09218D57FAB8433386BBBBB0BD454
B380A3F922FBCA840551DB51C99656B19E2140B0172F00B90A680D4F0AE2046E
1FCB93262D5A3C2016786EAE5471BB41DC4C99510F73459527763817660AD92F
D51A6E4C1E565453455E322201A62E31CEAA911AF8607CC8AEF0164D44CD0BCD
5B5B375ED42FE47FBD8C35DE2C4D11F93F40920B90E12475B4D3CF9A4C03234A
C0DBE58E9B62667D4B10B89D41D15F3561AF7730E0556F6E6A83A5936C5F1D50
85061BCED6863E651FC457B438EA1D0282A8BDD17310ADC601FFE51C317AA1BC
08FC2785B1433E6A497130EDF4A27FC684E6822BCC03902180D676558B19A4DA
7390302C081184A7DF753C330EF84D922E3F8735C4659F1EF1B9A2EC8432C4C8
3F1477EED55C2AB6B268241EC8984A3526CCCF5C3832DF0077BDB7BDFEF21F32
52BDD095E5B3DF26EEB37B352422698DA2AF18427E621EA269FEF46FF1AED5A7
554C2A227448C288D3E1A1DD05A9300F9B7AD16224A79145FD7848DC3F9EDB9E
9EF8809573ACB4619275923A869B1F528ACCFF42E2EC53C7113C22F18CE98DFC
787ADAFF8EFDE47FA288C6150C05189AA5B1A1362F713F33B2D7FFA1B8D7FE56
7A549EA9E5B8C8B8DDB8FF4DD82154997886E8591A193C2DBB683DBD3A00A3F4
DE2CC17724FF4DDCF627C8AAE1FBEAA8BF4B9CCA6D3E9C638162507AE5369E04
6501EA525D9B6ECAF34D48B16E9C4328474D5CE461689DFDC44EBAE5859648AD
48BBD63DD3B2A554DEA7998A53F8D225F00651EF86A3E56D3D0AA09FF6107E5C
2FD62D668F1BA07017D6CFE44F940BA9F7A6F7F3AF0090A9022573E5FD199699
FF47A95EC96143943FB7B6203D602D52C5DD6DAC490910D4699233007C370231
BB412A5B4B3952BC5FF83F98AA9D676A5E13651D9E446C9C15222703285063E1
4FFFAEEE58B87F1259352E054C467C9641ACDD05AC0F8766830E9278F9A63462
E3624A63F288F67131AE85DFE08317B27F9099F4C7EFEF9F41FC547195F5D0F6
41F1EFB09B67D061ABF2405A2841D82437112D7521FAF7058A361697BD2D6311
2D572C35382E650D21585997B27DC91A961ED8FD3E3ED723A91DD9965F5CCF62
4795A498FD81AA7CBC7F4C7E18553441EB177AF8BCB0D0F0A755A1168130AEBB
B7D04ED399A3F12CBDEA2295BF2F1205B0A6D95EA38CEEE696DAC379CFE7BA2F
05F4582F33B2A0F8B5FDECD074CAF675DCA65EBE5D18095B1F7982614DE3F9B2
9C206762C092108EA3CAE67F2BD2940A0291F9B2762EE63862EF85DC8267FC58
2E6E15F6BABE99A981A86F38D794093CA823A80DE71DA21954A45B4025336C7A
6BE20ECC97839406ED419A1AF03A4349D014ABA1F6FFEB5653055FADEE9F6886
7C4CD33D181EC1420E2AA74D9073DA3E1975CAF205932E7EA75F8DCA17D6B08F
1FA034354770099D93258422190BF5107774A4C215D328FA07B4C28D18C3A037
F27D5FF1BCE0F5A2AFF31EF1A95BD02BCD918AC03383A8758C620B17C8BD65A6
CC9664AF853C9313C799B2987A7E76226DEDFAA705C5A5C65C1B6AFBC094A41F
9A8B9328991C824F951E5DE5638F4B7A9A02B3AFB0FDE3E78E325002C67C0253
3FA5F3212ADB188AB22A1AFA63675DFF20E3F918CC23D1BA60E4AB6091E00A1F
96A5D411A340F861C90174211260F353834BFED53CCB0E1BC44210CA73155046
A70FFCA14456BF12319B7C3D59F43BA12E50CE2458D490C4B9198F2EC9BA8B50
1525FD59682F2A0D55E79BF7F5BAD0B8FCC0E27FCFE3DA08F65DACFB86964FF3
17E94985D0FE055E783630821F852EB3859BA5B64B03324DE493068DE2371B63
98FBCD49C908A8094DA3656BA7D0DDD72E21283722517DA65FD32E9F3F5CF40A
519339DD5A2055AB62EB0F362FF91332CF0BE1039564699D293BE4A899FC4CF5
D90EB7B035CA684286DBF7E86E37B95A7A952D2411D9636870FA8E94ECC2D3EE
DE4046AC26EDCAF37243EA0A1ABB3442C96A959C035A40470ED93D7D6BB35328
0EC2850F80A9F7071E68426C6E034FFE777C5C7FA93F2199DA48C77C4895F101
B5483B0993CE9BAB886CC4343A8612459830CEF887B609FA41E1462CE15941A6
B89023BF33E154B02E072931F442719ABD265EBD70717A7AB1AC47DB663BA339
BD56CE4E88D69FC28153587F45686FE251133E247B50A2229600122EF30A099D
03049A6B0329C980E9758AAFBCC6637DA2F8262BAC9748C69C98FC30D8FA2AC5
C68848D04F983BF367558A70FB9C829AC2F56C1A91E3A9F390DA00289DCECC90
882D0DF1940B03E950C909CF9D3E027116071625828624259C10F35A302E10E2
CD5412FF9E174CE94EFA44E1D9CB20DBA945A5B2832F734871B597B7051FCBEC
90D4A7AD100601F0DAD20BE107A5E84F1700D1272BBE7FD54111B58C3A1DFDD8
72F20F402738B394B459FEE5A92DBDEB1B818BFEB1E7A91563C58D69669AB236
325150BDEB716E43AEAFAD8EE20DEA378D2D2CD4B00AB63568D477EAE80959AB
BF6535C96F461C3744AE03B54A0BDCAB4CBCE7D0AC7D70A9CC343499EDFBC8C8
474135482CFA9D775BED585049216F9DE14DC0E38185D61AF4335EC778832996
39224F52D419
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 63 /question put
dup 68 /D put
dup 72 /H put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1DC2D80B2772B05DA60F3DC15A815A6BAFEDC399C7956E75
3851CB3588E22936FBFB63A58300298B11C45D82385C083D07AF133BB1BC941A
FDD9F34D5E0B8087EF2A58C54D8AB7580EE3ED58AEB83B72CB9028F472AA0C3D
5C0DD07F3D20112C51366AF49C461175B32F43B33E558E7595CDB39F19A8B2D0
FDA3CC3A8318A933B24E8018569F67C865E244FB22B99E4297887C58064CBF0A
476985495B8E94E473052F20C5E417A6AFF0F6641D0D9ABFDA127D91C1171C43
80644C5EADAA552C1CE3018354C60DC3555C089DFFF324232472AF0E62DBB4A1
6140AC4AE4C633D23C48AF96BD7D463F4771C3AC5609BB25C5A84B409EFD52CA
B7B101F088A386CB77A060B529FF519061D19D1AFE2AC2032643D57608136DC5
426CB2C092C11C590DAD52B9CDB66F42B424CB8BEF19E5064981DB27CEA5FB96
E145B41FB173D203EF92A15AE0E5DFA04195C94D372531629F186F6B9A0CB9FF
52B0979A4FD57E21C8219ACCA6A396307190CC3E2D48853E0363B9C7D4A8EAB5
EF980459DAC9E9925AFA455C16AF74FEB09A9BC8690750FF15843759DDA10D2E
563CAD0CCA9F64574B26B4E5932093B15303576BF47A1FABF412A7AD26546AB9
B54D6FDAF2DCF1F7A3BFEF312C4A08BD54F6F3BA50BC1F1135DEC3BE823FBBC4
D87AD4B32CC61493A9226A26091E8E473E154A982FC3126509E463F722671DB3
C1867436C9CA02298412D0D25C686940D6E0E7EA49AAF85306912E521C5D4AA8
6D3C9FCF7AA5B53CFC25F7F49BC58E176FE6F6BCBF5419E28BD1F5F58061F1AF
A7DE772BCDDC78C166D116808422BE50FC4274F331F164B6EEAEB1FC405A4209
16DB3897355153015B4212F8E651FAE87BFE1154054026E9093E4E6D7AF7254D
F72A4F215A35E8E648B75C60CCB7A8911A930A0DFA6E3EEC0CD5D044DA519E32
24E72A1D4202CEE82EDE28726CF1A3950E53A0B2E0F960069DEE12981012EEF8
6A196363427ABD19734F9655A3A1803CC967DDE021381CF78073427ABAD68A6F
2867EAEFA333119098117B1806380BB69EB9A4C693471E1F5245AACACBD5077F
6AFB6A09475CA10432720DEFD9A0EFB9A4D614E5A32E1E84A8545308E3EA9DB0
7F755C6DCEF6F5E67A017331DD4998A511DDAFDC6DA58C79E3F5EB330A400D35
4DE9084BDF30BF4B68DDE5B61B11B1C8629739AC5B7A8CA1C5372CAC6380FBDD
642E3428E1B32287BE5FEA1130752216FAB2280AE551FFB9D63B2B7D8FC190B4
056B2A4D45FCDE09B29A1123CCE584D0B85ACD702315807FB40664D34EF6C078
361545E398D97C5B4F02B3993D118D5C36D0AE67C9236179F3EE13DA41369BA9
5C43D93D4170BBA66B6040F8043F6A06DB0D9DC9E9E6165396AAC4F881978D85
C97A8B130FD6879AFFE9A563B62B85606B53C9BA08153888E6A08048E9F4550B
4F0A9CBD0A480DAA4DA1F6BED2924EA72D03ACC3186F1B581742515F51A32979
D0AD7A1550DEE5FD25B9AF69A67D0E41DE8DBB8BE8BDF3A390C69A71159C950B
204A3B199F95E42B3F0939292D2E6922C16FFC352B7A18BFF2C062E1F09849F0
6FFED1EBBFC7D5DCB4586C8B9C9ECA4E3FE7BB9DDA4F7960D70DFB25E3AF792F
F79D6D845B2670AEF2BE244E315BED7DBE10AB80169EAFFB6B1C4DF1E5B14BFB
E910DD750EEDD64A360FC01102A00618D78B3D6C1C457DD4822CAE6C1CEFCDD2
46F05AA519507B5284F58E39EFE2B14B561229CEF1422BEE2C32A567F1994507
C671E9ADDDF60E4568B114354F8AD8D38590B7CDFAB9FAC52CA4AA47AFF67BA5
85352DC53793A0FD5BC486E14E595827AE724D90FAA6A444AB099B1E532B47F1
7A49CEF0928283189A1E7DCA3CF15A199089D28AF33E7245A9C2ACF45EDA1535
71B423E47101DA5CA60861EFFC1CEF17F3184095E9E21C54D1A5561EA013B819
0886AA1D19BBCDD10A502E5657ABCBDA6B65AF52D8F3E0543FE2A4CBB5755084
CB92D09F06395ABFF81C74CAC4271967FB6F71AB05C7849F2F15BFCA27BD5B1F
24C4149224D0289B086DE615719F8143F37A45B310E5CE9F27BA1ABCE4ABAA82
D70B7C2FA4662B45D0AF2832B348DC1558BB4BF136CE842737D627D01F02BF2B
F5FC5F10702C244E7853B069A5F8707E84A52EA20D9A40A04F0D668DC8E11F11
B4B0797E4CA47579485C6DF5EA5D4E5DAAD800C13B14594F87970EB0AD94AA08
258FDCFFF8B3BE35F07E8EF1F8C5DE92B8D978667A1C94E8EDE0638C74751BD1
B241322A53A34114E9C2112C2E3873C6AC0CE549E0011FDBBF786CCA119C8D1E
63567BF0920BBE36292AB7B044D7D4AAEB93CCD40F979F09518A034AC7CE6586
4CC5462B43B2F07B36A5605C7779D575A3FE581C775FA0B0D232FF4E20109915
B05BF76762F04836AD98C8559A586C760E06F1ACA923C377B31B0951C437E8F3
61485D646963225A4531076B08E38F712FDB9FDB44B1F416B716AD7A187967BE
AF145CA83CE44BB17E510F1C9C9DD84EF1782112EE00E95326085B3539A53A95
691AB399FB67E588FA8FD6F19238652A349CE5DC3FE1CEBB224E3E67A381E9C0
215DB371C10A86BF9CE5A1234363D83AEC7909386B8E8CD443226750D6611CB4
C5D5A62722BB6723202367753586C6F90401DCCBE65196D05A23668D0E16AC9E
A704FE3D86D2AF889B7BB977CCA18764E53BE2FB4D4544D4F2013374E19AE910
3DF14763CA77873B1346C19B651246BA477EF39AE01AB65E0A42E78F7BD13341
F0EEFA034F2DE77647E2047D425BD43AF24B57D97E0C78B7CF10240AED970498
D91ABE5D7FA548CA7D41AC136725735EE76D713C0A9608B9D99B0781E2B2558C
7DF5A72411F87B01E643C5D481685FB0FF2622638BA7FC5B98D0573CB9CFDEA7
5B5D0BCE1D4266D4E4456D93DE48ED7861F4479D4AF3B9E016AD44FF57B3C64F
EF1710E3E9D0AE7293EB37F2389D6EDEB1A9213FDD82BE0E902CD597BC1BD13D
E1D6C90C4DAFD073EE032A7E084576DA3B9C06125F9EC71AE9D391FC249FA1B1
2478F68F6B2145933B67B18BAC0A32C5BF02D612026DBC06A423C38AA6F6CCD3
5E59E41F07E3B3B0C0C7317D6AD9F46D0F6DC59FC3CFE33BF1A004D8A8B85C41
5DE2F43C953B93D6F0852EDA569A8C891B16777C858209F6E7723DFD4AA4BEF3
A5AA31A464BE6707A35F3D7F960FACC6F4C462D15136923292823C40956D795C
CEB1275B8482C315FEE4F63D6D918382885E5F105ACFA7C80AB834A8934FEB33
D6AD472CA63A781FF21F49D23F620288A6EDC81A7D8D91AD9297B46C683FC3B3
B969A7EE351997940B8560CFC1E30C916317BA493D6A7765A006B30E361F7C2C
D7F46C9A5C0E89EFE7000B6C94EE6A5A909DCB06FD54BB752350735EB4D5CD47
1C2BD856462A065ABCD260202E53FC915BC6905905893BE4FD0015B7C8BD1D91
17D52686D9645A24C2393C36A45D853A73830CE114EA59A83CF62E803A82A8D5
5F85E40903A8445B8BDD9C4F8DF77EC30275BD6A1A42DE782B466832B6515D59
8DCBD47A19F2511550DACF4AB22B86A61B3DE86A2F57FB9CB6A78CAD8AF0CDBF
EB57303222EA2E4F695E63F23FEFAC16A81148FBF3FF10D3E6D680A40FE86DF1
7606B03B413B50C6096CF15B295EBAD545A4B97EF52FAE65BE608F783352D50B
90853189C6057DB4A9AF57C1536190C1E29649D4349FE65D4ECCD940E106F939
D3D0AEF498B48B1086402568B8F34BFA11D11AAD48DA128AF300A1CB9EDB285D
BA5C91E2FD144C1BD1A338BE9F4E7EC45995F36EE2FE44ED6851F15018EE4247
C5CDA0A3093DF26B7B52E1BDB67FD54E68434D5F4B8B03639A985AB375ADDD2A
40185FD1454C5EC73ADE127566B672AB831854537E5411F9245CF40D7CBAC795
9B1234B694DCB5B15AE226D7162517BF69DBDE9C335FA969E9D79BEE664788BD
A3D4EB732BA5F1D0E6F4862E952FA40BB71CA6BF524E4BA2BD40D9CCDC95DD41
E87026177941230A51A4D46A236DAC5AF0A4634EBDEA6A1AA2E2985D1761AF0C
CEAFAC70943D0AB53042541648F7705CB8617408C92410C0FDEAB5415B22473B
3B9A661CC113F37B997A948AC8909BB8DE8551C05B3F2C8D85BF1EF8702FAA09
F2686D3CD36E95DB49E3BD3EF2F00C44A4C036DBF26F4B3F17CB5D5D4EDB96F0
E4982FC03006C79EDE79E766A1F88886BF5408CB3E40C1A6E7922A785B141A74
79F61B1361D6C98B7DE8E5A604CF4473E2A541B62C5E72E7B08B7D1FB90A9DAF
D534D1E2B6B2554D763EC1445C5F0135BDE7E21D7AC4B34D4A298E4A6273DEE1
F25D05E315A1EFA6BC04057617B42A7FBD7D6B110DE96D031CDB675116846DD0
D49886628B22932C032D7C38732C02E7EDB3A738737D12EB8EBA22E66BD0479B
65596568DBE492D1ED8A4A74CE687E12283397C8A0DFB26749A9746A181D0047
6B9D72F90A5E0B7142AE47C5E5769A8DC5AC69E2004432606DDC64DFF08BFDE8
2EFCA5A87D6A9AB51D96DD933AE29C108CCF289F7EF53214AE2B22596D58E11D
73635C57AFDBCA0C261F8854E5C0E8A18727505D7E55A0597E28FCA453E7DD12
85C60A84165A12F0A3BF3E7332B88E7F36A6730571B1C1C13646C5BD85ED78A1
3A64B4CCDA908B41758848C55C8BAF106A9D7702710C8E27FE17E601A66EE9B8
5B2301E54F7EE3B99F37582BCFE5D7E564D8920AAFE812B16FF74E15CF73C73B
36575447B7331BBC708A0A03D66CD44AC8FD99E002BEDA5CE125D065E3D681CE
6169B9CA742533CE4CF92877448D99DDBD445727E5A2583CAC2E55DF8B238BA8
E4B779849333A5EBFBDB049DE0E83982223065C08AF9B58955FD3A1D717B2060
C8CA92F5CA5163A1DAC93E333730B4E04A9D7CD16BE160F577809FB287C48816
42772BB3E783135F3A8FB673463F143EA8781423D5B631ABE4381448891B93CF
96F0141CADD13C6B849FFDF0E5BFEB8F2E855628967B235E0328C12E7BC29C89
0518D5AD32E56C21E73640859E9460BC5C908C8FBEC2E339A8CA49E4F5D5E193
AA5008F1226AA32229A57B8C95119D9C9D2D33F31809EA0D8E9D5E7FFD5C4CB7
BA052A87FDBFC0910FB5D265A188BF6AB94E91380EDE9D2B776D72FFCF93B5F1
6E73D9530E1858D72D75B4F996E3B2AA8002342D0C4338F4883E52FF715D161B
F0406493F8E91A18AF9FF659F83D2816007CA087345BE015A69F3F7A041BC3EC
D1F11D32DECBFF23D88538019BD1B33A67730286AA508914161F200DF0FDAFBF
0FFE1865AFBB5B383EA8374D60461083D20DF09A204F811D080F9589BD2CDEB0
AAFAF29ABD694F61EAE6B9B566D2018675CA175915739D91EDA556C06675DB11
E8544B39CAA72AAA83254DB30C52D515E81FCB0A4545F74D9775844E57CFC864
49FA8C2AB5E5F6A01B6C76693553608FB8B06C6605F06D6AEC3B00D067DDFDBB
9AA5BBA28F4A4329BC423A43A2CFE807E4299640DC3199F2E806FCEDE3119453
0D6CCEE3DADEA5450A93D3FF6B90867630BC73B65D9BE3F7011C58B880D700D0
4E87C5B530ABBF20EFAAFA87ACA4B10EA8C07DF8BA5ADFE142AE1D3F94D0A4F2
8A286015390E01A70981CA1C0C658BBFA24E471EC868D1371CD8D0A54B671597
CE653763CA4574867BEFAB57A141D0D0913DC51D7AA95DF6005F92B35821C68A
0AEF8CA0BB28FE6490A30C326A1F7300D5A2296F9E3D45711DA5C69092F55CBC
FE4741BCDD70E5A6EF36C367C5C557979064D025495FCB032A836876723378C5
5259E7A611E4E2640CDC296EE0E12891696EF01D76AFCD3E410398A34214F6E6
4FA37B445869EF738F752028FB420DFAA1CD59141BCE526F25706A2AF856CD2F
7EE339A7387DA460303D6FA32AB91BE5E9CA129659ABE581E1E991372A6DC641
CCE6F6182A80ACFFA72C75831913D8A180E16873EB85CAD5F7946D2E3805BB2A
C08835772562B36C801CEED230BCAAA22FA112B29BACD2C761484D99267498B8
A3E13D7D02932D9B8C79026E26BC074600F1391CCAD60E391DDD9B900F6B64CC
771490E9A5831CF793642B6F5065398C753532DE43B506188710E7F8A5DA8FD0
7CF468D2C5F63E92B2D66B16D0B7E53FB0DFA846D039BF495BC7926CAC368DF1
7FEE652C4DE8E3A0A5A1C6D4DAE7A36E8B8DAC7D528CC610DE249A7DECAFBA7E
53AF9879973F78E6AAB4B97781276CF5E00D1F2EFB2753ABE419CB05AA0E1D5D
17BB430AE5E6E18E4B1F94191A77C51DCFC495F46A3EACCE5FFA7261F185E8B9
A8D3A39683CE38ED64C36252F3228531446B1446800FDDB71CBCD0DCCDAB0963
0B9B4347456FF62420D145BE35AD46F1F16549A8661A12480530D31F312FAA63
06552333FC3EFB0F036AF5CD8C40C0E5217000D21C2F05F477965B903897A4D3
E042A7206FA332C557E59D5047E3426132CCB5E762B3C19FC5C26830CAAF6D22
C920C6D056DAC929D577016E79AD6B949188E85C2D5B0C54A8B1F31D14A22B51
9467EEAD4F25DBBBE5E5DA88C57142A465C1BADC157CC66C3D0283E70A20C297
6B66A526145EA4D9BD634D75B5354716CDCBF23508954F83523A12E42F0BD0B1
F822D3EB9157E1EE35C1564E937BCADFEA1CBD5E398BB2EA3709AAE059059919
E827CCC9C32B09F6CA43789648CA91CD03E7482A41B3D03E977E7BC06AB0D0ED
6363062E964390DF4BEF8A0AB7658D7B22C56589A3A8CA32B48865380469A7B5
8147B0F9988538B7E04CE0406C68C394D77922433A440739EE3D82030BD2D971
302DCB8795E22352CB923038AAA007DF89519CE3CAD24ACF69A4F0B621B90E92
95E465F279DFF903B16AD84E94ED186050A9371F30F71FA71509468D94A0DDED
6799AFEFB5F642B1D2133773FC82C57FEE76337B928AC47A7026EB8751F6A24C
5EE2324602AF1F299116767A0DC62FC1E18BFC232C83FDDB027198478F25DAA5
5F0A9576776DB599E941EE0AF48CF5084E27D2C2529385B4480D2DDF55779C29
7096C2AEB5F680C7E251BEB3095C5EB0526A022DEFF15559B83F1E6BDD69F703
E452E4B87E44105925FB7B827036DBCD4AC4D00C761CE4DCE7566AAB6FC895B2
47E91142E9F91F4614CB918A01E1E0EA2E44141F6F32590B79BDC8084E1F2255
6DBC48B8D9C6F88E2BA5E9ED3F74F5A9F1104037AD181800301FD2A827E3F75B
7840309290ED341F817D865730C48122F629043F9BC4F957D36001228027D030
A493BCB3A380225E4BF7493B36618494C06ECF7B21B4405428F3742436E44FA2
8C036DEC32C60242DE5809CFD63BAE6021D4482BE568FBFD560544944E10413A
53423BC5E5AC2AB71335726C0712D5BCEBCEEBAE0B978B828C1699826FC8A39F
ACCAB3A896FA48923946C829334A26FE80AE05035EE21E805159DC90118FA9BE
D8BE724EEC0CD742DBC45DFEBF23A8B8E712D9FA3D8BE74A3FE3A319DDD53DEE
4E333A698C53779288DD58F48A354B71E6A4ECD5E261A66B0FB8D42A62E4D1A0
44D784A34BEA94F9048BAB4C03E8D617010CD1C567C8861E10C51211F1536A74
426F75C14344FC3321ABCB392DAB41F685AFE79F5CE5649BD7C72FECF8BECB23
695B7610BB5D4F3F1E8B057B2D35339AA92C1C7AF25D1E43113EA2B9E2586EFC
F887342A38150422A9CE2A99711AD826DFB09E9CF025A84C9E812167A90375F4
B2EFCA3D4DDCA56610A0B4A993CD101204D3E347BFD5BD4D68E900CA1F1A14D2
22F5831BFC676506E44BF37D2B02A19C0C02638679EDA083C21C679B10CD0B84
2B611A566F38D07724AC212FE3FED4E98F00718B5D8A17068955AE18C36B6BA4
4B8AC91A00EE3E2095036AFD13A0F36BF79A49B4E0DD60B831DE50F388064205
3CBF92E22141BF49E85ABFE8FB29004F45AA1F337C265455E3EF3E0854D6C477
69CC683781738121B3487506E0236A2798827605D63338B019687242DF3190F4
78B0ED2B46BAF75A54E0DD29E5F4CF35D1846CF3E94A1ADD3C9A5F06C71206B4
8D49A73F01ECC791218F7EC31689C17A50093AF2E33754DC15B57749AD2D8D5B
CE79846C6E91C308803B962083082DAB6289B1976DB9A56F43789E3B6FA3A1BC
C8BAD6D50CE51571DA2FE6B99D7357972C7FA582841BB9BA8157C4E924A8989D
14A6F37B15244D98D9C5C1B69F6A3C86DB95D2C7AF4649812BC9A98A21676FC4
B8D38B5BE8F3C0E0A2804668BD69BA502DA3EAE142E7AD71B0AA0A98B8161987
76C7D1946B00B5E3E1BFBD8C43027E4227A75F2BD42D0300564A2D4CFAE198A6
6E3657CA5555124F904EE31EA42FB9E0E2F9242BB9AE115384AA48EC5556E1C3
9137F8E9F732F22CE187CA71A16312EC03B8E6B152702F7E3B433440159B5FA8
7220FD7E1F23E7DE68BAB0959BCD5AFB9E5531FE0502A850837F466504C2723A
5C88C34FAF41931EF7A8356B61D537823D2C92F8CE1EF65C0E3E8E62D2EA22A2
B37179DE1EF52BE38690037248791EF268B17E00420CDFF5388053F14178FA75
D5550EE3D45A75139B5C609430
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 73 /I put
dup 80 /P put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B7A887B6794E
6C09C4B9C00804F4A8EF339D38D2F62ED9AC1BA01D215B6652B66B18A0EAB7BF
8705F1DE7E3905721E7EC1CC58691004A5E46E8C5D1824CBCA78BCC63B9BE0B8
01F8BA2CF8FA5EB1709D1E1DD157597AE2A7C9EED59467F691D62AA944324480
6D7C605F34CCD1BFF33AC4DCD25E0C6624F7594F0B4D939779B48545F82429B6
D16075CEE0F780117DEAD7424BDB2B411A8A77C68670A4F5ECDA90B8E2F84C6E
92B3F3209BBA3732C02F9DB9B68C69ACB23016B11FE6FEF5E182F7EEA7E91671
0B16D45B3DF5201348D8993682F88D460B456A9C09A71B87EDB3E77DA2ED6B93
4FDB2BCBDC5EBCB0A3B162C72CAA47F314F3E6B825DEDD35C50519F39BBE54D9
43427B7F9A0C349E7D246281163456549F1C3BDE6A875FFB7B83CEC66F8567FD
9DE09CD0C8F98A4ABB1300B5761DC02DE89B5F79FBFCCA339CF5E645933E9BC7
201DCEF8D301616CA7D9C82FFE838105FA75585EBBE609F638282E16DE233EE4
B2518F178A501AA7FF7248E78C2DB5420363535DBBDDD598B63A67B51A9B3239
E139A6C6E1F5CD6C139E94F4970496899CA90C050E0FE563762C5B0DEB151EC3
CA9654E95B7F3B8A825D90FC5E3739181E75D1679CFBE570B5152A0FB7344D68
54658098C8E48EC8A8E681E6568BF856C6F0DBF76B7DDAD1700494E63654DA8B
B994F3B34FE8E235A7FFB30AD1D625762A6FFAC5EDBA839E5DF3241DC712A53D
A94123B74E19113625A5CBC4CE0355CFE2DEFE5ED51AFC3F92A9D6DD3DE1CFF5
7341899317EB5FCA7EE0CFBD0CF190C260F060580279BA27D78A4742023F54F0
08E6C7033FC25E07CF46357C1A954E94DDD30949B02244D0838806B6F5544437
420D8B4279767BBE4F2B377889F871BCD10A2696489B09AA87291EDF84FD60DE
7988F107CB381C5298F27DB05F8A731A2426B2680F9DC7A527E8C4E3407D3FF1
D6EDF679B85310BF93C20D5775EF6FB1BB4BBA3A0ED7CD78A94DA980F9925EA7
7BBD47460042D12F07C5530E97A243FD94FE3708C1EB04A6DEF86F3ACBB3A0DA
3213A2105C9C4F173B5C1378A752538DE8B2184D5F9E77354D13C9DF898CA207
BE85E079FDD73B2E586052B5EB90BD681484B75138ACA443502256D07C8A8DA9
0E1BD548621052C6379E1897A39F1B3AF7B64286A4FE13F4CFF884AE1B03CDD6
CD98B1FFDA44B6116377FA9E7ED2D544371CBC3055DE8CFE2077976BDF642E6E
CD6EACE3895E90DE126FAF01679713229A2851998AAAA55A66713DAE31FF5DE4
DD6225EDABF97FAD7E35A0CF73D516EEE754FA39B541551B399B96FECEDEFDF0
B1B38F9187C0242D53425873656700958F55F6395C578A907A4E6684863A38DF
085DF6CCCB15AC3C2D108E6A2DFDC33454B8002EFB1CC08B7B1008AB059C4807
E42BF8A502DBFE77805E18804058FB242BF8CD34E15939BCD7DB2D17D51B1039
CD5126F012F8909B7AC218CA70262D096985FA7A4244EC1B5B2A9D5A4CB9AE38
958AB9EAFF84BC3AC6E11190313D66C2531BC14182462CFE8DF21149DCB03261
92862155AA3EA578A28C3C355B5E10ACC7AC6EE9D604CC93A4A156FB509E84F7
927513A17D135055249DD6C04C7D47DE0C647256B092D355CABDE40C6CD910AE
0BD681332A6835658326589B6CB689EB3FBD77EE6E3A658ACC69965DB4A6DABA
53C2C67E107E2DBFBFF2590E65D37408F25D1196D116AD9EFC08F821689B7AEA
9EBA653EF8C4862997D795648625D2DBEE372D7E1AC0CD5C65AB4B9BDE13E6B2
3BC6E19D22332C11D3D3D349AA4F9A62F376A1BBA58BB64919B61EDD6E40CC65
D20918EA8998731EB8F5003901B52C09121AA21DB20239C9DED4756234A20DAB
F625292C46C9BD495D4BCE48E6216320A94F5672D048ED4787078B22825516B1
F99E43DEC6B91C36875C172A7A166FBC3DCB8A950C2A674B811BE2F1AD785F7F
202F06B92ECC301A578DB3EA6DFFED65EDC248C7EB685953B97E2E5FA1FA7BA9
E1D05889208DBD0DF748AE04E2723CB2957B265E82FFD3110A5F2C026848A69A
9ECAF3E6BF9E2A5495C7494BD916814995E5A3E2F6DFD3887904DC195BB6CBFC
05BD852BC95095B7B413BC3FE47B4F6CF8B27209E24144A07E229E19C16D50E8
7080DA4A0E54BA479F02EF4590EE185345519B18757B81A23587D0301830BB9F
3F119427D7AFDF2887C0A5C5FE915E79A76572141D622586783B3AB10B918B64
A27534590AE4A884CEF0E6E4C419102C46E21C02C449A2162D766CBA26347904
C9AE1B78893A7772990914FA2337E5032E967DD9E8C9159C5E766C37AAF6737E
DB29087F41CC9993DE69743BBBE52EA7AB316135C682164BB819032B9AC61F66
F171D65ECB2541D5565BBB600E25C08877582D9628E4BEF34313B75D93297118
2FBED13A672EFAB14EE7E33C884B27E6164A5C5A732B233BDCA0D68B3CD0A4EE
1F9E33355D741F1E46D9CFC8CFDC0A4FA2FCB73D4567CF3C6366C2441D3FB8FA
67DBF3D8D074885D5A31169942F2024B444F6E34C8DBD90F7C6CCBBE6AC392F8
6BF425BA7A5C3A036E927F719CF95EA055810BAA3530092B91F226C7AD5CC1FA
4576C6366B6A8E1C86ADAF27C79893008580A79794C3F9FD4BF880A853D44720
29BCED9BC33C65E4D6BF0443929B61D41D1D0743CC546E8EFAAE44444ADEB9F0
66E00F7CFBC60813BECF2F2ADCD3B8790C02AD28D743C3F123734728324B37DD
BD1BCF87D77DDA9C9BFD40EB44865165ABC6D5ECB4A9B9A3D405406BE7BC5DF4
E909F6FBE238C3C5ADB82A368546C800EBCBABABF06917DA944533D3C3291DDD
FA0693AC73AF10F05A49BF60C661CA65614142CE1078C5FF9EB6D25B00907DB0
2E7C1B0A8BFC022908B8C801428D038F6FAAFE6DAF994724C382D372E02182A0
B2E8A5633E4D09AE66CF5193A1682110A08678B968F5D5693C8F812275F9D1B3
E9505F7F0557FDBF7BD3B77B8CA1AA19C036F93B0923E23965D8FD958C29C6CA
770F66D8108EFE85B3D578A5D796E1E2D5DFA47AA928DAF0124E4390FDBA4389
C5E2AC4572C749202411CD16A1B3D872251BDB518322DB57472F90C5738D413B
07D6FCBB693EA8C035876C521F6A966B0E6483C80671AFA17173C856E031DC96
DF11026ABFA90E1D2EFA56DFA72685AC80E8EA2C76F603D75FAE44278A981CD3
13ACB02FD96E0BF9FB7B31B575801A5113846A21030A5B46F3119FAB5DCD25DB
6B4299AFA7D70CACD4192FD923039C6D78AE4A98CE9CDAAEC62DA14B56F81A8D
108B7C818D82A806C8C349EDB017CBBBB8BE5875E20A79453BE3C47DB77BA260
2DE405FC13D0F3D76C333F39F3ED1A5AF4489DD54900C207CF2617F7276A955F
67E0BF99167D3FA1756E9F8C6FA3586A20CC3821D2B45762263DDD024070D8DD
E899EBD4D9F6B713BB23911D82FC1EAB79EC9AB0449467A72CCE0868C505E0AB
79561CE72332B4977CBFF89DC5106F7C8AA870EBB6946B68077AB70BE8BD8C67
3D1DD1542A8A6447A38F39471FE9E7300A32A78CAE1DFE332505931030A1AEBB
82280F7FB2AE80E1C3FDE199492F614D9806C1395591049C0E0DB314A45C9278
F2222342FB0195E50A3BEBD068D108BF652B2582316D2F391582ABE38A1094EB
E5840CA6095BF95545F51E4E311CE9CBAF7BE6436399563CA7FFA9CB979DC51D
A66B3B60616E0CE609D0590C5594CBE1FB9AF5D6E604F5DD576F279960D9C742
F2DDA3AA23B3BE4831D4360736CD831DDB86DEFF3B20816707A49AE701E223B9
7EDAF54888536FE3FDE67BF5533A9FA8B89A946842396B41539B9271DE0E17E6
4F46D9A258C342AF0EDE0A5C693FCCFD8C928B8AC5AEA09D60471BC6ABD75709
A18CCFEF107769402E5C521FFAB450C235BCBDC5A3D0F467B8C5BA529E4C0A74
F03B347DA63827A35894FAD89FA03258CDA36DFB6B1E1C89E64DE15897036F16
9D32EA692798466F26D271B9448A9D2A16A8DC3B4D8535BAC61F02496D4C45
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 34 /quotedblright put
dup 37 /percent put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 42 /asterisk put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 59 /semicolon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 92 /quotedblleft put
dup 96 /quoteleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BA8B194E613047BF469C7B4261CACC1DF1648E8A86E926F8702B5ACA
6CEB4E3E85EF23EF5C9C53097F3BF17243B8D4BF0E6B0C5982FD14E4E916D363
E265322DF0823E9990F966A842ED69BADFAC2CD1754FC84C0FF6750D2373F997
362DDA16A0D73B178FB7B67307204AF174AB871C254B8E7CD77058113B702B2C
13F341A972B67756D65C6A9F553C365E20F0BA59F8537C88E0C139E4DBFB279B
5EB06158D9CCE7670C8D6195BDEE16F430F73A91F7171B4C8064DEEAC7D38B5F
0DA94B3E97116E1C3FDB669AEBBDEA3A777A9AFA92550909AA9D0858311E56C4
61D372BC556317957B1127F260CD64377D11125ABFD379CFEE11E4F1CD99B2CD
17DA577F2F277ADD3791FC8AB9E11AAA1BF898AE21338948D37202E017214D33
FA245ADA5C1DF1281B0D03CCD7BF989A8A5EC887349676D2DEF9F727ACF41712
C4A4B0A58FB3407F3CF897C932FD35A8203FDDB7138B0C1611C7E62375F2A114
F7BFAB3945C985E9FA2045FD193E6EF5F8491B730E6F350EF686436194093E22
7746DE035B33FF9862E3081AFFADC58D3403A416F243F1B58CF54E94F3DBC935
16306125989E751E23C654F39EB341E94846AC98A5D88B2C5CCD2EC745443FE6
C122934AD51CE857F930B430DE47F85EA33E64155CCABD7DCEAB0FC229362ADB
F54F8448D16339D9E6AF77E0C6D29ED4C0456A7246F023015A4CA9BFCDAB4465
D1DA737BE911DD0599157977B471843A5AE86A60189D9EDB6A3D232FEF107AC5
10E49D2705EE9D3A6BBDE45A880E7607F8F83B7CDE154378813A6BAA20EF3362
A25BEB052F8F007951E6A1B261A61F409D37332AA4BA88CC23729DECA273A04C
85B1CE9C7F4623CD32080C800DFFA61434580C63C6FE046B761BC2D8F076E212
7F81D20BCAF1F0B5D20A996B76D5CDE0E6C7C642DF6BE659D3D9C5608BC7BCF2
75DEC3C86F0AECA25093E80B6B407F845B2610B204CAAB9056195A799FC9BC3B
A148CB54AC9F5F22B2F89C93CE52C9E2D7C64250A8F2D0FB42D63C217EC1D819
07A02E6C429BEBE36E6648642BF7BBF5CB894987C5EFB394FD0271D4905832A6
D79718261E8D739A0B0EF0C1784E982BAEAA0D82402160246ED8C01039184E49
09DF4B7484217C2AAC0F5AB8E92B948B304C7FBECAF40535FFD89C1D1E7C85D3
9BEB33C73ABA13BB3E27503E089A6C4D67EA0050A1E955B7467CD2272AAC06E8
303364C4CB65E3D84FA226DD32C9E80E6B7E82D68D0A054F8A3F6FF85B0D12E9
9E892A023814B29C1BAEB2197DA7343DEB53079C3DD15FE551AC2D62B22B884C
E75CD5B7847473B63FF08B13B711BA7AE7D72DB7140B6205563B84CBC6CF2036
3BAE2998C2FD754A664E91CE962542E286AFD161A0682485067085311D27E1A1
90343ADE8854E25396CD18AB6DA3F541B7D4B7A224F8B63DC0613C3E381F7B07
26F354E06F5AE11FD91947B90364F008A13B1114A8CC227BC95360CE5178BAA6
1AE582F7443FE10DFF5A908B122274C6ECDA857DEF70511CE8BA1B716C2F277A
91AC5B6A1BFA96B0CE909723E6032FD8CE0B675D0DF044D75E9F53639B54D8B0
BD61A1BA60D3A34FA29ED2F5D59DF3C3DD1BD3D92585C0C3383DC1579B71ECAE
4EEE68E49784EBA0AFF79E9AB8ED462C82F5F594420A24F59DE4A0AD1A2BAB7A
F7A32C54FB94024A256F138ED85AC263251670D5FC1FE6BAFB640591389ED99E
DE7FE847448F0485A21FE3ED9ED83BAC8DADED1E67E2AB84E2C715BD34D7AD41
1275F8E92D05842E75E7DC892AA9DE7C8E54FD31A5A1960A96D23131E228AE56
6D43C7C8FFE1699187AFFFA1DB30B61BAE82C5BB6A0796CD5A0B580B50DB5EBA
A3F26A6FD6D801010AFFC31227FE8BD1732C9C9733A01517B1AD6FCF705F516B
3E90945B336AF416634D219F134D93E46DE027DAB58F17B705BCBB11D392904B
29721911197DCE86056EF3B33A3FAB11D5766EDEB4B93630BC0A4916C2CBD011
119ECDCF868A1BBD363FF96A5735D021C912D9A698539D521EF46532645B9048
A3FC42F5B96437534587CCB3C9A8B91BAD78A217DAB3C49E78781F35BD20C1A3
7D1ABB644E1F76C9860C3DE03D67CDF67B2D62DD8FA2CEA702CA0EE2DBE1D707
E56D20EAC9EB56BF823D1371675C45778CC7E14AF1B89DD5FF46D6E211E7A986
87560684E6DCD93B824A568CBC7FEE8FD015A65D9D5D1699CD6CE3E7BF264C63
3DD35D21D68B521FB4D8B009AEBA40420225993E2B31A68F82D7B587F44B7807
A7AAE23A87E6A79AFA3FA555EE2B1B07242CA36AD3E8E7D01CC0BB840F620E03
EC2665499390CDD04BC09914509220A782579C361A5DB35F8022D087F8AE8AD8
8E819C601AA57124D6F0888AF34C5D5629AFA9EC7873787629A06A460D17F611
80F4E1D4C023ECF362F72F9816F1946D3F9B247E15BC4CC63B376949976AE34E
78E339A5A03212FA1BA4A4E3AAB955B2B871A1673ED20D1BCC8E2DAA71006F93
CA5176C0E959C73EFB15A0B4413C86DA83F1DB05B119D04D533201D5F455E040
8EA8C49B4ACFD754DE429EA234DE03FB48F55F40643ABC2936858FEFF44155AA
A1F2E9C157E0229E624644B4E9A6D98C274652F2AAA0EDFD73CF59CC5799214F
5327DD60FAF548EAF844841C2B6451BD93130CCA752A6D34D598EDC08BCFF134
3C5B28B376F9203A68663E620659F311E2198B8F18D300806BBF7F72198A4EAB
16853B300F52890279100F7E161A9E2DBD11200C6ED30A3178C82BDE837DD6D5
BB79BE1E963E5C880D4991C6CC15C93FB50B1647694F53FA2A559956E3BD28E2
03EA829E3D518DCD9580F92932B6C6010CB34704CC6F2F7A127DFE69838DC64C
075614EC7621B92BAE697CDA4C976DF37554D2C65B41FBEFB628A14C55765E07
0DFDEED3BD28890C0C2DA9B0CB12BE6F25D9DEE40E4485B80BA05A892EFCC81A
68FE8C51A8A9FA452F90FB9BFD47C15182826BEB3D2E12012E9BCAF37734CA0F
0ED8EE103C01FD05C96F11A2339A817953D3E921AD5565D5EFE39064420B1826
29BC84DBF229F7DA93ED9C7E7A97E9CB49E106B2E76864F9CC68396BBDD0F05B
61BF055686666265C99402EE381078505B701D8AE110CC827CC268C056673587
E88D3964552880719FA250FACADAC863736E15A75A1CA43502D2BC10ACD82654
D1A6BFFCB463318893045D6C459948EDDE4A9F4D32CCD26B274C3D2D428AE2E7
CA7762344E476D0F78011194F86C663153AFC374E415D40DB698BD08618513A4
543751F06114EBDF1A2BB3BF65F36DE67BA083246773831411B5CEA38304C4DD
A97334FE1DA3D0112FDC6A114F0E44E46CFB304AF5988CCB4CB8FDE2FC9CE04E
1FB2FCC962C585DCD7E706C0A3EF35AF8CB465B5AA7E4EE22049C320409F0187
A314ECB5CFA629FCE8B1098A5CA7F3C79F20ED6A0FCAD4BA49A3B04C5D0A5B52
81B6F223F7D9559A7A6CCAF03C679A0EBAE341F4758AA56F2886A9F4B9FF487C
1C0818C5698942F9496C2EA9918D22738F17D6A791823D948B8A9032F9ADA7E1
801471813972F9AAA77AB06B22FFC3201B0E92361963C91922C8A29E0CED46A3
862C440DF975BD3E3F1BCAEF9206212921694F7A202DB68599FA428651A32B6A
84FBA26E18EC6300BC0806BEB6E729123FE0C648DA2EA509477F652206595AA2
F7871253CC3D25AF507567DCF9C338F04AC9E35C592675FFF7EC60E6CED8F293
69E8B909832FE8340E2569C584773E2F989E2E0E06ECABAB2412EA10F4D4BF23
C0EFD160622432EDA622F16934A2BE6398FE5149B8ABF091C93817DCCEBD5605
B4921BB9B03295D9ED5EDAFC139AA365C7EF0A2A045AB5641F99DAD2FF0A5B66
3A5E1CD6FD5DE560E093AB0558C56E51EB5AC70649B7203C9062B80FBC25AFF8
0D476C41A16A315533C32112BC3EA0B7EB0CAF8D84B72D7AC0CA767CAFB28822
E4526F6409B715788310817D2720A3F3D50F05ED9C9BE92E054C544AB0C4978E
AA89BFFE075A5CF7BEA564AB7FA76DDC255C0325611F9BF82C92E538BE90AD9E
0B95EB0DB583B4824C9D79D9D6F01048CC554A9A7760F8BAAF6D9061D5257B53
8020023F60AF27D27A8F71633DF06EAF85A053E632082870DB1A832BE55B8231
F28062198418F9FA3B49BAD9A3335AD16DC4D48475D7F1474685255F871E58EC
203DB60D00AEEBA2D5821B4E7F0B218ADD753A2AB9DD2205867072FC8242BA84
C72461FD2E09834B2A92F8FBDC859CAF08634BC8C01AD8EB7C607DDB4DB6CAFF
FA8A860532ED4F921F6CDE4AFB64D519A2735FB29D80B6C79EA3DE8C69ED102E
05B8A3F0E0895C5AEEA0F50BFB7EC0F60ABED3EBE372B49C7E862F21BD811F18
192A46118AE977E055DFC0AD4537D9CEF96B46B2C810AF3A6F13AC684D6AC52D
3A14278B8E4DDE09B68B112AC0C286D1080ABDA99D922BBE11F0C12F495DF4F2
E9ADE14A9433A8F7F5542842E04AD67766F13C83DFA04F75C99FCE8EFF52E4B2
6EC76245499FAF4971FFF1791B6231F67541D1906FBF9E54D928A0E76ADED26D
E502EA781C004C3F585DEFF5DE6ADC99D4317020C2E0F0DB31774215FC03DE1B
5D046F2168B6C42C4755E3A45B4E6E9279D8688C3A80478F43668E9A7D633300
41C88848036C92B5B9C32419E09DE2FCC28B71E9FE4F6B7FF71DDD89EDAE947E
2C244D2B1534EC0BE6FBC81EDB75454DA2E9AC35EE69F6C4ADB98F3D05851ADC
08F6CCFDB4285BB94DE1BBDDC5D4B8206F01BD6172F54F907C9E61595BF090F6
9D865D1CC3BF0D694078513193223A83C80269E30F76DB139E1DB714FA9A4B68
C9B306AC0D857AB02983B403090A637A16F6E3E7BC4FC7DD5089DD2EF170DD82
DF1E8B5E732892406D0647DBB9223EEF6C59C2D8AC76E9DAEB785E381FF879EB
6E0C4D70D4222FDEDD19F747B0994CCA2806CB250796EBD8BAC9C262622607BB
1905EA631EC90666717D2CDB2122FBF8C9AFBD811C4F41D092D01AD39D9D2155
C2BCD084CAFEDF47655228EC8CA8C32AC3F2EDEFAF3184CCAFD6B1176F45AA42
B89CE8218651FCAE5D8F03458CFBE23F51E0914A034DBDE131E6748A0DD49F49
A847999DABDA414813E20AF1EBED3EE8F43C6DCBA6B4C14AA54B8EF5862FAC19
BB2C74CEE73088D20E2D21A4DA76CF090640655F7FCF06571A833BEFC38690FB
9FE11DC3AD154335D5BD5EE3E75AAC3E2C3828942BDEBFF504097D7628E9E1A2
FB204E9D56A03A501B49461F7FB966985F454EA47C7B32F954284417C47AA523
0463155428EFE5439E661B58826F32B2C4427273F39E5719D34FFC78AB3E3F5C
0AEB8A670E648B58669768897C808EBDDFD6E68D35D356FE2068DC840DE586D2
D92C4060068C14CD23E03EE59CEF5EA4D005E2C1D8FE7B43F618178AF037200A
B157DB858E4FA4BA7B221458808FD09D01B350287B443A0D3AA8A0DBE84D4DFD
E9E421BB86F9AE7840AE01862C0191C8696C216A2D61E83BC64152E29BAC0DD9
B6569FA3CB708B5BAB108FAD1E85311528E909A9E180B658FE527FA9544ED0CD
755FB007BA3D609D761A246F21F9AF619E377866F865440C137C1200975680B6
BB30BE4C63B1ABE06925E067DA10796C83DCF40120918B3061BAA989D77E4165
BC107833EB265F6F2C6CF9671E276612781FB5180961968246B8DEF66EEB88C2
57CFF9C7439A053625DBA8C699234C7D6952919D9C068B0794FB69284E4AA921
0246062AF7CBCC6636CA633E8D8257313C835C40009A375357E9B05621CC2774
B62FDF94AF7CFD52E0DBB72853746462EA6E6B6F9599859B3B53F1D14693E6CB
FE4657C458F86583EB71A77F02D60AC20885D6C2F18F7D7C37EAF7507F0D9C20
39C4A383BFC5075E2394F3EAC30238296AE4CEACABA3FB713AA041B4912F8791
73AB376B53208A035467D32B448B8044B2DE1DD59ED666F95A84F489368E7CE5
FF5608EBA109A92ADF4B9EC96CFD519D576CF2C1DA5C8CC4C0C8334B8C561683
8DA8D6BD979BD3BCF6A53CC67A16AED97AAC30991B09C60C15E6B1724F158019
6F19E291EE2EA2CD65EDB31D5475712B1B5C7C27D00BBC4366F3CDD3268F624A
BDD1A0CDB1400E0A9EE2095A9CA42C734660565BDA97C9C516FD8C6D41C0A664
177098923DF3F6D3865F4DA75B5749DAEC4D0A3B3B15D8305C554885AC506FAD
D8E5BD920EBBB15A9B7C6A427D9F1410A2C363DBA97044E458A653E2C58BBF31
27D0172F23EF16FC1027D47F2BC99FE6DECEFB87527776E42C4C9CE5C171F9CE
52F4B0DFBC3D9A2D3DACD5A497C0F871CDFEA1D1E1A9F44148D3B4028533A43C
7C837B82BCC75F8C202323A1656C5A01490591FA1DAD353DC9A55BB5E5055896
01AB1374FE192D34666997F107E941BB2BEBE487349DD6AE314D5ADB491477F6
C7B976E1E89E65C6DBACA9ADB04E2C82D552E48B1E1CAC8BC69372BB518D41A4
692D614078E1DD7D0D53AE890EF7E46E488C6C4CC194DB8A2D06DC89B1881156
C849851346FB0AA003AB3BB976D04AD034006BE2C8FADBC6FD3DCBF42641BAA6
58BDAE045488E401142510590F7AF2605ACB70B05947BD1034F11CCEC002D30B
F8B90140EF425B70136A2A8233E37E12F4327136C404BB83A3F4730172520EB9
BC5C40E1957038F8FC5722DFA5DDFCFE27EA92B95ABE127B9607D27405C98EDC
4208A5D6B5C2C11EA1F57BDDE797B4352C36369596C7680D2D00796D00292D67
18990BD890AFA6299E6DD582B78972183E1316423CF9E203FB5F2F4251552A1D
41AF82CF2F0B7DE8D68A96F1670A52954C153DB6F7D4A60B0E13977056273741
0D9DCC9FED75CB99EE5F955C81A7214D5F7CFCD723496E45AB917FDE131216FC
AB93AC0FD8FDD9C8830C2330BCEB72046A829089DBC39D6CEED1BE399724CE74
299F8622FEA330C23E6EB410AB8066291B189A24293E9B300FB20107BF11A2A5
1330A32B6FBCA0A1BBA19EA27C4F128AD34501189CAEFD991085BA94BC2B6E30
FB1F781D4961CCA1718D90FEA179E68C1D808744147A781BA1E581E324DEC1D2
59C7BF87A5A94FE213F0FB84694438B89D4365A06992521EE96AC128B758772A
0F6FE40409B645BA459684384A316E0C57D41C4C1475FD18C0C86A46FC892596
9AC9ED19A4C69EF641BD6D489981666C1290F259141B116BB0B94E8E84013FDA
AA48256FA33D68F52AD96CF6D76B312E9E305F67EF89DCFFE46768612D45510B
C02326B46BC7F542000259D3499841F753B9531668B128C686573663963092D7
0070E1130DA3DFB44949751107670982C4336BFE1E7319B683EBD45FE22737F1
1B3396D2B3761219BDAFCBBE55909C6B3147BE1079E07E9D3ADF252EF2066438
264ADAD4E265BB86AD59C7BB2FFA5C4682666311C23BCD0581C8D46C8280C915
C767A5FED7C2A52755ED3BE5F5E160D01C653FDADE40541A79AB5C81C7963336
DC0CAF4E2B918B1961FD11494A21468DDE9BB6FAE70EA8B41F71114A004359EB
12C07C25461CB93FA6E5D9CB69F5F5005F794D8B8C920935E2D192BB7C0054FB
71EB50BE14CF348D63F7D2067062FF2DA9E784D217839A53817189907EA8C462
C987C1FA62295501A81C2993AC9B3E6F13C838F97A60A768968FBAF2E5FA9027
79F803F7DBEC995E18178239C97361CDFACF5104F2BD7EC1EC2DFA80A5C8F87A
B0AC2AA6B1BED662EB1095DE9E3DA775502FD392AB3583DF3301A7682461EB0A
FAD2D7FEF59E70A34B5143610A9F3E38DCFEBA2777444E3AAB2E06D912D7D698
A870751600C91615C0FDF1337DC04D631DB689BC4AB3ADD17CE7A7A4278A6D8E
5F9335C8D2C9513466BD4AC2ADB597CEE001A531B9A6BA32E182BE3897B45870
D84BC3B74DB830B3E9417FEFBF2E8E93E262A9F80D238A587663743FCB2EDBC9
6029AC228D2CD8A788F93514217D567AB88C2D004F1AC76D5B2CF41A8F632FE9
9101FAA312DE59D85218A23E517233B041A3EC2CEE4314B1F7D4C6CEAB8EDD13
7E56508C2C6E899C40D5BFE218D6D4417EDC94C9E8EE56ABF07D526089B7A139
E5389531DDBDB4A76BD7CD3DDED93F928A26232621A2A0AF5D9B825DD300A8CD
069CFA13C7EDBC70A43888405CA28A490C208FD9D1158BD15A9F24B78E245FCF
585BE847FE13A00A965AA2DA80D33D97D75889817B3F479A510AA7D629823023
E765C6C694580703F0289309E3512C7AD01D0BE80EA339BAAA970B7E0F056E03
54336F05460B4B7D1209387736F42237C52427A123711D47E28430BFD46410E7
005D812DD74E658C751552102D1A5F39B666032BCDE9D898827A304160558B79
4EF9D0797BFB3346191399B7F542DAAB8D807EFC1F1834156AE6AF75C23F6054
3979E548FF6B03983E7DD60F034CAC6DBD7304430DA63CBBE2492DFA7C630329
42CF3F3D3DDE0AFB518A62D42513BD96057FDB9F421D1AE577219EC644136F55
CC25D164EA2AB6B86D252FC758A0DF2574C303BA26A6A2D5895019A8674AD9BE
7C34A4ACE5FFE4974FF868074B3990383DD17AF6E33A0FCFA4DE0A0E5BBEB5EF
5B0D59B0F8548E46CD55BAA932FE7ED5DB09067D6EABBDE3F1DACBCF0DB5F2E5
273753DB6F3FADFAED1AD032554E6189B92E52AC22F32C81F1EAB18E8A3D67AA
116AA5C1DA3C9321C07D3B7E84B401A25BFAB10179765CFFFD8162EBF1021DA8
36D1B6D6C4A8BC56713197E79B84477002BC156C5CBF07565DCB4CE4740CFE88
1C5546241A19D8EBA2235FCD664FF08D3C9D2A6D891A4EE419DB4EA8A07DD099
C1BE90E1B1DF239DB3C0867DD57D4E935AF50D11A44BBA863DC77F8EE917BCF5
7AF781BB2FEC0534E5D07CF8F734B56D39A811CBD2620A8BC615E5FCC6A0E998
F486B4D567600A1B10A1C1436A4D263DCF68FF4C71FB7B05012A6874FE593968
8696E35A981F8B4803CC036F7C70560B438848AE142E8C37E78A00BC5BE99311
598D995F5AD06E4037373AE99B696ED75E9F4E6B417AB136E0EE5E698E6EE54A
31E5FF70956801D5C2B53E657C1F98C1FC2AB5FF62F40313459B93EF12B9DA59
9C7839A997EDAAFD0FFA024A928696F885FB7BF4FFB1E6C268253F667073BD1F
540AAC49052C82175E63762D9148D9D44FEBB7D977E80652FAF7938D6973B6FF
5E608B809EE14AD7769CEB76EC2DA7F0442FBF64CDCFF22063C1E3DF3FC9AEF7
21D0B0C47ACC7D2B318656FB8B523C2768D9B653BFC0602849D5B910529A9384
0BEC03D25A1D992A2B2C9E8EAA732743FA42053D66BD9E9404C69A51724487C4
F2F99DEB00104154AD32D15A5EFC6EDB3DC8744A4F9249D81234000522322D81
8E260DA6CDA506AE65077575CAEE064B8715EBD217F4C3D8258C79947FA5576F
41BCE69BA9CEB7FBA14A324E0F2C05F62584F95980A1FDBC1741EC8E62C8EC7A
4D581E99EC0443E7F3B6C4B5737EF511C93662EBD6659F7D5778327AAFDED820
9309B9E040073ADD19A8CDF8DB72D4E7FF784E5E8DC3669A30C56062475EC8EC
8E53B29FD41BB37A6D995C8468969F3B8ED8CACB94B379646BE8D0CEB216F870
5577D4BA418FD6FABA60CFA619DB1F76F7267B8CC6F3415F781517750AABDD1B
640F6E337117DB081F19FF989EA6B37EDD55FE60AFE3E0A673CCCA144097AC67
802EEECF791A316D0AFA4D3A9F1A1A9888EDCD96D350007391CCA11C4E9B3FB6
E923E4332EE8C2EDE0BF8C27F7F1D5B867C325876C7E51514AF69635F1C1A970
943A40B70C21123F2F4E2A2CE11648729EB2EED8DC8FC78CAEF9C229DD06AF8B
8ADAEF7AA104256D38976AC8863109D10988BCFEE1463729C28112C3CD9BE75F
6043FD7F647C3291BA2B34D91879ABAF30DABC401EC5EFABC342CAFDAF933496
B64A45FB12BEE0E811555E7771A953F118177764410B43C8D20A5245E8B9DAE1
1BECD96FBC5AA230F432605A504A058A5D41E1DE26548080AB9E4449A40EA8F2
AEDBF6FDF4B353D881290AABB0ACF92198F9412999E643176EB3B6DFFF687118
3F4304400436A595703014C3F6A338525E7EBCE7F9214E0D00BE16561F461BCC
9AD095E08F702830076960C6345359B91942F796CD979A4D1A0C31747A44A0F3
0B45A8C9B1F5E43E7C25F206092FD13E6A24C01BDF3346E2339AF7E165DE00FD
E070E63A76188E4444DD2503D3496982A5D2B30A9E0872A4329D47EE6FD040EA
C619D72A0358B81161ED4DBDF69CA154CAD987C7B3BBED1D35359EEAAC1E13B4
7CD3F594B5B22F31CBBD504C72196C9EC0B950881F106C4B9AEC41CFD0913EA8
D7F3F4C9B31E116AB8245A517144AB36A71A6B4619369DEF2CD92BF82AAF682E
6B398C07FB3AEFB9C44ED569B01B3EAEB24FF9F388E296B34CEC43464D8FBD7D
828B159F00D097592235207AF1BE632091B8517F37707BC8A0076042283BED1E
07E2CBF1641565FC0C11885693A664146E2528B8FB1EAB698E140730E9D999D4
EEFF59E66E7B37F00FED1C25E3D1C009DFB07F800118B2A9F33557CACE6BA91B
9ADBDBF649892413285BEDA8782E87AD58CCE202D5C3B60D634D3B2A1E40C0B7
2677F84AF8116D0871D3F4EFC9DDFC23DFE4DD2699B5F7E5EB55CCD0606AF9D2
DD337A3FC96B04C7291BC60DC2F371FA61F8412D4CA73B8DAED5637999D05B58
0F6D0D028F3249E4A711CD281D273B39B4DCB8B9D496ABA8DA802A385CB67B44
F622F3A782BD59BABC4C89E41B36EB1FB9E23C9299E09853A0D03AA2A9687B02
DB6650A606D1EC413083C87A39E49110606709791D4A586BA6D14749659633E5
D36021BDC3922B5D55C04BAFB34AA73A7A524BC1C56AED1BEFC7C0648B8BD0F8
31806299D32CBEA4E183787BDF7D987199A19CAB1432AC6D11C2D7EBF90235EB
4FC8FFD5F74A8BC3D7296561B2A9A971097B85EB72D3BB10E7B627ED3E0E1121
B47B2C5056419EE413F9D5CBB0300702C5AE7249ADD08008C53C3B2015E9BD13
354BC936C19208BAFE30F4BE1441FC268917AC513494AA73027495BA6896778A
F036D7B81FF52695A8C144A085CCE6C886C372920E0CBC5D90850548D0EF0C2E
EF78C1A95C89702E3014E09609FE28155246FE9DF974888EDE59D4F353A0D0D3
698B3BCE36C3C9F486D8CD37FB8AB297A491F5CA8C6D3C16072E1956790D84AD
F1CA1E8F2D39804B1CF5D2A9024D79DA2E34CCD8202AFDB78B5E5ABD42290E0D
158806CDBFFBFABA2C0136E0B3C2BD273AB929C2102621449D59E252245BD897
E8C65A050190F0602903908F6AE34C24EA1DB69EE02F55B6CA0529B099D16DD2
36C8F4B8443521A04CA2D3CC465513A53684C8CD45F087DEAFFFCAE6321A8543
E3B529F50244DC10006A79DA945A03252FF91992A385BCFEFA19620E5CB9C09B
972C52C5B37C7A1E82755476B75CD6B79F33D241E216607973887E4A1F8EA73E
C2F4F107AD56B306CD5E51B3158AF78152A32372ED4EA6ADB42561399C6ACDAC
B7EF0F2913AB3ED138B055F4A61C14AF31CC24D0F7FE376A75333198DA57142F
0CECACB1FC7BA6D34FFB2FF192CCB6F086002C268320964D38EFCF329E44E6BC
3A3E85490EDE771CAD48C30DE877172C1FB7115BAAE9681AF02E58BC0A9B1BD4
1E18A71B69C3250E58AB8B2B18F7BB11E99A94ADF0A2FDB4E891613D794C4DDC
847ADF568CDE76AE3819AAD3ADD9BF2FBFCC0555284872A0F5B52A2CE4722FDA
1228DEB63084D6E6FD058441036CE2FAE65D089E38D408714EEAB38CF18E5C16
CEBB1F13FEAC450560D45E82351910F4EE0E815A45B905656D363C88A0566307
1A3F75BBE494DC68452B4DA58B7368F586B0C436D5EBD831C3EC1D1B66D0E7BB
A12E75AC4CCFE28CCB015C925E23D9B0943BB33958D51A6190C8B5A57B075FBA
338D10C94D99C0918DD8755E28B6C19A82A9ED128D9CE6014790D0D05C10FB83
F715849940B971BEC6C1B381E159778418999CB6EDE48D1173EFACAA5AC0A2DB
23071B3DC94F08345D0A6BC8AEFC0D9CBD927CB494C7F7D053AB5B6DE1EEA624
772FA38B222702A030844A9BB1EC800DE52E5A363F46FD92D70E8FD9EFDBD59F
14179FA6C3D77F55653F6D8B75E69160CF7E34FD0436A93B2A6EE839DC847329
9E011CBF2F0CFD6316552ABBF7FFD0EF33477D1EB42D45ECECF1538824E63F11
0B8655807B9D70D92906CBC84EB2C1733655396952392A936B62A6C88097AD52
4775AC5A6C9D6EB73CF2A2C109655C61499AF978087F0A8FF6C05B3A262DF150
93B0AC8B9AA03F6A3BADE2015E1F1E4E00A1D9DA174ADC02996D345F8569F721
691E6C26CA183B1015D5E7B20F38DBD0D285543B50E1698B07A40ABACE96AC25
8CC1387432DA83A05522C205478BD4894717F88D2DA4B49116EF801AF4482BFB
CD839FEED63EBF1E4B18E703271E27D35E51B648A6FEB5D1537AA216D01645D2
80834FECA309A0D74E94091A7E16F6EB7AF3CC5B7D4078852450B1F2125F8AE5
1E30B2D26531CC6D213A694D1568653A8F8015600A55FF56F64B2CC0C8F8651E
476723A04C8A1CBE56CA562D5F49B9A69504559AD40457172C70FAAF7496F0D0
68E50EB4D7832C4434E8612F98B7E022066968285A52C4D56B2859BBBC2B36E8
A09DEB4E028340C9AA277F14B5BFEFAD7A147EB7A6128ADFA25A447DF9784788
237FBC93913ECDB1BD8204014D97BDAAA54ED4E3ADD3F1AAD63FFCB2A860ADEC
578CA52E07668DC5F5043E368FF8D2E09404AFFD33343BBB4EC8C2D44671350C
9397CE852FBD334DC0244B7AAA9CC9C759938A01F8279A760DBF9E693CA24196
5B7664C1CEC271AFBF7666648A42BD60FA93206B9651CFE091E4D2FA22C068E2
A12743ED631338A1F206527CB01F4374A069BDB6683534D4E63F15F441F602FC
46C87DCF6D2AE97B32D183CCCB25D988DFFA1E55DDD4098CE7CA97A8B97938F6
F5CCB37470AED20E3D68AA00096BFD8814936EE9FE311642F449A6311B5EB1BE
2662867448C4D67119ECED516C978626868C1C526529DB72B4D9E91EBFFFCAD1
DFB47D76321EF27508B9540BC2598B51623B426540A3FBD66439CEB14E9CB352
AB9F739686319F53D165257743ED977C65D03945069057843E9D21892C327559
5E29796B60280EC2D30B1D4B8DF7A65FE213DB1DBB719238C746B5A96E373D1C
9D216216046E91313B2B9B845F96407D8186A4C9CFF9BBD5F5E56007338877C9
C6E3233C203C1D6F3B5891D9E92A836F3721826B30BF978F8F02B3CE3267625E
CD335FEC7EA685DE78E48293762D8768E5D14DF55E27983080ED63D68D7DB6D9
F9ADF4DAA9D8DFD29D6E95F142D4A6F5F4784C490CE5E9D34CB3FB5D74F2104A
817B7B66F1D580C0A492CBA7E99B6315AB4D1FADC38AD9013996B547F5378B51
D720D9B0DB892D2DAE96CC6C81B937D3B6EE0F0680CD15F20872E2717897C7B2
C717C22641DCBBA245FA82C5BB0FCEB36549BA47E5CAD34B5D329643D4D95D6C
8838DEAAF19108078E0FBA1212375E0BEE1C590298231DA2D0588485311DD575
D901B991320F7E85C0D800983D46A6B4C1B56963ADF7ADA7BA445C9030DBC5BD
F91861FE1244C4AF49910A1DB2C264D93BBD71AE82C0CACF5D05A4B2E4E78769
7D5B6DCA1145CD57B1465BFCA7C6E3E609F51FE3AD48F4B16D018F4EC31B34E9
D69F2B7E87634AA741245E2CD94C98F11AABE401538BF82273437EF08771BE1E
4EF7CDD21C7C74B922F1C299859A0CB52758C3A745A033005B2006C51EF4B957
8DEB4E930899DB123CE218FB3CC9B1DE103AB21FCC289AB17B00963EDFDCDFD9
E4B3E386284B0D7B7599082D7E995386C2A3AC000ECD78426A2B42AC61544508
155F5DF5A09D672ACB123C664D14CC1067DCFCBDA495F8AA69CF8FF8E4CDDF41
13C6D8B5D12E2F8925DF33A943F45EBC6BD94877119A1578DB1E47EDF9FA2D44
9E9CAC72135A250869C97C078F17063B9413097921112A7690BECB2952DFC8C2
733FC4C1984996DC8A355DB1680B741B4BF5CBF741259A1A372C7ACF07631A2B
3F6FFFD5CB96B6BDDED43EB5CE8DF4B40AF2D464CA88ED5938B4F3D6636B6476
8AA91BCFB867F96E42D4D3310534F0C83C2E5987C0083B662E8F775DDA8ABEFA
504D91DAF7732C5C0B50FBEEB8A836297267F93ACBFEF69BA3F7A55B6EB9F038
94FC1371E6CCA8B94078E60EB038F460D56F67B052C5462E76916D58B4ABDDF0
9829D3B37906C4E897151115DD1F5C5A28A5E4EDBB4C82B6E2B76D5A4B96B1EF
2C204DEFECFE57258B861F12B340FD1D457A7736FB61E0CD78EC70DDC6ACC659
A83EA0B872D6243FDAC7D6AF6F60308C8B787754FFA04DC93633B0BCD9FDE7B8
BE5FED494A1960FD9B838F1DC0BB905100017E300EB1885F10B6275BFFC41B10
3B1E3FCB50897CFECDE278E3120C45A139B538AEE3AD8E202728BBF9B104BB5E
AA7D45F713CC3210782A89CD1633C61FEC45DF816185AED463E28BB1F4041BE5
DA5EC07458760084CC40FF6B69DDDA813986353DAA86BE0350E9FE22811A1A41
6F27925F4F2AB70A77617E78F67807D14E002810478806850B9E9AB8E6AA4DF4
B4B3D5FAD49196677C6B2128E03EA730055199ED695DA8158D2DD9BA9EBDC9DE
BDE205F749BA6270EFD935989062BA55FE8392A6198F6662FA92F2D43025BCC0
559727A57A2FE5204A55EF124226BFA8DFD781E018FD65D4BAEF11EDE3CE0B58
F598847100EB4C09E6A00DD76C8669BC8244A1193372AB0FD287DD8554D074CF
8FAD4B0BE776A1A8421072DE0990D9E9A11DC302D94AAA2629778C1D5F65E405
8B14EDDD47C798A7D59F7F793D62CFF712FCFF560C8E0B385C3F59DEFB717EF3
60E3472F98B462AF6AAB04F1DA5BD89001799A17E0E99BE16658740E31BE8537
5CDAF46223BD0C258C6F0CC151FB951CE158A92F1E8F7FDAC69D10936097BFFE
B202762986FFDEE12BDCD5A936B1F58667E7B124F8EF18D2170D7D834C40A6E3
F34C4F7507D76CABD4D5857DE06EAD643D812DBBCE62C25BA3500D3B768F338E
46C76C1DF2B9A9586E5824F97FA424630C15FF0A83DD90D54ECFD07645B9BD7C
F15323F456109A49036C715290B846D5CF13CC08D47B6DE079CAC18F4C9B28FA
2010BF5D49AE64DACB369D79F2210DD6AC517B541609F1D8A1936EF28E2FC683
15C2978726C69B0BE35344C4B6D6BD2AC3F2A5E70BDA8FCFBDE0F29B36FC7443
4529C880C9B2A4478E0B2711D24CCD5FDC17EA061CAFD46EA2B05FCF364F9C59
B723BF8F058DCAB631783A18BE3DC0F69001878C72F240EED2B6722FD88A164F
951748505965BE336247DADDA54C37A51612B9C2E48E63AB737FE913231B20F5
58179226CCE5EC04D57F1F49FD30D019B7883F7942F1138EBA9070C9A89D698C
B39A96D793C2660BCAC5A71DD291D38E56B3BEB829DFDF004D28A4B52DFDB448
4C6B9D47883E94626FE5A67E3426E159D53EADD88390C846C680DDDC5EF2559B
20D1915936FBDA13EFBF453FD88C934832A73496A9B885C405D0EF4C81E23FB9
A1A7A46B2B0B2487D2977FE32FB29E6741E4BC1A8EDD8A384D078CA47B136E24
AEBF1D9D60FF07938F5650555C16D8C9A86B438E030CD534B21EF9C44AA7FC7A
A13B8B2A52710B21AFCD7F3442977921CEEA9F9DAF758E5371C06548323BD01E
BF4E53C88BEE35E3949A2759611E3B1E92B34E6E4127ABEA495B777F6FA65495
4A37C8FDC25FFA028A2E9A38A38FB1CDCA040973C315B3AD2174F5E8D1EFE469
369734FB2FFB3DED88888E7BF0C2259C4ECE5E3BCFB0D5D2A75AFA943AB06109
35787B33D91AECCD78475DA3BB37182C87C491D63D6CA6E0044897C57B1BA293
951A7A7CD12B75A7C4E3C49C692EFAF4721A29A09AB40C3768FC19933AE44C6A
6A5594B96AF304622ED293449075BE4CFE91034E909C40CD6F209E32EF0E0E07
AF0E7B7E344B58DA9A0C0E4D9D443E63C42E94274D549A95B0FAB353039E7FF3
AC597876C953FD26492175CAD79A5235F6803553C0C8692C9DE90610E592C515
8ED5C5D8C751321723E0431004D79B1372098C33EFB8C0C309C660261A71D6E4
F9B284A7DA1C05C2F968D8A5E9A40C2495183464800F11D5795EF6FE7FFE17C4
A8B667DC07DE54E2567E693D8C715994888EE38BC2B31B4F3A05CCE8D9AD2F66
C21E0C6E412A60B270C858CCF006B1BDE3AFD12F36D90E742B2CDA1C1B8CD62D
C291B901B417C7868E3EC857757F96C79F700FC74B6BBA32CCD23FCFBA664CFF
4D99EFA4A6D5DC1310FF640BD251D578DD83EE1C8C401BC0F9A66699241FEA8C
D44A8B4019B0E03313F9BCF6BCC305D0C252DD8353BC873975D89CC9870D5B29
E3AE32712CA8D0E0ABA7D363D5447EFAB17057A94448BA6444F789C01A2F7610
AB4F397708DA8C605FE0341F72D2FC728928F038AAF4F9B6E35780C936A92A46
39EAECED3FC229287BBC811E032C8E1EAD9592863E0A1445B7B88A572751AA54
059A5A4FC720F2A4333C21F9048AE53B18BCD59E014DBA6F157A57DE73FF0EF9
F4E6AD377A2BADCD1710681AA352FCAE6A5CED538F20A45BD251FC66DB984D09
E39DF3D54AE9CE7B2D66CB9559B207F277E793617327B1032B723053CB641A34
7B1A15EF44C5A79EFAE1125735BA1E1B4BCEF34D1AA9928FC24464B7EC0406FC
499855FD48A0E083CFAA783FD244E4B7CE6896C67469D92240392F89579E70E4
7C0F12261AE2BE2B24AA181078066F8D061B02915AB2F35D555AC20F0AF11F3D
DFC580C1A20AA5B5A17A6D9B732AC72FE5CC72527260EB373AE308519B56BFC4
DAC72AE6AA59DA811B8FCE3F379B301A4D9AFAC5E6373CF68C2DD7C987A9F489
3F3060407BDB5A3E04A01AE5109C69EF376FE3C19ED495910967ABCC018A386D
3E0319FC05DF01C9A0EE7D0B3E3FF0D53D240452FEE8F134D1909567FC6991E3
F4EBA7469AB0A71204B98E712FB028FEBF6E25CD869CC555E63F66C42CA37BB1
6BC628343EA2ADDBE92501422F213B2AF23933E28D840F0D131460ACF1531008
937E2AD39BB48B8B8E1A9EBB01AC78F1D14B1C46A2F808F6072C3FBD1CFF38BA
322338DE7E4075471BFE65E9B46FBC573E2159660E36E70F5175B6B9B1F3FC97
4A079FCBED0C6FD18D144C7CB5559D3582C03ECC91C0A87D1CA940273E0AEF6E
A59B2A392FB6EE2DA5A461148A7DDE49FACC560839746AFB706E1709BBA6818B
8C1F91841355444D5BDFD6E936EED89ECD2044019DC94C3F6CD1FF81616AC594
7BBCB4D5318FE15EBB152D697C0423DF39E1859AC38BE4C0905033F0EC8B1B4D
C95C2A5772F3E5F49D387C71C28650D7A0C548982CA732C05E4B2FBDCF7C3826
ECBE1A8199CD859D88B32293EA52A2671570FB509AE5C5040958A0C18E777CD1
A7C17A4F7E3C5272D5B4798429412ED16289AA26EEAF23CB552E7B09C7094BBB
83F6EB71D0829D559D6F848FFCD626EB8D34873D6394A9F50DD6D125ADD1C00C
80387993EFFB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (mywriteup.dvi)
@start /Fa 137[50 53 37 38 39 1[53 48 53 80 27 50 1[27
53 48 29 44 53 42 53 46 12[66 53 72 2[72 5[36 75 1[60
63 73 69 68 7[27 11[27 32 45[{}34 83.022 /CMBX10 rf /Fb
134[40 1[55 1[45 28 34 35 1[42 42 47 68 21 38 1[25 42
38 25 38 42 38 38 42 9[83 2[59 11[62 3[63 4[42 16[25
1[25 44[{}28 83.022 /CMTI10 rf /Fc 137[70 73 51 1[51
1[73 66 73 1[36 1[40 36 2[40 58 73 58 1[66 9[137 6[90
6[47 23[66 49[{}19 143.462 /CMR17 rf /Fd 133[37 44 44
60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46 42 25
37 46 37 46 42 23 3[42 4[85 62 62 60 46 61 1[57 65 62
76 52 2[30 62 65 54 57 63 60 59 62 5[23 5[42 42 42 42
42 42 42 23 28 23 1[42 32 32 23 1[69 2[42 19[69 1[46
48 11[{}68 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 411 Project 1) /Subject (CS 411 Project 1) /Creator (LaTeX with hyperref package) /Author (David Merrick) /Keywords (cs411 ``operating systems'') /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray Black 0 TeXcolorgray -300 -360
a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin H.S end
 -300
-360 a -300 -360 a
SDict begin 12 H.A end
 -300 -360 a -300 -360 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 -300 -360
a 83 x Fd(Da)n(vid)27 b(Merric)n(k)-300 -57 y(CS)h(411)-300
162 y(13)f(April,)g(2013)p 0 TeXcolorgray 0 TeXcolorgray
1016 489 a Fc(Individual)44 b(W)-11 b(riteup)43 b(for)f(Pro)7
b(ject)44 b(1)-300 687 y
SDict begin H.S end
 -300 687 a -300 687 a
SDict begin 12 H.A end
 -300 687
a -300 687 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.1) cvn H.B /DEST pdfmark end
 -300 687 a 0 TeXcolorgray -199 792 a Fd(1.)p
0 TeXcolorgray 42 w Fb(What)30 b(do)g(you)g(think)g(the)g(main)g(p)l
(oint)g(of)h(this)f(assignment)g(is?)74 925 y Fd(There)g(w)n(ere)f(sev)
n(eral)g(p)r(oin)n(ts)i(to)f(this)h(assignmen)n(t.)45
b(The)31 b(\014rst)g(w)n(as)e(to)i(get)f(a)g(sense)h(for)f(ho)n(w)g(to)
g(do)h(k)n(ernel)e(dev)n(elopmen)n(t.)46 b(In)-92 1024
y(particular,)27 b(the)h(lo)r(cation)g(of)g(the)g(k)n(ernel)g(\014les,)
g(what)g(their)g(functions)h(are,)e(ho)n(w)h(to)g(prop)r(erly)f
(con\014gure)g(the)h(k)n(ernel)g(to)g(matc)n(h)g(the)-92
1124 y(desired)f(outcome,)h(ho)n(w)f(to)h(compile)g(the)h(k)n(ernel,)e
(where)h(to)f(place)h(the)h(compiled)f(k)n(ernel,)f(b)r(o)r(oting)h(in)
n(to)g(the)g(new)g(k)n(ernel)g(etc.)38 b(The)-92 1224
y(second)28 b(w)n(as)h(to)g(learn)g(new)g(metho)r(ds)h(for)f(debugging)
f(and)h(testing,)h(as)f(our)g(co)r(de)g(w)n(as)f(running)h(at)g(a)g(m)n
(uc)n(h)h(lo)n(w)n(er)d(lev)n(el)i(than)h(an)n(y)-92
1323 y(most)g(of)g(us)g(had)g(previously)f(written.)45
b(The)31 b(third)f(w)n(as)f(to)h(learn)g(ho)n(w)f(to)i(use)f(SVN)h(for)
e(revision)g(con)n(trol.)44 b(Most)30 b(of)g(us)g(had)g(only)-92
1423 y(used)25 b(Git,)i(so)e(this)g(presen)n(ted)g(a)h(c)n(hallenge.)35
b(The)25 b(\014nal)h(p)r(oin)n(t)g(w)n(as)e(to)i(co)r(ordinate)e(a)h
(group)f(of)i(randomly-assigned)d(team)i(mem)n(b)r(ers)-92
1523 y(to)30 b(accomplish)f(these)h(tasks.)44 b(Ov)n(erall,)29
b(though,)i(I)f(think)h(the)g(main)f(p)r(oin)n(t)g(of)h(the)f
(assignmen)n(t)f(w)n(as)h(to)g(get)g(an)g(understanding)f(of)-92
1622 y(ho)n(w)e(pro)r(cess)f(sc)n(heduling)h(in)h(Lin)n(ux)f(w)n(orks)f
(at)i(the)g(k)n(ernel)e(lev)n(el.)-300 1672 y
SDict begin H.S end
 -300 1672
a -300 1672 a
SDict begin 12 H.A end
 -300 1672 a -300 1672 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.2) cvn H.B /DEST pdfmark end
 -300 1672 a 0 TeXcolorgray
-199 1788 a Fd(2.)p 0 TeXcolorgray 42 w Fb(How)k(did)h(you)f(appr)l(o)l
(ach)i(the)e(pr)l(oblem?)39 b(Design)30 b(de)l(cisions,)i(algorithm,)g
(etc.)74 1921 y Fa(Bac)m(kground:)48 b Fd(Real-time)33
b(sc)n(heduling)f(means)h(to)g(sc)n(hedule)f(pro)r(cesses)g(within)h
(timing)h(deadlines.)52 b(The)33 b(Lin)n(ux)g(sc)n(heduler)-92
2021 y(pro)n(vides)26 b(soft)i(real-time)g(b)r(eha)n(vior,)f(meaning)g
(that)i(it)f(tries)g(to)g(sc)n(hedule)g(pro)r(cesses)f(within)i(timing)
f(deadlines)g(but)h(do)r(esn't)f(mak)n(e)-92 2120 y(guaran)n(tees)d(to)
i(alw)n(a)n(ys)e(ac)n(hiev)n(e)h(this.)37 b(Lin)n(ux)27
b(pro)n(vides)f(t)n(w)n(o)h(real-time)f(sc)n(heduling)h(p)r(olicies,)g
(FIF)n(O)g(\(SCHED)p 3513 2120 25 4 v 31 w(FIF)n(O\))g(and)g(round-)-92
2220 y(robin)34 b(\(SCHED)p 457 2220 V 30 w(RR\).)i(Round-robin)e(sc)n
(heduling)g(puts)h(the)h(pro)r(cess)d(descriptor)h(at)h(the)g(end)g(of)
g(the)g(runqueue,)i(gran)n(ting)c(eac)n(h)-92 2320 y(SCHED)p
201 2320 V 30 w(RR)c(pro)r(cess)f(of)i(the)f(same)g(priorit)n(y)f(an)h
(equal)g(timeslice.)42 b(FIF)n(O)29 b(sc)n(heduling)g(runs)g(eac)n(h)f
(SCHED)p 3442 2320 V 30 w(FIF)n(O)h(pro)r(cess)f(of)i(the)-92
2419 y(same)d(priorit)n(y)f(un)n(til)i(it)g(is)f(\014nished,)h(then)g
(runs)g(the)g(next)f(pro)r(cess)g(in)h(the)g(runqueue.)74
2552 y Fa(Design)d(decisions:)33 b Fd(W)-7 b(e)23 b(though)n(t)g(the)h
(most)f(e\016cien)n(t)g(approac)n(h)e(to)i(the)h(design)e(w)n(ould)h(b)
r(e)h(to)f(lev)n(erage)e(the)i(data)g(structures,)-92
2652 y(functions,)37 b(and)f(system)f(calls)g(already)f(in)i(place,)h
(as)e(opp)r(osed)g(to)g(rein)n(v)n(en)n(ting)f(the)i(wheel)g(b)n(y)f
(rewriting)f(these)i(ourselv)n(es.)59 b(W)-7 b(e)-92
2751 y(decided)23 b(to)g(\014rst)h(trac)n(k)e(do)n(wn)h(the)g(relev)-5
b(an)n(t)23 b(\014les)g(for)g(real-time)g(sc)n(heduling,)g(then)h
(narro)n(w)e(these)h(do)n(wn)g(to)g(the)h(functions)g(w)n(e)f(w)n(ould)
-92 2851 y(need)j(to)g(mo)r(dify)h(or)e(implemen)n(t)i(within)g(these)f
(\014les.)37 b(W)-7 b(e)26 b(knew)h(that)f(the)h(\014les)f(w)n(e)g
(needed)g(to)h(mo)r(dify)f(w)n(ould)g(b)r(e)h(found)g(under)f(the)-92
2951 y(\\k)n(ernel")g(directory)h(in)i(the)g(ro)r(ot)f(of)g(the)h(k)n
(ernel)f(source)f(tree.)39 b(This)29 b(folder)f(con)n(tains)g(core)f
(subsystems,)h(including)h(the)g(sc)n(heduler.)-92 3050
y(Within)f(this)g(directory)-7 b(,)27 b(w)n(e)h(used)f(`grep)g(\\SCHED)
p 1578 3050 V 30 w(RR")g(./sc)n(hed*')g(and)h(`grep)f(\\SCHED)p
2853 3050 V 29 w(FIF)n(O")g(./sc)n(hed*')g(to)g(determine)h(whic)n(h)
-92 3150 y(of)i(the)h(sc)n(heduler)e(\014les)h(w)n(e)g(needed)h(to)f
(edit.)45 b(The)31 b(\014rst)f(\014le)g(w)n(e)g(edited)h(w)n(as)e(sc)n
(hed.c.)45 b(This)30 b(\014le)g(con)n(tains)g(the)g(de\014nitions)h
(for)f(the)-92 3249 y(base)d(sc)n(heduler)f(co)r(de,)i(whic)n(h)f
(iterates)g(o)n(v)n(er)f(eac)n(h)h(sc)n(heduler)g(class)f(in)i(order)e
(of)i(priorit)n(y)e(to)i(select)f(whic)n(h)h(pro)r(cess)e(runs)h(next.)
74 3382 y Fa(Data)40 b(structures)h(and)f(functions)f(related)h(to)g
(real-time)e(sc)m(heduling)h(in)g(sc)m(hed.c:)51 b Fd(rt)p
3294 3382 V 29 w(rq)34 b(is)h(the)f(runqueue)h(data)-92
3482 y(structure)21 b(for)g(real-time)g(tasks.)34 b(enqueue)p
1263 3482 V 30 w(task\(\),)23 b(dequeue)p 1847 3482 V
30 w(task\(\),)g(and)e(activ)-5 b(ate)p 2577 3482 V 30
w(task\(\))22 b(are)f(all)g(functions)h(related)f(to)h(adding)f(and)-92
3582 y(remo)n(ving)e(tasks)h(from)g(the)h(runqueue,)h(all)e(of)h(whic)n
(h)f(had)h(b)r(een)g(implemen)n(ted)g(for)g(us.)34 b(prepare)p
2960 3582 V 29 w(task)p 3140 3582 V 29 w(switc)n(h\(\),)22
b(\014nish)p 3701 3582 V 30 w(task)p 3882 3582 V 30 w(switc)n(h\(\))-92
3681 y(b)r(oth)28 b(p)r(ertain)f(to)h(switc)n(hing)f(b)r(et)n(w)n(een)g
(tasks.)36 b(rt)p 1494 3681 V 30 w(p)r(olicy\(\),)28
b(task)p 2007 3681 V 29 w(has)p 2157 3681 V 30 w(rt)p
2252 3681 V 29 w(p)r(olicy\(\),)g(init)p 2737 3681 V
31 w(rt)p 2833 3681 V 30 w(bandwidth\(\),)g(rt)p 3430
3681 V 30 w(prio\(\),)-92 3781 y(rt)p -22 3781 V 29 w(m)n(utex)p
233 3781 V 30 w(setprio\(\),)j(rt)p 692 3781 V 30 w(m)n(utex)p
948 3781 V 30 w(adjust)p 1202 3781 V 30 w(pi\(\),)h(init)p
1544 3781 V 31 w(rt)p 1640 3781 V 29 w(rq\(\),)g(init)p
1989 3781 V 30 w(tg)p 2093 3781 V 30 w(rt)p 2188 3781
V 29 w(en)n(try\(\),)g(normalize)p 2878 3781 V 28 w(rt)p
2971 3781 V 30 w(tasks\(\),)f(free)p 3435 3781 V 30 w(rt)p
3530 3781 V 30 w(sc)n(hed)p 3757 3781 V 29 w(group\(\),)g(al-)-92
3880 y(lo)r(c)p 17 3880 V 29 w(rt)p 111 3880 V 30 w(sc)n(hed)p
338 3880 V 29 w(group\(\),)c(free)p 822 3880 V 30 w(rt)p
917 3880 V 30 w(sc)n(hed)p 1144 3880 V 29 w(group\(\),)g(allo)r(c)p
1665 3880 V 29 w(rt)p 1759 3880 V 30 w(sc)n(hed)p 1986
3880 V 29 w(group\(\),)h(tg)p 2413 3880 V 29 w(has)p
2563 3880 V 29 w(rt)p 2657 3880 V 30 w(tasks\(\),)g(rt)p
3051 3880 V 29 w(bandwidth)p 3467 3880 V 31 w(enabled\(\),)p
-92 3980 V -63 3980 V -38 3980 a(rt)p 32 3980 V 30 w(sc)n
(hedulable\(\),)g(sc)n(hed)p 788 3980 V 29 w(group)p
1026 3980 V 29 w(set)p 1157 3980 V 29 w(rt)p 1251 3980
V 30 w(run)n(time\(\),)g(sc)n(hed)p 1877 3980 V 30 w(group)p
2116 3980 V 28 w(rt)p 2209 3980 V 30 w(run)n(time\(\),)g(sc)n(hed)p
2835 3980 V 30 w(group)p 3074 3980 V 28 w(set)p 3204
3980 V 30 w(rt)p 3299 3980 V 30 w(p)r(erio)r(d\(\),)-92
4080 y(sc)n(hed)p 110 4080 V 29 w(group)p 348 4080 V
29 w(rt)p 442 4080 V 29 w(p)r(erio)r(d\(\),)g(sc)n(hed)p
1014 4080 V 30 w(rt)p 1109 4080 V 30 w(global)p 1357
4080 V 28 w(constrain)n(ts\(\),)f(sc)n(hed)p 2093 4080
V 29 w(rt)p 2187 4080 V 30 w(can)p 2342 4080 V 29 w(attac)n(h\(\),)h
(sc)n(hed)p 2912 4080 V 29 w(rt)p 3006 4080 V 30 w(global)p
3254 4080 V 29 w(constrain)n(ts\(\),)-92 4179 y(sc)n(hed)p
110 4179 V 29 w(rt)p 204 4179 V 30 w(handler\(\),)21
b(cpu)p 744 4179 V 30 w(rt)p 839 4179 V 30 w(run)n(time)p
1153 4179 V 30 w(write\(\),)h(cpu)p 1606 4179 V 30 w(rt)p
1701 4179 V 29 w(run)n(time)p 2014 4179 V 30 w(read\(\),)f(cpu)p
2439 4179 V 30 w(rt)p 2534 4179 V 30 w(p)r(erio)r(d)p
2795 4179 V 30 w(write)p 3010 4179 V 29 w(uin)n(t\(\),)i(cpu)p
3423 4179 V 30 w(rt)p 3518 4179 V 29 w(p)r(erio)r(d)p
3778 4179 V 30 w(read)p 3966 4179 V 29 w(uin)n(t\(\))-92
4279 y(are)28 b(all)h(functions)h(in)g(sc)n(hed.c)f(related)g(to)g
(real-time)g(tasks.)42 b(Of)29 b(these,)i(w)n(e)e(only)g(had)g(to)h(mo)
r(dify)g(rt)p 3178 4279 V 29 w(p)r(olicy\(\))g(to)g(enable)f(real-time)
-92 4379 y(sc)n(heduling.)74 4511 y Fa(Implemen)m(ting)g(round-robin)i
(sc)m(heduling:)36 b Fd(F)-7 b(or)26 b(round-robin)g(sc)n(heduling,)h
(w)n(e)g(knew)g(that)h(w)n(e)e(needed)i(pro)r(cesses)e(to)h(b)r(e)-92
4611 y(run)32 b(one)h(after)f(the)h(next,)i(rep)r(eating,)e(with)h(a)e
(pre-de\014ned)h(timeslice)g(to)g(run.)52 b(W)-7 b(e)33
b(found)g(this)h(in)n(terv)-5 b(al)32 b(de\014ned)h(in)g(the)h(sc)n
(hed.c)-92 4711 y(\014le)e(in)g(the)g(constan)n(t,)g(DEF)p
836 4711 V 30 w(TIMESLICE.)f(F)-7 b(rom)32 b(the)g(commen)n(ts)g(in)g
(the)g(\014le,)h(w)n(e)f(knew)g(that)g(this)g(constan)n(t)f(w)n(as)g
(in)n(tended)i(for)-92 4810 y(SCHED)p 201 4810 V 30 w(RR)27
b(tasks)f(\(FIF)n(O)g(tasks)g(do)h(not)f(use)h(a)f(timeslice)h(in)g
(theory;)g(In)f(practice)g(they)h(essen)n(tially)f(ha)n(v)n(e)g(an)g
(in\014nite)i(timeslice\).)-92 4910 y(By)h(default,)h(this)g(v)-5
b(alue)29 b(w)n(as)f(set)i(to)f(b)r(e)h(100ms.)40 b(Without)31
b(the)e(kno)n(wledge)f(of)i(the)f(o)n(v)n(erhead)f(of)h(switc)n(hing)g
(cost)g(of)g(tasks)g(on)g(this)-92 5010 y(particular)24
b(arc)n(hitecture,)i(w)n(e)f(left)i(it)g(de\014ned)f(the)g(w)n(a)n(y)f
(it)i(w)n(as.)35 b(This)26 b(v)-5 b(alue)26 b(is)g(critical)g(to)g(the)
g(op)r(eration)f(of)h(the)h(sc)n(heduler.)35 b(If)27
b(it)f(is)-92 5109 y(to)r(o)i(high,)g(the)h(system)g(ma)n(y)e(not)i(b)r
(e)g(as)f(resp)r(onsiv)n(e)f(and)h(pro)r(cesses)f(will)i(not)f(app)r
(ear)g(to)g(b)r(e)h(executing)f(concurren)n(tly)-7 b(.)38
b(If)29 b(it)g(is)f(to)r(o)-92 5209 y(lo)n(w,)h(the)h(system)f(will)h
(b)r(e)g(v)n(ery)f(ine\016cien)n(t.)43 b(F)-7 b(or)29
b(example,)h(if)g(the)g(cost)f(of)g(switc)n(hing)g(tasks)g(is)h(10ms)e
(and)i(the)g(timeslice)f(is)h(10ms,)-92 5308 y(then)e(50\045)f(of)g
(CPU)g(cycles)g(will)h(b)r(e)g(dedicated)g(to)f(switc)n(hing)h(b)r(et)n
(w)n(een)f(tasks.)74 5441 y(T)-7 b(o)32 b(implemen)n(t)i(round-robin)e
(and)h(FIF)n(O)g(sc)n(heduling,)h(w)n(e)f(edited)h(the)f(sc)n(hed)p
2646 5441 V 30 w(rt.c)g(\014le.)54 b(This)33 b(\014le)g(con)n(tains)f
(the)i(de\014nitions)-92 5541 y(related)27 b(to)g(real-time)g(sc)n
(heduling)g(p)r(olicies.)p 0 TeXcolorgray 1929 5889 a(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray 74 -277 a Fa(Data)44
b(structures)g(and)h(functions)e(related)g(to)h(SCHED)p
2205 -277 29 4 v 34 w(RR)f(task)h(sc)m(heduling)f(in)g(sc)m(hed)p
3469 -277 V 34 w(rt.c:)58 b Fd(task)p 3883 -277 25 4
v 29 w(tic)n(k)p 4046 -277 V 30 w(rt\(\))-92 -177 y(and)38
b(get)p 196 -177 V 30 w(rr)p 292 -177 V 29 w(in)n(terv)-5
b(al)p 594 -177 V 29 w(rt\(\).)71 b(W)-7 b(e)39 b(mo)r(di\014ed)g(b)r
(oth)h(of)e(these)h(functions)g(to)g(implemen)n(t)h(our)e(round-robin)f
(sc)n(heduling)h(algorithm.)-92 -78 y(get)p 24 -78 V
29 w(rr)p 119 -78 V 29 w(in)n(terv)-5 b(al)p 421 -78
V 29 w(rt\(\))28 b(returns)f(the)h(timeslice)g(for)f(round-robin)f
(tasks.)74 55 y Fa(Data)37 b(structures)g(and)h(functions)e(related)g
(to)h(SCHED)p 2163 55 29 4 v 34 w(FIF)m(O)g(task)g(sc)m(heduling)f(in)g
(sc)m(hed)p 3481 55 V 35 w(rt.c:)45 b Fd(task)p 3883
55 25 4 v 29 w(tic)n(k)p 4046 55 V 30 w(rt\(\))-92 155
y(and)31 b(get)p 189 155 V 30 w(rr)p 285 155 V 29 w(in)n(terv)-5
b(al)p 587 155 V 29 w(rt\(\).)49 b(These)32 b(functions)g(w)n(ere)e
(critical)h(to)h(the)g(implemen)n(tation)g(of)f(b)r(oth)i(SCHED)p
3337 155 V 30 w(RR)f(and)f(SCHED)p 3974 155 V 30 w(FIF)n(O)-92
254 y(p)r(olicies.)k(W)-7 b(e)25 b(mo)r(di\014ed)g(task)p
864 254 V 30 w(tic)n(k)p 1028 254 V 29 w(rt\(\))g(to)g(basically)e(not)
i(do)f(an)n(ything)g(if)i(the)f(task)f(p)r(olicy)g(is)h(set)f(to)h
(SCHED)p 3470 254 V 30 w(FIF)n(O;)g(this)g(function)-92
354 y(w)n(as)30 b(mean)n(t)i(to)g(act)f(on)h(SCHED)p
988 354 V 30 w(RR)g(tasks.)49 b(W)-7 b(e)32 b(mo)r(di\014ed)h(get)p
2030 354 V 29 w(rr)p 2125 354 V 29 w(in)n(terv)-5 b(al)p
2427 354 V 29 w(rt\(\))33 b(so)e(that)h(if)g(the)h(task)e(p)r(olicy)h
(is)f(set)h(to)g(FIF)n(O,)g(it)-92 454 y(returns)c(0)h(b)r(ecause)g
(FIF)n(O)g(tasks)f(do)h(not)g(ha)n(v)n(e)f(timeslices)h(\(they)h(run)f
(un)n(til)h(completion)f(or)f(they)i(blo)r(c)n(k)e(and)h(yield)h(the)f
(CPU\).)h(A)-92 553 y(v)-5 b(alue)22 b(of)g(zero)g(is)g(in)n(terpreted)
g(b)n(y)g(sc)n(hed)p 1189 553 V 30 w(rr)p 1285 553 V
29 w(get)p 1425 553 V 29 w(in)n(terv)-5 b(al)22 b(in)h(sc)n(hed.c)f(to)
g(mean)h(an)f(in\014nite)h(timeslice.)35 b(In)n(terestingly)-7
b(,)23 b(SCHED)p 3974 553 V 30 w(FIF)n(O)-92 653 y(and)h(SCHED)p
359 653 V 30 w(RR)h(share)f(m)n(uc)n(h)g(of)h(the)g(same)f(functions)h
(to)g(implemen)n(t)g(them.)36 b(SCHED)p 2796 653 V 31
w(FIF)n(O)24 b(is)g(essen)n(tially)g(implemen)n(ted)h(using)-92
752 y(a)i(round-robin)f(p)r(olicy)h(with)h(in\014nite)h(timeslices)e
(for)g(eac)n(h)g(task.)74 885 y Fa(The)i(dev)m(elopmen)m(t)g(pro)s
(cess:)35 b Fd(W)-7 b(e)25 b(w)n(en)n(t)h(through)e(sev)n(eral)g
(iterations)g(of)i(mo)r(difying,)g(compiling,)f(and)h(testing.)36
b(W)-7 b(e)26 b(tested)-92 985 y(our)c(system)i(calls)f(and)g(as)g(so)r
(on)g(as)g(w)n(e)g(found)h(one)g(that)g(w)n(as)e(brok)n(en)h(w)n(e)g
(determined)h(wh)n(y)-7 b(,)24 b(referencing)e(the)i(full)h(3.0.4)d(k)n
(ernel)h(when)-92 1085 y(necessary)-7 b(.)35 b(W)-7 b(e)28
b(then)g(started)f(the)h(cycle)f(o)n(v)n(er)f(again.)74
1217 y Fa(Debugging:)41 b Fd(As)30 b(far)g(as)g(I)h(could)f(tell,)i
(there)e(w)n(as)g(not)g(a)g(w)n(a)n(y)g(to)g(load)g(the)h(k)n(ernel)e
(in)n(to)i(GDB)f(on)h(our)e(arc)n(hitecture,)i(so)e(w)n(e)-92
1317 y(w)n(ere)c(limited)i(to)f(using)g(prin)n(t)h(statemen)n(ts)f(for)
f(debugging.)36 b(Since)26 b(the)h(C)g(standard)e(library)g(is)h(not)h
(included)f(in)h(the)g(Lin)n(ux)f(k)n(ernel,)-92 1417
y(w)n(e)h(had)g(to)h(use)f(prin)n(tk,)g(the)h(built-in)h(k)n(ernel)d
(prin)n(t)i(function,)g(for)f(this.)-300 1466 y
SDict begin H.S end
 -300
1466 a -300 1466 a
SDict begin 12 H.A end
 -300 1466 a -300 1466 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.3) cvn H.B /DEST pdfmark end
 -300 1466
a 0 TeXcolorgray -199 1583 a Fd(3.)p 0 TeXcolorgray 42
w Fb(How)j(did)h(you)f(ensur)l(e)f(your)h(solution)g(was)g(c)l(orr)l(e)
l(ct?)38 b(T)-6 b(esting)30 b(details,)i(for)e(instanc)l(e.)74
1716 y Fd(T)-7 b(esting)27 b(w)n(as)g(one)g(of)g(the)h(most)g(c)n
(hallenging)e(asp)r(ects)h(of)h(the)g(pro)5 b(ject.)74
1848 y(W)-7 b(e)28 b(determined)h(that)f(the)h(b)r(est)g(w)n(a)n(y)e
(to)h(test)g(round-robin)f(sc)n(heduling)h(w)n(ould)f(b)r(e)i(to)f
(write)g(a)g(C)g(program)f(that)h(set)g(itself)h(to)-92
1948 y(a)h(SCHED)p 273 1948 25 4 v 30 w(RR)h(pro)r(cess)f(using)h(sc)n
(hed)p 1167 1948 V 29 w(setsc)n(heduler\(\).)46 b(This)31
b(program)e(w)n(ould)h(then)i(fork)e(o\013)h(4)f(c)n(hild)h(programs.)
45 b(Eac)n(h)29 b(of)i(these)-92 2048 y(programs)e(w)n(ould)j(prin)n(t)
g(their)g(PID,)h(time)f(this)h(prin)n(t)f(op)r(eration,)g(and)g(then)h
(busy-w)n(ait)e(for)h(the)g(rest)g(of)g(their)g(100ms)f(timeslice.)-92
2147 y(They)23 b(w)n(ould)g(cycle)h(through)f(this)h(four)f(times.)36
b(If)24 b(w)n(e)f(had)h(implemen)n(ted)g(our)f(round-robin)f(algorithm)
h(successfully)-7 b(,)24 b(w)n(e)f(knew)h(that)-92 2247
y(the)g(pro)r(cesses)e(should)i(prin)n(t)g(out)g(their)g(resp)r(ectiv)n
(e)f(PIDs)h(one)g(at)f(a)h(time,)h(rep)r(eating.)35 b(One)24
b(ca)n(v)n(eat)e(to)i(this)g(w)n(as)f(that)i(w)n(e)e(had)h(to)g(set)-92
2347 y(the)29 b(CPU)h(a\016nit)n(y)-7 b(.)42 b(W)-7 b(e)29
b(also)g(had)g(to)g(mak)n(e)g(sure)g(that)g(the)h(pro)r(cesses)e(did)i
(not)f(call)g(sleep\(\))h(for)f(the)g(duration)g(of)g(their)h
(timeslice,)-92 2446 y(as)e(this)h(w)n(ould)g(cause)f(the)i(sc)n
(heduler)e(to)h(run)g(the)h(next)f(task)f(and)h(in)n(terfere)g(with)h
(our)e(results.)41 b(W)-7 b(e)29 b(used)g(clo)r(c)n(k\(\))g(with)h(p)r
(olling)f(in)-92 2546 y(a)f(while)h(lo)r(op)f(to)h(coun)n(t)g(up)g(to)g
(100ms,)e(and)i(added)g(assem)n(bly)e(co)r(de)i(to)g(prev)n(en)n(t)f
(the)h(compiler)f(from)h(p)r(oten)n(tially)f(optimizing)h(out)-92
2645 y(this)f(while)g(lo)r(op.)37 b(Initially)-7 b(,)28
b(w)n(e)g(had)g(not)g(correctly)e(implemen)n(ted)i(the)h(sc)n(hed)p
2446 2645 V 29 w(setsc)n(heduler\(\))f(system)f(call,)h(causing)f(our)g
(program)-92 2745 y(to)g(exit)h(with)g(an)f(error.)35
b(Once)27 b(w)n(e)g(\014xed)h(this)g(and)f(recompiled)g(the)h(k)n
(ernel,)f(our)g(program)f(outputted)i(the)g(exp)r(ected)g(results.)74
2878 y(T)-7 b(o)19 b(test)i(FIF)n(O)e(sc)n(heduling,)i(w)n(e)f(lev)n
(eraged)e(the)i(program)e(w)n(e)i(had)g(used)g(to)g(test)g(round-robin)
e(sc)n(heduling.)34 b(This)20 b(time,)i(ho)n(w)n(ev)n(er,)-92
2977 y(the)29 b(program)f(w)n(ould)h(set)h(itself)g(to)f(SCHED)p
1362 2977 V 30 w(FIF)n(O)g(using)h(sc)n(hed)p 2039 2977
V 29 w(setsc)n(heduler\(\))f(prior)g(to)g(forking)g(o\013)g(the)h(c)n
(hild)g(programs.)40 b(The)-92 3077 y(exp)r(ected)34
b(output)g(on)g(success)f(w)n(ould)h(b)r(e)g(that)g(the)g(\014rst)g(c)n
(hild)g(w)n(ould)g(prin)n(t)f(its)h(PID)g(four)g(times,)i(then)e(the)h
(next)f(w)n(ould)f(prin)n(t)-92 3177 y(all)c(four,)i(and)f(so)f(on.)44
b(Ev)n(en)30 b(though)g(FIF)n(O)f(sc)n(heduling)h(do)r(es)g(not)g(use)g
(timeslices,)h(w)n(e)f(left)g(these)h(in)n(terv)-5 b(als)29
b(in)h(b)r(ecause)g(it)h(w)n(ould)-92 3276 y(pro)r(duce)c(the)h(same)f
(results)g(and)g(allo)n(w)n(ed)f(us)i(to)f(reuse)g(co)r(de.)37
b(When)28 b(w)n(e)f(tested)h(this,)g(it)g(also)f(p)r(erformed)g(as)g
(exp)r(ected.)-300 3326 y
SDict begin H.S end
 -300 3326 a -300 3326 a
SDict begin 12 H.A end
 -300
3326 a -300 3326 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.4) cvn H.B /DEST pdfmark end
 -300 3326 a 0 TeXcolorgray -199 3442
a Fd(4.)p 0 TeXcolorgray 42 w Fb(What)j(did)h(you)f(le)l(arn?)74
3575 y Fd(In)i(completing)h(this)g(pro)5 b(ject,)33 b(I)g(gained)e(a)i
(m)n(uc)n(h)f(greater)f(understanding)h(for)g(ho)n(w)g(Lin)n(ux)g(op)r
(erates)g(\\under)g(the)h(ho)r(o)r(d")f(in)-92 3675 y(k)n(ernel)22
b(space.)35 b(I)24 b(learned)f(ab)r(out)h(the)g(p)r(erformance)f
(trade-o\013s)g(with)h(sc)n(heduling)f(tasks)g(in)h(FIF)n(O)g(vs)f
(round-robin.)34 b(I)24 b(learned)f(ab)r(out)-92 3774
y(task)k(prioritization.)38 b(I)28 b(learned)f(that)i(m)n(y)f(p)r
(erception)g(of)g(a)g(computer)g(m)n(ultitasking)g(and)g(pro)r(cess)f
(concurrency)f(is)i(really)g(just)g(an)-92 3874 y(illusion;)f(pro)r
(cesses)e(are)i(run)g(sequen)n(tially)f(in)h(a)g(prioritized)g(fashion)
f(b)n(y)h(the)h(sc)n(heduler,)e(but)i(all)f(of)g(this)h(happ)r(ens)f
(so)f(quic)n(kly)h(that)-92 3974 y(it)33 b(app)r(ears)e(as)h(though)g
(man)n(y)g(pro)r(cesses)f(are)h(running)g(on)g(eac)n(h)g(core)g(of)g
(the)h(CPU)g(sim)n(ultaneously)-7 b(.)51 b(I)32 b(learned)g(the)h(purp)
r(ose)f(of)-92 4073 y(the)g(\014les)g(within)h(the)f(k)n(ernel)f
(directory)g(tree.)50 b(I)32 b(learned)f(ho)n(w)g(to)h(use)g(di\013)h
(to)f(mak)n(e)f(patc)n(hes)g(for)h(the)g(k)n(ernel.)50
b(I)32 b(learned)f(ho)n(w)g(to)-92 4173 y(con\014gure)26
b(and)h(compile)h(a)f(new)h(k)n(ernel.)36 b(I)27 b(learned)g(ho)n(w)g
(to)g(b)r(o)r(ot)h(in)n(to)g(a)f(newly-compiled)g(k)n(ernel)g(and)g
(debug)g(it.)p 0 TeXcolorgray 1929 5889 a(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
