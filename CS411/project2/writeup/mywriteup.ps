%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: mywriteup.dvi
%%CreationDate: Mon Apr 29 22:41:51 2013
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMR17 CMTI10 CMBX10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter mywriteup.dvi -o
%+ mywriteup.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.04.29:2241
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMBX10
%!PS-AdobeFont-1.1: CMBX10 1.00B
%%CreationDate: 1992 Feb 19 19:54:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /colon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-301 -250 1164 946}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8B731A88D7740B0DDAED1B3F82
7DB9DFB4372D3935C286E39EE7AC9FB6A9B5CE4D2FAE1BC0E55AE02BFC464378
77B9F65C23E3BAB41EFAE344DDC9AB1B3CCBC0618290D83DC756F9D5BEFECB18
2DB0E39997F264D408BD076F65A50E7E94C9C88D849AB2E92005CFA316ACCD91
FF524AAD7262B10351C50EBAD08FB4CD55D2E369F6E836C82C591606E1E5C73F
DE3FA3CAD272C67C6CBF43B66FE4B8677DAFEEA19288428D07FEB1F4001BAA68
7AAD6DDBE432714E799CFA49D8A1A128F32E8B280524BC8041F1E64ECE4053C4
9F0AEC699A75B827002E9F95826DB3F643338F858011008E338A899020962176
CF66A62E3AEF046D91C88C87DEB03CE6CCDF4FB651990F0E86D17409F121773D
6877DF0085DFB269A3C07AA6660419BD0F0EF3C53DA2318BA1860AB34E28BAC6
E82DDB1C43E5203AC9DF9277098F2E42C0F7BD03C6D90B629DE97730245B8E8E
8903B9225098079C55A37E4E59AE2A9E36B6349FA2C09BB1F5F4433E4EEFC75E
3F9830EB085E7E6FBE2666AC5A398C2DF228062ACF9FCA5656390A15837C4A99
EC3740D873CFEF2E248B44CA134693A782594DD0692B4DBF1F16C4CDECA692C4
0E44FDBEF704101118BC53575BF22731E7F7717934AD715AC33B5D3679B784C9
4046E6CD3C0AD80ED1F65626B14E33CFDA6EB2825DC444FA6209615BC08173FF
1805BDFCCA4B11F50D6BD483FD8639F9E8D0245B463D65A0F12C26C8A8EE2910
757696C3F13144D8EA5649816AAD61A949C3A723ABB585990593F20A35CD6B7E
0FA0AD8551CEE41F61924DC36A464A10A1B14C33FAFB04862E30C66C1BC55665
6D07D93B8C0D596E109EE2B1AAB479F7FAA35279ADB468A624BE26D527BFF5ED
E067598E1B8B781EB59569E3D0D54D8EFAE0F3EDE26279776ABA15341E42E636
6E02817082BE6FE0B04249A4840C11F95F8ADEFF72173E9A5F2AB2F62C427E5B
DC010E18641EAC906A5EF0F9BC2108062134A7F10956219C5847C0D82F0E8663
12D963E012DF0DD899911EC5D8096F80B49CA3444CF1294FBFAB57DFACC9D01C
46F3BA2F3D1C14EC30CBF83E5729F1C074D4F1665405CF54722827FBC24AEF08
F6DD0BC6A79A2DB1FF539454E8F5D1A42D40CCFBC093AFD3E57973A009095CEA
B91FAFD236C47F453B38DB0067907A28EB5E9ADE87A2181F1D6DE4E183631716
C21F0F952E0666AC74371F8B5C888DC44FBA5607435A619684F502CF625663C7
94B0DAA79BE8E129E7F5C5AD1B7495C1BC9B1C759867467F55148C7FF2F914D8
95218C4C3C2D2DB3482C21EA050F23D6A7A056B172EB210276CDB3B1DCA47A99
96AF4B0A1E4A219C2559BDAF6F4C56D862C31ED9A2DED98A79B1993FE3C7F50F
9AAC0E3EBD9F7431FFB72E03A05ED59A723EA87D7B7EC6CAEB5D464B4F6421A4
37931A2EBD816C7AC81F42E9372DE5AF671D6B68572D60295D4052FBE669D0E8
8C03298934B13B595BFC1A4614AC3A618C17E9952987100AFC0EC031C970FC19
30C18A3C23D649EE2C8CBE0C05C80DD94D75107FA358E8822DBC0E89BB7C580C
ABEA97A53651FF71BD54185D979C523DFB7852469ABE08037B577708D281F576
2ADE506C2DA47286A8A2312B11DE4C7EF99A1D62984C5FE0BFA48E59B3683BAD
EA266C87FA3773242E1A590EC370531F629C33E5C7B79CE97EFA358C5A99150E
779FDDF333ACE0C8A6363FD6E84085B97470FD7376707021E31D02F2E5F53FA2
E56F84C54ECF480FF9881EFF28ADA33BF845F91BFB89E8F891BF48CA4994F23C
E5F7903E988A469C72511CB318C13A5371D955CDD2470425A6EF88167AFBB4B3
133745F8106A0A97D5CE7AA927E4C092DA846C1DF80BB556AB1E91523352299D
A2A2209D56BDCFB2FB1F77DFF436648144C4B300D50C9A06BA22F365FF5C6EFF
3159D0EBBB2637BC7011340E49D290D8C48362CF8FA6E05C3238A81FD52374DA
2EBB307051A4A646BA716558617297C43DFA17B583663C2F134BB4B5EEA3039C
CD3F02DB45E13804E9696DC488FD13E33323F969C14BB2980F7880873FE5C65E
11F800A521B5E66D8D374FB86F6252CE4CF27027A7FA5F58E2D16D2E11CBA560
62181F7A04677F8117B5DE1BECFDC79A3395EEF62A1E26C78B4B4CAC8E559F40
393237695B92C51174ACAE9FB3489FBF1ECA47A8554887D0DE0FAAD053A48E3A
1013E9D4E569D652D6728E4323BCA7787C6342B148C01A292525336AFD8C8727
2DE7D40ACEAECD7856D67C08968D525D01744858C9E6F13F1446A72506AE3627
E6D455546AF884225F7FBB47AA4580481FCA90975249F91F0A5E56773FFFBCCF
B9F266524967203A6A97334369ECDACE2372C3B093DF841CFEB4B60446CB65B5
B663AE9DD99F14E412F38AAF3CC52EDA0EEB3A99C30F0BF75004E7BB98BA6FF3
1029DF8874CA52FE7C99B02C54AA0208095A1CFB07F2E92C2FD1916CA276E244
FA5920090024C199F45CC927C870FE017AFEA79C6DE8E8A5C5740425A75D88A7
F0F622FDC90492D1D68EF098391A57E7B4E32F84D2A6AB7630AF905ECC414BDF
49B311EC3768787AB49BAC9386672518F0FAB3D3B552591554F715DD31645BB3
3EC6A2BBD4E6081DECA66E7B551B3534D47E7D5A7E0A794B591214963A1FAA5E
3CB03B04AA12F722C9C9E2EEDA043204B212ECCB41500BC70DFEBD87D9C967F5
5EFF4A77F26E1C6D0DE89982548CBD950D39DF6ED8A0ABF028739FD4114B5009
10869A6CDEBC6496D7FF4A5FD2A1FA503C5AAEF6D3951CAFCE3C7628A87D1F99
03575D101EE7CAACBE862334FF9F4D2C4317F99A38FCAD89EE17310B48B042B8
91655D2E43849EFB8BE0E1FCC9F4F0679E5EFBACA1E0A25B9C3E6A41A5BDC804
397A6A7933873934A2A88FCA9F0EDD37CEBC0D1E3F5BDBAC3392FC3798CC18F5
F782C84F267EB5C8A15A25096CB3063E0C9228069EE1A1461603E1D8F39CE4BC
22FB0AE7CEA5AF519152095B14295EEF6393FE14CA8F754F5050F916796E2849
517C6AC5343BC4EECC5C85E989EC625E69C8F01250D70A6BA6C90C6AF9927B35
45E70D0B10207C1AC35509052C8B4051BC308CAE142087DE890841FE27E41B4B
F32F18DC03E64752E50941F72DA208EDF7BE32C991F83FD88616394DCA4F036F
FAFA6E4A1D77CB03E5791F359502A72D02EACFB5CFED28C19E137552D78191C6
527E5007A36AD1AC4CE89D7AFF94A4EDFB96C412B240C0A33C6CDE82131971B4
ADBD0C5CDE59B121D9E1FEA2D6043B64AF6B4A8A800CAFF85B792D28DD97111F
EF38535DB884BA375F950E5BD3092577E23D70F9865E37763BB10DFE21649EAC
BBB43414CA0C26AF42421D6422545C4CF16A2D011B8081C680FBCE8DBC24A0CE
BFEC0E3A52A2EC94D8B74FBB051BBA6202302AC246EECEE5CD530AF0199B1F6A
648C0CEE12C3ED11A0C13385EED4976492EB237F50AE897FFD257B9BEA93D131
08345BE39F5FD859DC20A09A797ACF6E1F171A9B18D09F19516287AA3BBF0D46
EB65C8ABB7DAD7187898858D5C4E0F7E973BEFC0CA174E8A9131EDA990DA63D4
DCAD1600106A99CDE7300339A77A1D15E73B1A5717B652F1F6A0E2896968F224
D1AC1F66E4F7F401C7A525C1C5D7403D26DB908ED85C9AE546B80C01384CAAF2
ACA8B067FAB9A386839ECC80CDBC7973631B2EB34E86B44632BF5E9ED665AAE5
CBC48928DCBC758236E57FC29D7A21680B1FC98A2C590DA0FBF088ABA558162A
F149AE812F7EE2E09D79B6EC55FC6940D4C3BA61E340119783B63F61007191FD
5316CBFD12BDF335B632608DB13641285E3655DDDAD943C54F138DA00C0D956B
C387D816C00E4112E2BA708AA5244542696CB16B0F44262DC881FC491118184F
8D95CF4E71E15988CD37AEA4A118D929F9B66B9DC89867B25FDEFBE4F0AA9FD4
C0E5EB491D7ECFBA491738BF4E94DF2A2089CE016F1712D5DA7492A165FB0A9B
B1FA7B458DCAC25BD5DF0BBD15EE1334F48F101AB2DFCA73A08A52ED288E7BEA
0964FA747B93A8191EBFA0A1EEED2B08B35A6F46B600ECD61D223864F13B96AE
E5B2194C28BE78042E7E8FEEE8EFEEBF39D5C4923C4AAB3AC6F923FD85DC00DB
A80F6F77BD67DEABD13FC74F5139585C42435C04EDA783E0894B1A5312A270A6
A8BAA06601AA0CEEA7D07332CFF0F2D7EE8215556BCE0F2860B09941EF4BA86A
BD54EF90793B1F58778DBD8E0E3D841F4C10CCA378F3A9A700097F6318F2BBDC
A83607A9CB4C7553D8AA181819CBC3043DE1D184907AE0B667940D527073CB67
5CD5A110F95425F34D3A533FAA16E6C87ADF2BD278C0312C85E87C52B0E48A12
72D21E835168AA331AAF9108E62F7438CB22054DA1BEE3196B1817C2F6B4434A
CC5CD1ADE6CF2DDDE25C490A9BA84D9434F8C51A9C1A63F80B42E0F3FCA4B0BD
455FA6DD106FF9B6468471445B0943252D6D4E83D741BC7811D1D36457E57645
D612EE13D973875538F77156737473BDE4B56E05F1E772D317A99CAADBEC128D
EEA1BCE5B27FBA139B8EEC02D9AE0278179AC001A1A741F13D068D439E719E12
7D61BB312D9CE21B910B3B918B85A94D1C8B722D765A4EFAC16241D1AAEAB972
0502B20AB908DED5F3D9C01152822E8FA7A22DC3700323E2D0904D96FCC6B252
0C543B249C2EB9594FBB2FEF4850D371CA9CC82B1117DF07B1E63D89FE179035
9AC640F5A519BA7771BFA626AFC92149D0162ABCA1AE13DE5E209189FC8EB16E
3C9429C795B80C066FE7712CF9E0DCC526E1283EB25295B9546D00375FD7EF89
818B6A94CFD032976EAFCD1682D2237D4BF4F175614AC23744DD7C3E5E2C971C
9459AECEFD370A0B6237CC0D581985B677D2D75DA100083C67DB73BD79DC1F8A
8CA1A02B897872DEEFF5C5C3891778DF2881E6A836AB75D1E2C522C87F1CFAE2
3F7763B716ADD503B6268D3D55FB1C0D8D893C9886752A2D631813A0B358CF8F
356B7DC20C1C50D199A1787EF324E711DEB545D1D891A771B0342D262B22626B
CEA558E237B2B69FDA5550E24AE4D90FB63BA5C1205211B203C8E615D0B4EBE5
BC6BD66E824AD5D0A993A7E792DB289AB897E42463CF2DFA4FE25C128A146A73
164762906092EDB6532AC5535DFA1E4FD741B6DA33BD1243C49EAECBCA940FBF
7275CBDA302741D4125AF701E7DFAC5EACA1F4006308D3AB110B447B30EB350E
764AEF97AE63EDB540D64C8DA04F97F6D59EC0292FEF0B94235407A81470D504
40FA3C7C2FCB231A4F17126BA25E0A6633500E9591CF661E6DCF2E0DA0DAA140
86F36597FF589712A41AE24CC2DDD00F12A3EACB997B69BFE766029C34688596
C67B0176697597F3B954C0BF4348886CFBF1E650F1C9CF025A596A96D9F944C1
A801720489F6C8645C2E58F9DAE1ACE2E8607F2C0E04C7AFF7158E1B7A4D99D7
A29204B763BB13C6EF2BBAA82C12E2B3604B9A0E7B66B4D804AFFB536DFA19E5
BAE18FF82E9B6566D809B3DC240D6144680B2EF0910A62149644FC83E053BFC6
25B1097C99914306507F5898E1C66664D93FA9D1811A4C8D17AEB9C2EF948DA9
237B031D1D8FA2E0200FFF4231E8C41DB60D4E7CCABE958A6D9B295D57C0908F
2906D68DFE47D8A83CE4195EADB1F6AF0C9E064CF7C3F4249B6ADBB9D54AD617
1C642F15CCB32F35651AA9760D015BED08918B9C200C290EC541EEAE32D900A6
B667B232E072D83752E30915B8A7AEEDFCF63A12E6CB9CB8CC317A6F4D2E5184
B267DC7351A8FFF366F315532D14AFF07DEAFF694AA892C559558EAFB12831F2
5CFB1BFD95FA3C35AFC3CAC9DC434C9D5CE76910126573DB797FF9E10A7C6567
DDECAF7F2D54A9200C02612DB5BDADBDF9CF6E67960221790790EC22C414B31A
05E8A32C40E5463CCFAD950B6F47DCD37E8C29F31C937C6260A2C1C7B3AB41E5
0E145CA29B8E4B8727A1D37127AE5E174DC91899275E202C5621030E467B6FFE
94A2935B1F096BF7D31224CC3A253234F041DD92983AD22B1308C9BF27B4CFA9
3E528B0467F45600E72CA07F0D4EF5EB8D4DE5C38CD13D7D9D29278ADE9BF505
2ED55769270B681F070E53C6BAE4866FB4863A70E5B8250C7CE09E8D2667D204
F17A8C2AD44505DAFEC2577E5B1038F5D3C0AF362600B2E593CE3D0FE1AA6943
F41C0D88F490F95D89CB8B7BF44B6DFFC8F1880310615538BF9D290D82C3AE42
FC6232D664A98A13FE8F0E97F89469DFC1DF210C593E12464D83B48E57AF53C0
469F5AFF3143BD8250128D222DCD30E4D30D5930F861C102BE23835CEAFBA3ED
7D7BEE4EAA358E27C2349758264B4DE07A5A4FB5618EA69D1033A139A6939E93
3ED5185928EBE84D56F01B31D012239AFA1B15093AEDA4DA4314EB1AADD46CFF
080D70E182F3B1A7D358F9DA17EB699B7EBD3A433CC0883994DADB23A35204B0
2EA88536319F384E72CDE5DA443BAD3D5E2F4FA700D1788C7EC9633BB5C8587E
1EC2350D11C86A58BE6D68E236AB408959233C68DC3930E09EF0061CD0295210
D44A8AA67C569188E29BCBF475D1C72481EF0906054E827A5068D8BDF1C9A460
89F82D63F3E0A4C52B11484398D7965E0BDEE86FA659691A3D25AFF3FC7F7868
BAA4CA3164B73DFDC9C5CCAB0500299985B60E1F03EF812D0A8ABB2B15F346E7
E836A0CC924EE214C5FAD753DD08FDB630AFAD290B336312700B1DA8E5E5392E
E112267871631691FAF062A469FC9BABA6A96C8FFF3A4C7BB480D04FB4793FB4
29FA0947CA5A7B3E632901AE07E09F8279311B719956F9EDD105815431BA765A
5BCD00791D86A8C5E111794326BC51D998621632EDC64F77B0365D9B63B7A7D9
12D949C72D4D9AFA7B40394B759916E7833C523507A069609DE0C1B92C565E59
3E5139E335DD5D3828489C7E8AD7AAA8693285A9C21A5DE92E2401053A54ADCC
CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 63 /question put
dup 68 /D put
dup 72 /H put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1DC2D80B2772B05DA60F3DC15A815A6BAFEDC399C7956E75
3851CB3588E22936FBFB63A58300298B11C45D82385C083D07AF133BB1BC941A
FDD9F34D5E0B8087EF2A58C54D8AB7580EE3ED58AEB83B72CB9028F472AA0C3D
5C0DD07F3D20112C51366AF49C461175B32F43B33E558E7595CDB39F19A8B2D0
FDA3CC3A8318A933B24E8018569F67C865E244FB22B99E4297887C58064CBF0A
476985495B8E94E473052F20C5E417A6AFF0F6641D0D9ABFDA127D91C1171C43
80644C5EADAA552C1CE3018354C60DC3555C089DFFF324232472AF0E62DBB4A1
6140AC4AE4C633D23C48AF96BD7D463F4771C3AC5609BB25C5A84B409EFD52CA
B7B101F088A386CB77A060B529FF519061D19D1AFE2AC2032643D57608136DC5
426CB2C092C11C590DAD52B9CDB66F42B424CB8BEF19E5064981DB27CEA5FB96
E145B41FB173D203EF92A15AE0E5DFA04195C94D372531629F186F6B9A0CB9FF
52B0979A4FD57E21C8219ACCA6A396307190CC3E2D48853E0363B9C7D4A8EAB5
EF980459DAC9E9925AFA455C16AF74FEB09A9BC8690750FF15843759DDA10D2E
563CAD0CCA9F64574B26B4E5932093B15303576BF47A1FABF412A7AD26546AB9
B54D6FDAF2DCF1F7A3BFEF312C4A08BD54F6F3BA50BC1F1135DEC3BE823FBBC4
D87AD4B32CC61493A9226A26091E8E473E154A982FC3126509E463F722671DB3
C1867436C9CA02298412D0D25C686940D6E0E7EA49AAF85306912E521C5D4AA8
6D3C9FCF7AA5B53CFC25F7F49BC58E176FE6F6BCBF5419E28BD1F5F58061F1AF
A7DE772BCDDC78C166D116808422BE50FC4274F331F164B6EEAEB1FC405A4209
16DB3897355153015B4212F8E651FAE87BFE1154054026E9093E4E6D7AF7254D
F72A4F215A35E8E648B75C60CCB7A8911A930A0DFA6E3EEC0CD5D044DA519E32
24E72A1D4202CEE82EDE28726CF1A3950E53A0B2E0F960069DEE12981012EEF8
6A196363427ABD19734F9655A3A1803CC967DDE021381CF78073427ABAD68A6F
2867EAEFA333119098117B1806380BB69EB9A4C693471E1F5245AACACBD5077F
6AFB6A09475CA10432720DEFD9A0EFB9A4D614E5A32E1E84A8545308E3EA9DB0
7F755C6DCEF6F5E67A017331DD4998A511DDAFDC6DA58C79E3F5EB330A400D35
4DE9084BDF30BF4B68DDE5B61B11B1C8629739AC5B7A8CA1C5372CAC6380FBDD
642E3428E1B32287BE5FEA1130752216FAB2280AE551FFB9D63B2B7D8FC190B4
056B2A4D45FCDE09B29A1123CCE584D0B85ACD702315807FB40664D34EF6C078
361545E398D97C5B4F02B3993D118D5C36D0AE67C9236179F3EE13DA41369BA9
5C43D93D4170BBA66B6040F8043F6A06DB0D9DC9E9E6165396AAC4F881978D85
C97A8B130FD6879AFFE9A563B62B85606B53C9BA08153888E6A08048E9F4550B
4F0A9CBD0A480DAA4DA1F6BED2924EA72D03ACC3186F1B581742515F51A32979
D0AD7A1550DEE5FD25B9AF69A67D0E41DE8DBB8BE8BDF3A390C69A71159C950B
204A3B199F95E42B3F0939292D2E6922C16FFC352B7A18BFF2C062E1F09849F0
6FFED1EBBFC7D5DCB4586C8B9C9ECA4E3FE7BB9DDA4F7960D70DFB25E3AF792F
F79D6D845B2670AEF2BE244E315BED7DBE10AB80169EAFFB6B1C4DF1E5B14BFB
E910DD750EEDD64A360FC01102A00618D78B3D6C1C457DD4822CAE6C1CEFCDD2
46F05AA519507B5284F58E39EFE2B14B561229CEF1422BEE2C32A567F1994507
C671E9ADDDF60E4568B114354F8AD8D38590B7CDFAB9FAC52CA4AA47AFF67BA5
85352DC53793A0FD5BC486E14E595827AE724D90FAA6A444AB099B1E532B47F1
7A49CEF0928283189A1E7DCA3CF15A199089D28AF33E7245A9C2ACF45EDA1535
71B423E47101DA5CA60861EFFC1CEF17F3184095E9E21C54D1A5561EA013B819
0886AA1D19BBCDD10A502E5657ABCBDA6B65AF52D8F3E0543FE2A4CBB5755084
CB92D09F06395ABFF81C74CAC4271967FB6F71AB05C7849F2F15BFCA27BD5B1F
24C4149224D0289B086DE615719F8143F37A45B310E5CE9F27BA1ABCE4ABAA82
D70B7C2FA4662B45D0AF2832B348DC1558BB4BF136CE842737D627D01F02BF2B
F5FC5F10702C244E7853B069A5F8707E84A52EA20D9A40A04F0D668DC8E11F11
B4B0797E4CA47579485C6DF5EA5D4E5DAAD800C13B14594F87970EB0AD94AA08
258FDCFFF8B3BE35F07E8EF1F8C5DE92B8D978667A1C94E8EDE0638C74751BD1
B241322A53A34114E9C2112C2E3873C6AC0CE549E0011FDBBF786CCA119C8D1E
63567BF0920BBE36292AB7B044D7D4AAEB93CCD40F979F09518A034AC7CE6586
4CC5462B43B2F07B36A5605C7779D575A3FE581C775FA0B0D232FF4E20109915
B05BF76762F04836AD98C8559A586C760E06F1ACA923C377B31B0951C437E8F3
61485D646963225A4531076B08E38F712FDB9FDB44B1F416B716AD7A187967BE
AF145CA83CE44BB17E510F1C9C9DD84EF1782112EE00E95326085B3539A53A95
691AB399FB67E588FA8FD6F19238652A349CE5DC3FE1CEBB224E3E67A381E9C0
215DB371C10A86BF9CE5A1234363D83AEC7909386B8E8CD443226750D6611CB4
C5D5A62722BB6723202367753586C6F90401DCCBE65196D05A23668D0E16AC9E
A704FE3D86D2AF889B7BB977CCA18764E53BE2FB4D4544D4F2013374E19AE910
3DF14763CA77873B1346C19B651246BA477EF39AE01AB65E0A42E78F7BD13341
F0EEFA034F2DE77647E2047D425BD43AF24B57D97E0C78B7CF10240AED970498
D91ABE5D7FA548CA7D41AC136725735EE76D713C0A9608B9D99B0781E2B2558C
7DF5A72411F87B01E643C5D481685FB0FF2622638BA7FC5B98D0573CB9CFDEA7
5B5D0BCE1D4266D4E4456D93DE48ED7861F4479D4AF3B9E016AD44FF57B3C64F
EF1710E3E9D0AE7293EB37F2389D6EDEB1A9213FDD82BE0E902CD597BC1BD13D
E1D6C90C4DAFD073EE032A7E084576DA3B9C06125F9EC71AE9D391FC249FA1B1
2478F68F6B2145933B67B18BAC0A32C5BF02D612026DBC06A423C38AA6F6CCD3
5E59E41F07E3B3B0C0C7317D6AD9F46D0F6DC59FC3CFE33BF1A004D8A8B85C41
5DE2F43C953B93D6F0852EDA569A8C891B16777C858209F6E7723DFD4AA4BEF3
A5AA31A464BE6707A35F3D7F960FACC6F4C462D15136923292823C40956D795C
CEB1275B8482C315FEE4F63D6D918382885E5F105ACFA7C80AB834A8934FEB33
D6AD472CA63A781FF21F49D23F620288A6EDC81A7D8D91AD9297B46C683FC3B3
B969A7EE351997940B8560CFC1E30C916317BA493D6A7765A006B30E361F7C2C
D7F46C9A5C0E89EFE7000B6C94EE6A5A909DCB06FD54BB752350735EB4D5CD47
1C2BD856462A065ABCD260202E53FC915BC6905905893BE4FD0015B7C8BD1D91
17D52686D9645A24C2393C36A45D853A73830CE114EA59A83CF62E803A82A8D5
5F85E40903A8445B8BDD9C4F8DF77EC30275BD6A1A42DE782B466832B6515D59
8DCBD47A19F2511550DACF4AB22B86A61B3DE86A2F57FB9CB6A78CAD8AF0CDBF
EB57303222EA2E4F695E63F23FEFAC16A81148FBF3FF10D3E6D680A40FE86DF1
7606B03B413B50C6096CF15B295EBAD545A4B97EF52FAE65BE608F783352D50B
90853189C6057DB4A9AF57C1536190C1E29649D4349FE65D4ECCD940E106F939
D3D0AEF498B48B1086402568B8F34BFA11D11AAD48DA128AF300A1CB9EDB285D
BA5C91E2FD144C1BD1A338BE9F4E7EC45995F36EE2FE44ED6851F15018EE4247
C5CDA0A3093DF26B7B52E1BDB67FD54E68434D5F4B8B03639A985AB375ADDD2A
40185FD1454C5EC73ADE127566B672AB831854537E5411F9245CF40D7CBAC795
9B1234B694DCB5B15AE226D7162517BF69DBDE9C335FA969E9D79BEE664788BD
A3D4EB732BA5F1D0E6F4862E952FA40BB71CA6BF524E4BA2BD40D9CCDC95DD41
E87026177941230A51A4D46A236DAC5AF0A4634EBDEA6A1AA2E2985D1761AF0C
CEAFAC70943D0AB53042541648F7705CB8617408C92410C0FDEAB5415B22473B
3B9A661CC113F37B997A948AC8909BB8DE8551C05B3F2C8D85BF1EF8702FAA09
F2686D3CD36E95DB49E3BD3EF2F00C44A4C036DBF26F4B3F17CB5D5D4EDB96F0
E4982FC03006C79EDE79E766A1F88886BF5408CB3E40C1A6E7922A785B141A74
79F61B1361D6C98B7DE8E5A604CF4473E2A541B62C5E72E7B08B7D1FB90A9DAF
D534D1E2B6B2554D763EC1445C5F0135BDE7E21D7AC4B34D4A298E4A6273DEE1
F25D05E315A1EFA6BC04057617B42A7FBD7D6B110DE96D031CDB675116846DD0
D49886628B22932C032D7C38732C02E7EDB3A738737D12EB8EBA22E66BD0479B
65596568DBE492D1ED8A4A74CE687E12283397C8A0DFB26749A9746A181D0047
6B9D72F90A5E0B7142AE47C5E5769A8DC5AC69E2004432606DDC64DFF08BFDE8
2EFCA5A87D6A9AB51D96DD933AE29C108CCF289F7EF53214AE2B22596D58E11D
73635C57AFDBCA0C261F8854E5C0E8A18727505D7E55A0597E28FCA453E7DD12
85C60A84165A12F0A3BF3E7332B88E7F36A6730571B1C1C13646C5BD85ED78A1
3A64B4CCDA908B41758848C55C8BAF106A9D7702710C8E27FE17E601A66EE9B8
5B2301E54F7EE3B99F37582BCFE5D7E564D8920AAFE812B16FF74E15CF73C73B
36575447B7331BBC708A0A03D66CD44AC8FD99E002BEDA5CE125D065E3D681CE
6169B9CA742533CE4CF92877448D99DDBD445727E5A2583CAC2E55DF8B238BA8
E4B779849333A5EBFBDB049DE0E83982223065C08AF9B58955FD3A1D717B2060
C8CA92F5CA5163A1DAC93E333730B4E04A9D7CD16BE160F577809FB287C48816
42772BB3E783135F3A8FB673463F143EA8781423D5B631ABE4381448891B93CF
96F0141CADD13C6B849FFDF0E5BFEB8F2E855628967B235E0328C12E7BC29C89
0518D5AD32E56C21E73640859E9460BC5C908C8FBEC2E339A8CA49E4F5D5E193
AA5008F1226AA32229A57B8C95119D9C9D2D33F31809EA0D8E9D5E7FFD5C4CB7
BA052A87FDBFC0910FB5D265A188BF6AB94E91380EDE9D2B776D72FFCF93B5F1
6E73D9530E1858D72D75B4F996E3B2AA8002342D0C4338F4883E52FF715D161B
F0406493F8E91A18AF9FF659F83D2816007CA087345BE015A69F3F7A041BC3EC
D1F11D32DECBFF23D88538019BD1B33A67730286AA508914161F200DF0FDAFBF
0FFE1865AFBB5B383EA8374D60461083D20DF09A204F811D080F9589BD2CDEB0
AAFAF29ABD694F61EAE6B9B566D2018675CA175915739D91EDA556C06675DB11
E8544B39CAA72AAA83254DB30C52D515E81FCB0A4545F74D9775844E57CFC864
49FA8C2AB5E5F6A01B6C76693553608FB8B06C6605F06D6AEC3B00D067DDFDBB
9AA5BBA28F4A4329BC423A43A2CFE807E4299640DC3199F2E806FCEDE3119453
0D6CCEE3DADEA5450A93D3FF6B90867630BC73B65D9BE3F7011C58B880D700D0
4E87C5B530ABBF20EFAAFA87ACA4B10EA8C07DF8BA5ADFE142AE1D3F94D0A4F2
8A286015390E01A70981CA1C0C658BBFA24E471EC868D1371CD8D0A54B671597
CE653763CA4574867BEFAB57A141D0D0913DC51D7AA95DF6005F92B35821C68A
0AEF8CA0BB28FE6490A30C326A1F7300D5A2296F9E3D45711DA5C69092F55CBC
FE4741BCDD70E5A6EF36C367C5C557979064D025495FCB032A836876723378C5
5259E7A611E4E2640CDC296EE0E12891696EF01D76AFCD3E410398A34214F6E6
4FA37B445869EF738F752028FB420DFAA1CD59141BCE526F25706A2AF856CD2F
7EE339A7387DA460303D6FA32AB91BE5E9CA129659ABE581E1E991372A6DC641
CCE6F6182A80ACFFA72C75831913D8A180E16873EB85CAD5F7946D2E3805BB2A
C08835772562B36C801CEED230BCAAA22FA112B29BACD2C761484D99267498B8
A3E13D7D02932D9B8C79026E26BC074600F1391CCAD60E391DDD9B900F6B64CC
771490E9A5831CF793642B6F5065398C753532DE43B506188710E7F8A5DA8FD0
7CF468D2C5F63E92B2D66B16D0B7E53FB0DFA846D039BF495BC7926CAC368DF1
7FEE652C4DE8E3A0A5A1C6D4DAE7A36E8B8DAC7D528CC610DE249A7DECAFBA7E
53AF9879973F78E6AAB4B97781276CF5E00D1F2EFB2753ABE419CB05AA0E1D5D
17BB430AE5E6E18E4B1F94191A77C51DCFC495F46A3EACCE5FFA7261F185E8B9
A8D3A39683CE38ED64C36252F3228531446B1446800FDDB71CBCD0DCCDAB0963
0B9B4347456FF62420D145BE35AD46F1F16549A8661A12480530D31F312FAA63
06552333FC3EFB0F036AF5CD8C40C0E5217000D21C2F05F477965B903897A4D3
E042A7206FA332C557E59D5047E3426132CCB5E762B3C19FC5C26830CAAF6D22
C920C6D056DAC929D577016E79AD6B949188E85C2D5B0C54A8B1F31D14A22B51
9467EEAD4F25DBBBE5E5DA88C57142A465C1BADC157CC66C3D0283E70A20C297
6B66A526145EA4D9BD634D75B5354716CDCBF23508954F83523A12E42F0BD0B1
F822D3EB9157E1EE35C1564E937BCADFEA1CBD5E398BB2EA3709AAE059059919
E827CCC9C32B09F6CA43789648CA91CD03E7482A41B3D03E977E7BC06AB0D0ED
6363062E964390DF4BEF8A0AB7658D7B22C56589A3A8CA32B48865380469A7B5
8147B0F9988538B7E04CE0406C68C394D77922433A440739EE3D82030BD2D971
302DCB8795E22352CB923038AAA007DF89519CE3CAD24ACF69A4F0B621B90E92
95E465F279DFF903B16AD84E94ED186050A9371F30F71FA71509468D94A0DDED
6799AFEFB5F642B1D2133773FC82C57FEE76337B928AC47A7026EB8751F6A24C
5EE2324602AF1F299116767A0DC62FC1E18BFC232C83FDDB027198478F25DAA5
5F0A9576776DB599E941EE0AF48CF5084E27D2C2529385B4480D2DDF55779C29
7096C2AEB5F680C7E251BEB3095C5EB0526A022DEFF15559B83F1E6BDD69F703
E452E4B87E44105925FB7B827036DBCD4AC4D00C761CE4DCE7566AAB6FC895B2
47E91142E9F91F4614CB918A01E1E0EA2E44141F6F32590B79BDC8084E1F2255
6DBC48B8D9C6F88E2BA5E9ED3F74F5A9F1104037AD181800301FD2A827E3F75B
7840309290ED341F817D865730C48122F629043F9BC4F957D36001228027D030
A493BCB3A380225E4BF7493B36618494C06ECF7B21B4405428F3742436E44FA2
8C036DEC32C60242DE5809CFD63BAE6021D4482BE568FBFD560544944E10413A
53423BC5E5AC2AB71335726C0712D5BCEBCEEBAE0B978B828C1699826FC8A39F
ACCAB3A896FA48923946C829334A26FE80AE05035EE21E805159DC90118FA9BE
D8BE724EEC0CD742DBC45DFEBF23A8B8E712D9FA3D8BE74A3FE3A319DDD53DEE
4E333A698C53779288DD58F48A354B71E6A4ECD5E261A66B0FB8D42A62E4D1A0
44D784A34BEA94F9048BAB4C03E8D617010CD1C567C8861E10C51211F1536A74
426F75C14344FC3321ABCB392DAB41F685AFE79F5CE5649BD7C72FECF8BECB23
695B7610BB5D4F3F1E8B057B2D35339AA92C1C7AF25D1E43113EA2B9E2586EFC
F887342A38150422A9CE2A99711AD826DFB09E9CF025A84C9E812167A90375F4
B2EFCA3D4DDCA56610A0B4A993CD101204D3E347BFD5BD4D68E900CA1F1A14D2
22F5831BFC676506E44BF37D2B02A19C0C02638679EDA083C21C679B10CD0B84
2B611A566F38D07724AC212FE3FED4E98F00718B5D8A17068955AE18C36B6BA4
4B8AC91A00EE3E2095036AFD13A0F36BF79A49B4E0DD60B831DE50F388064205
3CBF92E22141BF49E85ABFE8FB29004F45AA1F337C265455E3EF3E0854D6C477
69CC683781738121B3487506E0236A2798827605D63338B019687242DF3190F4
78B0ED2B46BAF75A54E0DD29E5F4CF35D1846CF3E94A1ADD3C9A5F06C71206B4
8D49A73F01ECC791218F7EC31689C17A50093AF2E33754DC15B57749AD2D8D5B
CE79846C6E91C308803B962083082DAB6289B1976DB9A56F43789E3B6FA3A1BC
C8BAD6D50CE51571DA2FE6B99D7357972C7FA582841BB9BA8157C4E924A8989D
14A6F37B15244D98D9C5C1B69F6A3C86DB95D2C7AF4649812BC9A98A21676FC4
B8D38B5BE8F3C0E0A2804668BD69BA502DA3EAE142E7AD71B0AA0A98B8161987
76C7D1946B00B5E3E1BFBD8C43027E4227A75F2BD42D0300564A2D4CFAE198A6
6E3657CA5555124F904EE31EA42FB9E0E2F9242BB9AE115384AA48EC5556E1C3
9137F8E9F732F22CE187CA71A16312EC03B8E6B152702F7E3B433440159B5FA8
7220FD7E1F23E7DE68BAB0959BCD5AFB9E5531FE0502A850837F466504C2723A
5C88C34FAF41931EF7A8356B61D537823D2C92F8CE1EF65C0E3E8E62D2EA22A2
B37179DE1EF52BE38690037248791EF268B17E00420CDFF5388053F14178FA75
D5550EE3D45A75139B5C609430
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /two put
dup 73 /I put
dup 80 /P put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 117 /u put
dup 118 /v put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B7A887B6794E
6C09C4B9C00804F4A8EF339D38C9217321D25E44A201EED8C664945B799EDA39
958B533F931779B66DEC24E817A55DD81BABFDE0DC2479CBDB727F4517486D79
F3E89FC16C5E1FF0E7115795C9474981D53F481D9C8C7EEE3BE80AA0D8CFACD1
B47D2E9440E5B50136D2CD1E6E136FC047420D62B233BF0D9BAF5114B5F46B35
A75B02BCF76D0C75CF60EA073CBD4A942438391498D1724254F29C559B621D4E
AF23C843122DBDD0E05B7DA8E4B3475F73152A83FCDA53C54935EC45A288954A
C75743BE19B38E9C1EE63F07BCFC01337135CF7074639B9E89399092895384BB
1B1A0E73EA344DA3271A3CAB7D40D3B2132BCD2125251F0D3CC350351C1DD748
DFE68AD22EE56235B7D00DE456DE29DB00FFC27F4CD0421AA22CD463C8EFA6E9
04DC97F7E02ACBE608D04B7842372E7773A2357D473F97D91942E6C9C3FE1473
C33D1A29FC79E8128AB62844EB344230D1FAE3C6BD3A1ACC6FDDE9B3CB4C9F09
190EAA38208A77B7C03163B37AE48742AC047D3D9B85B9F12F8DD2A238BBB0BA
D76EF2F98E6CE748201894DD3B92CF68E62A5FB428B2FD31BABFACACAACFC319
EE82A8C9BCC6729CBB91A4E0EC60996288B79D2A17879426052D45794521A0E8
65F3A5295E3C5ED9B66B431212260A30BCA7D704634BB55011789ACFE4AC3D7D
54A5478D690CDFBE4BC34CDCC0A985DCF860CB2E1D26544781E309E40AF6C756
C70BBCD03BD21276E49F4B0559A598E70E1AFD03649CED4A76D95B4DC90413C7
7EC8489D0167BCC22D25276B94F8538D07CED61688832DA82D5F0F48CB4B632B
6BC381EB3B1F6DA3E6CCEFD6A71720F9D61873DA054A177C98554554EC62F45E
8634986B103A021DA9291263FD77ED2F287304EA5FEE7E276F37CBE28C49E2FA
3556CAB2C25DE35B0B9670B6BE7398997C13C5D6C25F5257B1A4E9E008D319A4
B231AE4CEE31B73BC4188AD781F032E88AB002DF58B735B44ADCB4388CF3218C
4CE0B4CEBB4E05809689B067BC6DF3E39E426A1181A4B887229D399C34336C55
8075B2E2F33AD3B67A3455E6F36434A0AF0CCDB8CDA14C6F4D608D4552F0CE10
84702B29853BDC006724E98844935710C7C07A7E879A2D122A681F453F5FF30A
781575508256C017C36A10EBB342F4D81695C74F560B166F7ADEE83547A3750A
285766EC6107E70D335C844D4988851EC46976DAB53961A3C6BBBCFB0FE6C39E
3D6184480C31E21009E82B159AE64DABDC3F7B1412E9430AC8A81D8BAC52F159
4614E63B0E10E12BE6DBF3EBE3455E8290901193DCE7DE6D5A6C09E50A694CEB
CE87874214CAAA9E76CC20A426C322101D1EF915C52C29DA59134C21750ACF66
EC039215A4E8084DF11FF719B0F246FCB3BB45BC89F016663366D248564D19A6
8412437BC050267CBDFC365DDB62C1C77997B7011F669A187AAF3C3FB77F2217
922B4AB1646700FA1E2F610C1C797506E12CE41FA1376A51BF5453DFD5917271
5CA4ABC35BF45AA22FCED4CAC3D59E1C01F2D908FB90CBE34EA1DB9A6FD95C58
2207D673A0F765060EE99803F423F39F158AA2976FDDC2E25E78FEEF32B35B3F
C3F53A6BF5FF5A963A7787A22B3C2759D62C1B0B0ACE4A9D0E1F48684AB35310
605387F99C2E2E1DC0E813686C9E26C9A526226F00BE4C77CED3658AB290CAD9
3AE3FE9737D31CFC2AD1DC25BE0552ADAF9BD1BC666361E3CFED116A6656C2DE
7EF7B6199D76482AE277574F3A140669EB1D6E56A4E34F3D9CC26524B687AA4D
38EA61402CB8538960E4B8B153DEDB0B9B2AC8CA5F05ADFBED1FC46E3D424E6D
7B7E03A8128B71C4973EC846FB7D738ED3FCEC9AA9EB7DD487F51625145DC304
C73DD26D922E8BF7756E476D2FE16C495001D2948B1C53A1D5C6EDB8E9FC3CD2
E9B8FA15E54BEBD0B66559118302EEBC6B817D311DF54A38AA9F83F7A0FEF484
E879F2E0D40993C33AE52B4FD7F0542EDB05C98D949FA45685C4E52F74E5D0DF
A7644C94F73EAE9DF02E3D48B807F6FA49C95368D4FD7D21B186DC5CC67F25B4
645804CDBB2E4454D9C9C5C91E359C511869FFDD20613F1C2B35A86F48A5312F
B9421DE3EF64B95AFAE932CFBAFE0666C00ED1AC089DDBBE1F00F44E7C6ECEB6
0312E015367DBE179166751FF446683964D6854398BAF6CFB22A60B6D9D69B03
7915C13F0BF52CD609BB3A4D0E3D7BC8F3B3E28A3A5F7E9E204967D45EBEF3F2
D9E7DD1A2D2FB990DB1571CBD1E0FA97E8D7CCC5EC66D1A6259E4A0C5FE1A03F
812F25A4C2F93E0FEB0A7C16025719A9B4BF3E453BFAB1654E090D6285F6A4ED
66FAFE89E504D13634825A41DC42F0C618ADDA05CC1598EF601E7093A2DBA479
642C53CEE0C7CEF52F2F776F7997CF7BB8A72170251CE2FBD0007D995DDCF81D
F01340B7AD21178B1629A8BD13316EA29150AAE51C93D51FCEF6EA43B246B11E
AA6A64658EE4462E8E8928368663284246F6347C54FF3864B909952F2B609ECA
C3D7523B64051465E9D5FE5E6AAC228B30EA84100E1F69352FC7D6002A4B3FD9
4E2F9C3E2FBA475D5048B9970BF934CEA0BFBC3456757136B7B7E8A5697A8923
DA3C437067871FF68EEB8919A0DE8A25930B46CAA8BD6B2AE8DB5ACDEF3F7E7E
F4D6325CC2941FB0A40EECDDBFB515536333F04E64A0D2452FDE53811894A2F0
3A0DFA42E222CA4861AAC822F7B07232AC938E66CB36ABFD7D5F2121D63BF6F4
8E07B62ACF0A99E1A64E39837E41E96F46508561E1B9C520D4FA0E6F34B535CC
43A7B110BC72921ABFD68E0F2A0D55500669E2A44C66B060A70F9F18CEE94335
B2B7A8E40F8C591E9DE15ABCEE58AC11C1359767B76A8CEDBAFD955FE692235F
0705D21A85ED3013B9123C3D263A48F0854805404071F8E34C2BBE5C9DBB8275
7AB46D1F761CA1265E6FFA7C32ABD160335CF179B2F4C2D0CF834A8216D2D1F1
1FA923B6DA7CC60F4196FD047C1BE38F24B84F008DC19A0FBF719B9EDF68F8DA
C43A51398E839683B49604E50E92E3185E0929CE319934D042F58898CD63DF11
A37BE86E110AC6432209F4F18DA4278211A8CFE11CD7DD48E762709AEF96DBA9
4B5CD3412504A2DC1129714C47C5615C75012492693C706D78EE0EB2C736A474
8A27211BBB278B17D09B19528852A9FE18C925CC4644C857E579A4E115A28A91
9654E73A76B6C551E6FFDE629C41A480BA65AE2AD070C966BC5CF75DEC446332
15BD7FC7E75A14A37DBCC6F38D8E5ACA7C030A84D8DB30EB84055A2018BF11B7
486427E25F926BA57B31ADEE29DC8813919D876050A447180505728DA895719B
C63DA2512BC2B3462616FF7C3A5C665B627531515E5AE5DDCBE5184AE1F1A975
4961544D887498077ED5FFFC0F4E838D35AB2D12916C173C1E7BE1E1609DC0D6
25EDD3198C68346495EA3B8A171B6842A54C6EC010F56AD9564F1D48F0520311
630B9B434740677C838AC7A4CFE36FB4B83DB2990BA37E92BE47C652EE758D91
D540B389E46C9B3E602F8B69A8C4D6EC229B9C1058EB3A5B3ABBDBF175C90D72
952264D786DFFEF67976D28E3F14AA8DE00DA6FF4CB0D200C4ED592B749A6BC1
C2F5ECA04A218FD20F53357BD2BAD4EFF7B5AE2CD078B9A583588B06C0A76531
FBB087B2F7D1D4A5F3E45ECDB70B7BE511EBC404A954987FC9794AB36783CEF8
444D427D1E8AE715FF88F1B8CAA6B91B032268FDFF9B4F661192C2807E1BB0C7
173BEC9EFA9F2BED5337BD48C4DCD40F45074D1C8F2376339630B714295B0E0E
82FBF527364557EA94BD345FF03361BA9AA30E8EC0BA058BEF7C965D1AB8BF04
57AE0E39A550712B0CB43F675ED5D4D34120EFA1AB2FAADA6136ACC10DB084C2
E86A5683295BB7FEED8CDA94E1FE582BE65CCAA1A0862E42687AFFF5AEC69FEE
89464552DAFA500F834953B2BC142CCFF7A3DD45708401A170458A4BDEB04E19
EBF5C4B5B19ECECD640A22A2EA3C41CC282E12EC7A08B0946E9043419A8F35A8
C0492C374D675125C7709F9B4188DE22867A7B75CDFCADCF7F83C015397D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 34 /quotedblright put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 55 /seven put
dup 58 /colon put
dup 59 /semicolon put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 92 /quotedblleft put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E5DF0434D2C607FC82C9EBD4D8902EE4
0A7617C3AEACCB7CCE00319D0677AA6DB7E0250B51908F90A32C4175B6BFB279
024EAE1B04D721A6C54FD62484F8949B2CE9B87D9CEE04DFF82BF14931B3CA03
AA5F701B6F80BBCDF2C427C40A51597F0B1BFA25EDD7CE0EAF2EC676BF0059B7
15DD5462BA30DE78A08DD533DC0E8D85F9DAFC5FD842F417265427E0F1B71834
D2BF6EFAC3CCC40D3EF3B2E2080F148441BA45E5D0C0F7D8416730AF4BE4FC93
1E965594E0364F0D4F1EC48004CEBDDAFB1F0EE0A8222358EAC0F62E6BFA3C9F
46875EB4C999219B91E6147A49A668505667030CDF3495682B79C0F614AAEE68
D976EFCDCB04127C0D7325A2211E49CD316935A0B472D1F9FFC68F7FBEBC7269
79DE858914A95826CB2A8F0F17773C8DCBF6481A19CA03EBE2F1EEE59A3D6E3F
C23B65AED2429ACE7D1CA1F45B06D9C952F6E026953949028A6B7A4138666C7B
0A7B10F10DA7017B72F57DC4971A485ECAA7CBB1F832A94E176F8B529878D4C5
E8A0F09E2150921FAB9ED7F964ED314D50CDC06341481153D90B725237D52AE7
61D2EBE1546467B248123CD33395B8DB094FCFA271AA654A59441E83CD759798
E036A0ABDDCD1A2C502230FCD91FF58247EEC1668C8E7C29D5B440190F11C953
C3C8FCFCDF5C20A99F85CF18973DBF4E44095927AA3A4DA1BD39F559705AFCA2
43B0BC3928F8A3C85EEFEC49D94E6CE3AEB574DA6D213E8BCCE18F5126A19CF4
FFE0DA9433571B4139DD989061EF2A76128BD1096A6E73B872311C783A8F2BEB
94A4D54C1FF27FCF33FC0BF921688FADE5478991CDEB40E67763271713F570DD
26D1356B116DF44250FC80FC65A75E275A9443DF90D1478293D0A58EED5723F6
7EE6990BF9D5C47DF1CA63B9333E6FFEB5243369BA324DECC217CC4C163ED3DC
D4A26343F24459A3261AE74FFF5FB90C14B7071D72BD2D398BE3C3E706BDAC81
6D36EA6EADA1510DD1B2440B4EDA0F13EBDEBACEFBE4FFCEA8E753C2DEA7E42B
DED7977A6E54A6826EB44DF6651E4C95E3C345FC440B25477180DBDF916F0F35
D026E4C591E77A8626A29B22DE37305236517FF9347274595371C4601974B662
BB00F3E506B8B7AE6E5786978ED7FF4A5199B53D465DEF10A7424D970E9CAF8F
4776858EB78710402234A654252FE66634D7D316F01DB50192644565F637D962
EC7582CB9C3B94A8BFECA96AD822BF2F2A0D9233F51A7F22ABB177C6607F0148
A5ABD9A8DBC9B65406094875AFF6DE58BED3F7A298B86A2D61B2E54359C13BE7
BF9AD7FC50473C9080663BB7D7D11FFEB8C11DBE1E219A8895C4477774F4719C
4F268D8EAF8342C67D21461EED632C8CF1E0C94AD46C1981217AAE92BE94F10B
92A7D57E28727FDC9875C222FBF9C92F297FCE0A24DFAB25402A092B38CC9003
39D0AA4FA7E2115D392B29CBF63E84B670E93A2443C80AF6CB5D64887380C9FE
907BD3BAED817D271E426EDD19FBB77AD9E574DCD45E7A2120165645CD3723D5
EFDE5652877CFDAC9C7C7735FC6D82829EFA01509B185016D639B06DBFC88E0B
0D6819D317FCBD1B1557BAEC6CFF80BF3080098F94F5ABF371F351CCD5BA1107
21CF8C44AD677B0EDD49C33B807AB3344FC84FAFBD9634FDE1E74B384D22FDF6
B886BD5FF25A37FE21C49C2504591DEC54AD458B60DF47E1626EED53E19622E4
8F2DD0F4EFDBF6F1D04CB3B6EA8EC2DD33F9EE4E4F0064FE8250C3E8B508BCFC
2EB2B078F6BFF7407C3FE6066CD9E88D961CE921CE50152595AE3F9B07C77A2E
03435D63745C3FE6464DAD02CC222778F26D3650FB46F055BF3725F45CC78A2F
6CF21B1042D32789858FD37BF71132F6F0FA715D1B028BEE546DA5C46CFF483E
70219066A152F044F85D255EEC5599EA73677557A6A14728DA87BE5404B57996
F86056E7760C7CC62EC797C8C667B597D1BCC96DC16488602D80CE1CE9E0B48A
7A21D4DCBCB3E35F29B8E9C3F0FCB6B052BEC77F3C35B6E097A052AC984260E3
EB01B8B74E7D99EB935980C286FFB4C3355A7574281E064C77C90F4590FDE953
B8CDACEBEA1BBBCA871B74158AAE05D2619A33AB9CC4BDA0897FC758E1BC6BD5
C8A7BD67CE4A3CF3D96C1EC5DE4CEF1190F56920EE3C74C35C222E5B2F700A3D
758E84A91B0BB9634A3E13095B31A76ADDFC74EB3EE13D91A4796D471E5D3F82
6FD06F91DA326A010C42C2385A4976AD381B94E3BEF34AC1F292758DEC4F0CB4
385434D6D6D9ABAE6819F3A238A27FDC0CEBB00D4D689EE2424A16098FE6FEBB
E465C49C395A111924F9AC38A76055B06CE023D90898006758DCB878C09E0D9D
944A73A40BB63FCEA0D3E19A57B76A0136689843952BEB02B8DB0237EA5CEFDF
623FFCCA862D647752C0D1F7466F55F8BA1754CE7C1E5BD14D10FD1F437BFB49
811A269E2813CB2981580C07A235D6D922AA4CF81C534973993B28CE6784AA33
52E3F2BB7CD775D556D41962CE5602E4DBAB847D7D6BE047FFF52BC6A3CBB2AE
99DB673DED7385FE5D311A5C3620C3F8541CA4E68C6C0524E42DAA3848B71E1F
5F4721F852264E8B08790D010D88BD9FA3ABBCBC40143CE57B6670542BD130BF
CFF8E6892A99B44EA4AE302A71038B654FCDB50E9B02B5842AD699FCC1FC3B25
E8AB3EEF3210546434C6579D72414B2BC8E3FEE77AF5E84921267A6E39CBB872
FF65A4B850160183C5BA57AFA510EC295B17CA58BF0EFA3B0704D7DCB4238C64
B2129E5513CB15BB0B55CBD75EB7F34EE1F2C60B1E586C7E9BDDFD7AD01D3D05
AC50965F9DB6BDBB1A1069CE20E89C4338CCC3C1FF5F0DC129197088DB7ECC13
A607D70BB08A9AD179CFF72D92FB2FF825A195DE4E6863166BBCCF53D83DFB8D
EA072FD69BD1F539EDD903EFB77C849DF80950B029EC0D93E3CA34A0150E8119
0157B8416BEC99EE5AC33C3E3300CF4F5400C3BEFA9EB710D2F861B5CB13C7BC
797468894ED133F7D91342AFDD2BA08A31356137826500B755CEE77FF2C924CE
A38FFF898C0952636C3B7F38DB71B836DB61DF8077345BD38F3DC1745A46292A
3A61611EE910AE0C124B86793C3D40449190F8329076FB4186142E0B640E093D
7893CF8F313AC92ADCC6F5AEDEA6E61D0B37239B71404EEEF561277EB2766B22
E0673196793DF707DD2DDB321EE883A68C96E2568BD86447C96F52678F4E448B
60D0C52854C221849343B976D141F84B0C31CEE0F1D2EF43F1CC29C62781BBE3
CEC1013130076D7A981B0BEED162B4E514DA1AD8EFBF688E6A6BBB79AD715248
2740B84DFD771908895F51D72CF726F0072F1E6A890EC223BE1AAD67366213D1
C8BEEC29B470C3D1ED60779A20C19E87A5C009C909C0DDC4F3D6F01C6971678E
CC374FAC79E2B164E85318947E257D5782C594CE8100B6CBCA0881D2FA6973BA
56E0498962ABA0662498E22A688AD2A40004E7A9EA1579A2E80B46E2A4BB818D
1E28F26F49C7098BB15EE5B46E18A7BBF19BF271A0549C5D5603DB2D5F019E4A
88FF9823F5756E5CB35AEC343722A6031E4E0DED9EB3900A6B8FBA4908160BE5
D15B5AB7E6C512D81473C90937D9D86AC4A080195442043BA848FC0CCDA7AE76
38E6BD41056A83CA11404036065C1E71180906C1D4F159605FD9C0931C78C39A
3FE9F1D8BF0F0F1E78CBDC8AB8BF9BBB9106C3E5B08D622929F9F9B6C18C505B
CBC1F6829DE211B52E6F96D6A29110E1F582CA6A32B86625F88E373F74C404E8
CEC7B03547C77ADF79E17133D160BF5F45925A31ABEB8A6042BF18C00ECD055E
4DEC1806B95C2E43BB0AD8A2D1FA25EB5C56CF140440273E30D40F0AC267B7AB
A19E1AB79E01E11EB68498AB18269882880DA970CD632D58933F9B74C1A849E3
19281178992333C9C040B12CDF75EF7475396B9F6E32CC7495D215CB91393586
428F6C5C32C7E59397DA3EC52C11B7A7964064E341A86EE343EB5F15FA28F486
FAB1514145A6D8A0421F6C1A10411FB988BB549BEC72CC39891097784D617E2E
24019BB39CF3A488515D2F1832623409DBB3927E7816180EE182AD1B13E4C691
5311BED2E0377DE4893ACD0613E11445E266E6760A9A7F50935A155F373D8161
0F5147B2E3C61B386CFD240584E1AD2E7F244727618ABFE85569FDE6DE3836D4
5278C4FDC017A0A525C7620301F532A273A504B1A359A9CF1AAF0594E01AA97C
9DD598C15F63D4B602E430DC45C28FAA6EB88E9748A63A6EFAD8FFC032D52C7B
44D7FCB2C3798DA5868C165F209648EAC086BEC9A92129433262099F065BD488
EF7D47BEB2CDD7A000416B6A013FA98483242B8055BB08B640E07ED87EED7590
8AA9917453CF0E996B5CD1DBF818361EC47FBA5759CF6CF0EA6794DCE385F7BA
2948DA4F91F0733F45EC316B9EFA714F4FCA1FF31FB111D63FB6C2EDAC1CA84D
8831A5D88000903EF6DD55844E13B8FC7F319B8DA0EE06B0392CED78C6B8C749
E12C5EFCB7BB6C92A4DC6218471F6C243809B49AEA87D2BD0A3A6B669B7C532E
4FB8085C0ECE0CD882C2B65F18641C2CE5BCDB879B83F74470CA3AC5009D4282
0B44EE3AFAC5AAB347807C0795759218CE6C0111D6F2F3A701C78C40466FBA33
5614A9D00C31AB98A02F3A29C2916B65A75387FFBF063E9DD35C4003753FA764
3C11C7846A261F2B80E78E96CFB7D6E9F3478FF2B205DE6402E94C72F9D473C0
863C85B58A357DDA2BB9A0CE42AEF6788FD4AD3BB50D343525D9D3200770319E
9D2C2128950B653008D73839CA69C8BBF1CC4FF1B2FAE351E0EEAA6E5FDEF2D0
8CFECD5F2B936F84B55726F62AC18A5C2DD601C1FEDE111BF693DE4B3D7C79BC
F5CC931504BEEBF8D85A19D8B3E14BEF2EE5BB569F338DC15F486FF8D1825AAA
066A4E8F051603E7150E76FBCC000EB810D45B3476C808C3F20F3284C2E283A1
343FE6043ECF36434DA8B20376F64A2CC7290090356676F65BD5AA60CA8BA011
755C17942D571FEA387C68CB4427DFA21F4E0C663AEFC3722602941AC3D53390
7A912158ECAED10BE11C2A75FD30E71152B7FB3048EDA3401169FF240C714119
6DB8576A5A94A5C295ACBD6516004D64611B4846A8D6B9F6B6B49E7DE9776059
D80437F18F648D7C0F7944C12C02CF24B5C45F080A1E7533735C8BC82C6554BB
D6FE9F4AF53DE4A481F5B65DF02048CF3EE1FD88D92EB2DE7417722774839745
F25A67E113E4D43E7BC1D9828ABDB8E9AF1BB43DEB83F32B6441B0C321F3C975
55E8946781C40C0D6BB618119481BC94795732AB53F488533BABCEAF52BA8A6C
A6516B3D2F45B568908711780F86EF8C28BB5C0237A72CC7EA1E87F80919D5DA
61756F33EC9DC9CFD234A1FE4E905D76FA739ACEF64D974D2BC85B9D46B23B99
3269829BC46234A8DDEB1FCEB6179A36DB0ED1880AA306E9125EC5DF36DE7079
489FC087A0A34ACC79053EDDB711D0DBDD6B6C47602F6BFB5AA6360F0C28A551
626FEEAA24FDBFBAE81680176A3B29417B196541143994F871656C8F80A97250
7BF38FE488CEC1DDC01B5E8CE60342231151CC9D2C8DEE1662B1EC66CDB49E61
36C2C962F2F46D5D24E1294D5E0205F545F5D59414DBD720E6EA9A437E8BB05C
8B85DABBA6E19D4C4B5EAB19D60F388F3E154ED963F286FC02564078388B823B
5C6BF26EBBD4AE6F6E3B9C9F881B9EC3589F79515DE9C0AFDF6E04792450C9C3
3A2E9526A3D8E6D4367EA2880BCFF99FFE4DFB3A4E17DF82FE768D2B91211E8A
7346564F24E50C7918B9EAA018D6F088749BE43733146EADF61AFB9972D569E4
B22AA2B0DDD702AEFD10C7E491EF7C7CBCBE81D8B0B4E668931245D0A47AC6AC
22A7DADF4192A91D91B2FA69BBC9EA6772B7667FA77CEF27E9E998407046B8CF
3A50E2B1B9C62D0440E33AAE83E9A48A30E40F049B0EA1237B9886F54C90DBFE
2BF342F87C10E3BB27587B5D119E46F0581116617B4B877656326F03A768D15C
BD5B2D1CF77693CBC7E77496438044BFD0DA1A9D6D7C5838F3D70CF1F32B3E7A
C6E3E2817E35A686204C412BA9D86F309B5A0357285B3885858157C39BD26568
F955E379F6330CD24DD830345E640B0CDE30EE1BFC841305A8F76591671DF815
57F604AFD247856B29F4D191945F5B60F359D7882B5B9022E0E9DCEEF8C21ECD
096FC6FEEEE1E832897E016537DBE2A71919096F512ED2D1FB9A229D3834E15A
5B8ED73DB3182949808FEA6AD37E7570D10A4A5CBFCEC5570688FBC0FBC0D04B
B1B54ED2000F10A1FCA3C8F6999CCDF6FF254B225A5D221A0CB0A4CE467C586E
E56DE6AAE5163ADD8C266466B5B2F5A60D873D4EE5C172556AD6B024754005BD
AEDE801B2E6F1E7358C4D46B39AB2289CC83D3AF2702B5013B6E1F1D81FEDD99
A90AEC65868F3308FDD9301266ADEC8AA286132A16C93FA16FB1BF215DE0C9AA
0B6EF66BDFEC3094357CD748141C58C40A0A34A8322D6D195883BDE9D88EA8BF
CF67BD7402F0ADA0D442819C55F2ACF888876B4678EC13CCC1D208E991C38BBB
450916E54836BBF6A8D910EE8AF795AB2DCA68BAFB191F127C30EE9B8C63380F
90D269723A4FF09C81082F1F72637A1363DB5EC0485A073EA0E857A7EE4C4E29
3A490F3A4627BA921A104ADF22DED7CDEF3DD657E68959766D7004C5100D8223
2D397A3D24A7CE38627ED787CD68E4A79142ABBE5E891036F7B08B35A1D6CA52
8BD8389B35E8CBCCB5AE08277241978ECA5EB031C0DF50DB558B2E6B28C4B1D6
EF00FEF66677A7294144FA0D73DDE6EF74371E2D5C00CCE249B237CE27BB2277
6F6F98F29C8541635964BD22CC4122D5919146D7DB46BDC77F273B3C0B420505
01DE63A6B8EA1F23387ECC442AA75E3305D058DBD693635CB2FF24D70BFEA4B2
16558830C2E26B58B47184DD37F0D9D974EEA318BE40D4ACA5DB74ED9C49F39B
DA46342123D8DD177D9B0F394C970ED4522CB67F22BF4E622257126F03466D5F
3CB3267AAF3F2D9102243D3377AC0E9DDCAEC3B55AF41BF05C186F146D4E8675
95DFCACCF7A0A614F697D7E247530A2233EAA76A26EBB381ABDDDE6D0DE6DEC6
D087350A52A670DAFC5606C43FD95896DDE9DE741B77AB036D7799F3E5E64745
97C5DCB4FB4E77512876F8314A01F32E3245E345BD1A050480E065E9DBBF7C8F
C0051F00DD17409E00F434D1C2ABAB088DB0232F42299C147587A05AF135D0D6
C969C2DEA0E18A18D31A539AB62A18644A57DDA757F7426E9613B2B8AB0130FC
E994EA5CCFB051800CB720BC40A9F171EDC15F36B57AA49A17A6DCF43FEC3EA6
D6770192E20FBB82B9C858E378CAF6696D8870D10C7CC567B9CD7F27A18B6077
78C970A990A1B89BD96729BADF9FFE5509B52D32987DD3058A67CE4332DA55E0
9B450094E1F4FB73613166E9A751F151FDAFEB92DEC8434FBCBCC183D492021B
F3AF3AB4D02B850E326431E64A84B8FF5E4A3CB1C3A2980A74EC45578FFCF495
615DC6A3499D787297F8985B06838C65FEC436AEBC4041A98E0F6186C8BE17F3
7008F09B53AE2D3E9A87B331F5E0D93C951ED6DF1769C519CB0F2B71D5D66DD1
13AC262CD666FDA4450F0E5ECC9753F845E1046F19900AA0EED95CFEA40BD198
D1A3E7FE5CE3A8D462B4E41C43850A0AA5979C886578932883FDEB7A8AE4B2BA
A80A23DBEC81AAE2D89890EA0CA93CA1AD485792A8F269E3A56A7B28B9E4205B
E05D7850CA7498C30E8E4132E2BF7F8C100D11E9AB20FBE4916C8654688D119C
07AA18E7274646A48738F574940602417FD33AB719AF420DC07CDB27268A510E
46D92D45001B5D04A178CB4276D511CFD510C3F4E373C39FC4B5E871FA2FA6B7
DBDD2043DAC7CCD0AFA2A08B6841AFF34F51C227D676C3971D0A518F3FCF2824
2BADDD83226C2F0113FF61541D3B8396F542B5E84CEE5D3B155F44EC5F91A093
6B2A7117755F0EBD202E988D0701A31603CE83B9B02EFA5B17ACC8E31FD87699
FE32CF4476172FC594041A8ACE9B6CDEBE6A1F6DD855EC54EA2B0A8B7C48DED8
FFB13016B72007BE29C0C97F3151583D4EEF40C1E019F29A91E278C45E08FAE5
94AB73E1A8B5DDF5971BAE3ADB409482AE84B0786E772C609887AF92491347EF
5DF8AA020140C8767B72B2EFA30A33C7D0D07A8BE34A8B508C1313C2EE78D4DD
C8580D421C4CFB73E06CB0D1E02F430FBFEF02D9A3738DACB19206C5540B119C
4D498F6711A050723464FFECC3141FC015C93BBFF81077CFCB3DE5BAC31BB966
93E4DF9048D9C7272A4B269019900D73FBBF941210A624A2B98BFC62ED8396B4
B7E2B619F5229B34D05D5B672DB516560C840A4FC94CC89D96C28D82AA11378E
300A9A38F958E69C6724AC353DA9253C781DD25DEE18246549263032479F7740
F87418E2A465008E1B88DB345F4BCC0B10E7235234C1E826B0A90E0078262E5D
C77BC60F0C02A6200BE7B440D24827CDD1AF6659B24B20039B22E6D6022807DB
5C391975A5D8D78D983A7E2BB98BCA29FC70259192FF08E22CA08D6AEB735F1A
31065D466A1FE6694D12649988AB8F770D7489D5EF3C87F39F2BA6184634EACE
6F1DD0D12F120E11B2658D6B622CE3A668F87F2CD98A80BF088C7FEC7EEB325A
90E84F2FEB1AD1BEE0F6ADE8794842D84286EAB998919430BDAB4AE3C41D99A5
D37336A90FEF75A3913D14DC7CC18132FF48759BD7A700376B7B8C3115AFB19D
DA3EFBB8FD7C12C9D9B266C6EBBD431DB63BFE7835DD95A3B151807AE57C8547
A868A9FABD317D342AE1C87BC0F82B72C10D77DD67C4239A3CD89F578BE3B92E
475C2353AA4C1587D83630B2921282838E741752FE485BF794FC66D8037B8E01
7930D789F74598E826CFC8A0355DC8E61351203B63B67FE4D773AE5CCFCC4E7C
F288792B78E597134EB12D47DF390016452437C99E2A12B2FF8C3ED5F0C1A018
2706B07FBB6AC2E2588DDF5E2F869E907341872312FD4704CE65A5E830402B1A
01E23171EF8D31D8FB9178B59EF208D6A7160CF6F663F58F7AD346BC33A827C0
448A21179DF8EAD9BEE7A910AED1E85900EE15D4054042DEEEDF623371CF1E88
BC3F4F00F0C290228125B9362AA5993A9BBA32E0A66D0598084641C78AFB7892
F65ED945754E180E335F07820A9587B69CAD71D60421B6E29B5F1E1DBE489FEC
32CF7C7261F8E24AB97D07C7F3DDFB82BC36A525C02E7A2CF1467EB20D5C8508
5E17C2630B523C204835E3E4E1CAED701093C1636B75F8169F64EEBFB2832DC0
0C61FEA15EFAC08A78A3A5B9B1D45EF9C8D4EE6A8AEA22FE8E1E062E84B4B4D4
2CA7CDA68FDBB0DD470A842E393AF05887FD712315F453D82B31AA6FF10B45F0
8E5CF8528913F9E4D100995A9F72E5318DD654E89D02193470BADAD81519F058
332811D79687FA27499FF6950DFA2D5E62BDA8ADC1664234501221B4D70EACD9
F39D7D500E6A44CE3A8B5DCD5489722CAAEF0A47829AD0F2C4B8DEDE62841670
07C49E661651CA93AFD6C4A7390B38B18F972C0A939D6C261B6977863D2C2DD4
DE2AFC63EE01CDBB7DF8E9718EF751963AA25E6711EC79C9893C92E4FD6CC9C4
1C5BE4BBA69049419259A6461AA5D12CB3A51AD912A9069DD27150C79C0F58B4
BCBAE6AE0EFC4D394E0836FF0DD0718F7D45F60B3A3C456CF147B81FBA696ACF
6133D2751DEE479699D0D72F0C9E296AB8D4B82C60D033EEEFB66F1F45FC43E1
5FA8BA3AB3041C2976A27B3D5B5814B13CB78A420B0AA346C4687EC0F6D8CCFE
1FFA759700DF3861BA4073A558C2C00583F072FF00DD30AD5817F165135BE490
C59BF8722FCC1DAAB37BB9134701B17F4C03E2A35A54BF0862E8AF5859D9E283
E78D65613991E8DCC7C8A4DC3AE836D11787C5AF951EC3677C609134E1B7A366
2EB4727F54BC439F60490622E0BFE5E1CA8D5B386A939341371A619920CE7557
F113BBC18E5B3B6B9D40B7DCF13B8E0E23AECDC8B0101FBEF6961AFE2D159499
892C549E308AF39AF3C33A7307269EC3199E6726AB8DDC3FBFF8321218A968C9
89251F14E566075F22A8F42EB96A8C47DDCC4AC853F97987E669F14C4EE6DE26
D3BD84974F58077859CBDE4482D2CD647FC026F4DF1C508AC1E752CFDFAA4112
2195B2F73EEFE2EC49BD934CA7777BE69FA4D60436FCAEE691AE3F8964B46AF0
893793945263DFDF09699E64F381ACA6AD93F7C226EB74EEC8405347F7213AAE
1CF0D470791F539F8E8AE2456D49ACBC2F580318C4FBBBE7A5178DD21C6C2FA0
EC23F135A4DF3C922B3797FFE5F5F2E17E7AC8E9559899FD7AC8E86467B8EA7C
4E3F0D027ACD758384577B178DEC172A113C17382E3A8B1C085E85848AB60F32
C6ECE61A1A8CBD350ECC5AA621EE2A7AEBBC9D30D0866C26027B7C26D056DB55
30EE15B0E5B4912F455AAA5D954C920F343C4952F4A76C7BF275832CCEE5D6E6
1B2C98435B429A89E9CA23FDDAB202596FCDA9588ACF4CA375742A1B6860574F
E976D6747D2BFCF72D7EA4B776CDED539616AD16B8A01CBDF7A2EBAC753DB3C2
2B162B05A10A71E11CF22540BDCC906C1E287A7E8C418DDC7E53F682306F519F
FBFB663AA9B47AF2668CED111E5A68E0482C3D70D5C2F68416EC18858773FA66
9C5DE36802088646F185E5CC6FB6C793DBE45371E3521BD807743968F56CDF9F
9A4326E63B729ABFBD8F861BB72DB4584F812DB4AB5421FC555F6A8FE189D960
674D3A9D8A9E8A7F05B395F624F94F36683E261E8638F3402ED2ECB9423FF6B1
41A35EDD8D4E3D010AAD81500E36218261932950B862FD725F49ECBCD0FB94F4
DEF6463A1F4C91B42B7BB41E3B49F6BFB89A5108558948EBAADBD01984124665
E8196CB25F86377C686930FC5180F1B24D0576872ABE568F5579CC0A82F1808F
9E436F1A7F3204A8EEEE7087051C331AD45DB2ABFA0A1DF1E88398943CE6E300
715FEFD370D821E6997D7A4626079718DA392ABC3B611E508FE296240C3063DE
CCF8FDF90B5C25B04A91B6602AFC6008F7357B3D51A0F8CABAEDC9855F533D0F
16009D31FF604633F83CF2A9B3E1E50F2611E9EC78E92B0CFDF404A931592DC3
ABFC43DF9A2124C3DEC142569239F2C3D16ACFE3D8762677751D98F6E094E5BF
03CCA853299958820FC2F3910BBCAE72D9B12EC3EE4F7B7CC2BFF20B7E990721
A41ECEDE4BAE5BC3FC4CE3387BE7AB67D841DA5035F9BDA2FBA1B0DBA654D75C
5BA4B966D693B41EC08BF6062ABA69F9233054B0DB5D6EA391C12E33056E9EA9
640BD993190A1E61A32125782F364B34CA744606553ABC7A978E082AC4FCE1A1
47046317760B3053C16F183ECD6A784B44F645BF68BDDD286905AFB164878E73
257822C6D96640F9EDFA2A77FC6A83EDF5E9135247AC8D5CA8029DC45A76F052
7E398F8D14529E8C81CF7CA7556CB02BCBAEF065FD46EC1CF096AFEE06F45157
75C7482CB74B622C1079CC448DAAFA291157574910A120DA01F6E8C26F8BC4FC
D4062D0A17BECB3501686F5F2EB818E9ADD636CAE5E6E9B8631FCA996FD296F9
B7319A6A3D94AE28288DF84794C3351822DAF178BDA5D8878505167A1CC0B250
76F6FA5DF38E89104890BAE547A848ECCD4A977F4FC39E3FD6413C295EA277E4
93D2456678B741F6482F662816DDF96DA70DC60E8BD28091B44E5602F368A0EB
C08F21528C86FD0CEF7DEA7A05751083E1439FAE0650E0DB0BFEEA4F24FAFA60
EE45ADC4296FB93DE4F57720E76E4636307FAD3B8EFD4231622D5A9359D4D0BC
19E37027117CB43C3C3457520DC35845BFD91668188838A5259C7BD69AF8BB1F
6172F57C37F4664322935F9A4B3276CC9BC39ECA2793DA69869056F97C58CB90
618EA05E27CA6D527063651F0D1D58C41A43E1A1B57897654FE6F266B90772CF
D3C393CC89C04E39C9D9D72C45F9914C3F0826660E605BE570DD582144E3C7A3
CCF7F73A56A7D6472F84B51948813989854A853E0D35B20DA3C50CC7D6B2525F
F5FF041BE16E5F46A05C47155DDBF01BDDBB42FA5C3727D1F0ED0A84F663E2A8
DCFAB46B4347A355FB4E60538B1C240C402BDB67303F3AF6D3ADEAF9CE6A8BD5
6A6598FD8B3AFB497ABC20B494B1BC30CC573C591D07FA8ECC2A253812078093
C722517EAF26DAC0691FB867BC61B5DE7CA30170670728B394302559F8B60999
756C76183FCA5CA2B094BBE8D0F3C0A2822DC793FD02C057C8DF4D5C3A1BD196
EA936E915363BF9715DFFEEC5730E9B055A7D88A074EA716367F1F25DD69F0B9
1129E6DD59172D6BCCA969FFACE49CF06ADC3F7C10AAA8143EDE968E1BE3F7A3
F944E9669BAA61FE77F3DDFB640F08DB4EDEF2E250F31F894047A8048E43F71F
3590A0A7A2E9C252FFFDF18B300C16242F9660C4B59890732AD71E1636B9C61A
EF398BE40D0D97884977E2CB5B853B911538C7A958526916D46ECEF204407888
5E8D0191382313946D7BF0B6E3C7F014F9AD1BD406F96AFC8E168F96914EC720
B57D013B471F7A0A07990992D08C058E66829EED6D36BD4A9C0F8C1230E84244
3E87FF0C3BC12A57EAA5825256FC11270E90BF930D2D7ED19DC2B906A5B63E23
B00E872BF23A33485F2C83E4EB17913A37799D343FB2E18D66135ECB55AD03C3
5678B88854F95A5165257FACF03C638409B29D1EC635A5F4DBEEBE253037CE65
4CF92FAE5B9190E3F22BCBC783FC11FECB50160D37691EDBEE9DDFD22D006941
7A0EF00335765BD188E5B2E4DDE6748F27F783DB919F8FC3501E7E8B5A37C14E
C124116D41CAA78DEDFA0A8FF17FDE67CD2B67B1F265B5358E8C15A3FC279E6F
6CBE42B5A531E2D7CA5DEEBA440ACB8A2C843CDCBA44C03C39F6A79678B78921
9A69B7FF4D051D08EAEDE7B6171063E274C9C8238DC8A8F0980DB73244AAF6E4
CAA30F5E529B5E2AD64842999ADA0F74E9269A638C4FC4232C98272D0F384E34
2E70FF53FD0C4C150707DF36FCFF8A3C1D38B58EAC76AA95108515028EFDC4CB
32DC0DE953157237D9B9264BA7701DB63915DE3F263DCD548CE16A8B2580811E
A5B70B82940E92004E2EB1ABE4E350550D9E26AAD6CB4744007DFD53930BDCCB
503AE3F490372FDBB05A1E50C649ED371237325025FB8CF5A2D0AE17DE3BBE52
95292214BD7681B1F23174E97C41784AA5C82FD44A78B570B9CBC44B1A4ADB75
52A4A86605D6B3AD43D4502AD1BE564AC5309C16AF3C3A78AC9C250CE45CFC23
2C467DD8914CC19BD881DA3D509B337E272D1F71B3A5EC0B60AF01220278EF03
3E25028ABD9B28863DFCC5B60C413E80C8C0E9B8B8250AEA38F8692641A95590
3C76E851C248BF83AB0EE12028FD4028168C6BD41289EC00506F602D212471D7
50D2B62242D2BFC28A49187E71C9DC7C04491D731F8A60F6322BC4015223534F
9FB5D7554A449FC2831AA2F3D9E7E3FF2763935DF376FFB3DE9A4C16BFF74810
72A727C2DFDCF0F80E62800FBD97624205AD71B4488030BF7D83433D5CA15E47
DE5A6F03078225BCE8AC0AD280C31054BC112123D0621D076303BDF89034E91D
4FD70EE80A2E44A383AD05A96FC0808A8B27669E83E6677CB205B14FABB138FE
C52A4E3A989BDC1CDF225D07FBA8A330726C4EDE2304CDC50B110EF8A4605DBB
BCB2A5BD37B805CD7DEEA48419E5C34F5FE957B7FC37826DA2C20FEBFED0A1A6
6388CFEE1D2481CB1BBF6735481728A4C2DA963B33462CDCC3E27BF23148B4C4
520EDA3A4980B39064F0FC03C9E0FB830B3053F8057C963038C4B1360E48083D
9C6E3DCCBDF95B3BD91230CE066ABE4ABB67978DF485FF8695CC7E3DD24B1E37
8A42FD9ADCAFE8B6335370E8015D3B963719917EF72FF5704B834A48F9265303
EE99F41173B0078C80A32D1416BC67E7D56572D2CB973393F07C3DA631A54006
41686C4ED75B1DCBCAFCDD138B86CD4B436D1752313781C82E0C9D7ED0E83A08
588584C512413BA72FDD7032A2BCCC4B5CB9B95BFC6D85C96F8F5E92B36FF356
66011AAA92F099F43C2F6EAA31ECB8CE77CA26AE7A9AB3AD5AB92988ABF2A412
995268D2EF8277A7A479B790FA16ACE36E2E684B6508EC8076DF49FF313FBCF5
BCCC40BD4BD9CF859AC9AB785131581008C637854D21C9532D2295C8459C27D4
5A9A51A511A71DA25CD203E30BAF0B3582768728ECE68F365DFE174974F6661A
0CBB0F68BF9263A1683F82EB88C661B3EF14D4D43D18638CC987B7410D57FB25
662D2E0B3D1FE3B65D408EE71F89AE6BBF81CFDF9BBB5EAD3EAF512B4180EA49
CDBDE359FF17687E23EFD297B1A5CC224D4C9C591DF7216630D7896FF8ACCC13
EC6E230D7643F4C6FF842605BD7E93150D973B8E8A5573C3D6C69CB67DD0AE3D
DAA8A35885253207FE6DA21237F2A24A1ED9430CEE5B4EA90B68AF401F870385
0F55BD85D56C46E012DA86A4D003867758B676AB1D7B916542962E98EC5DE3B5
6BE545354DBACDF3FA408963A118423E65317A06B25E8402DA3284005D9E4D73
CEC62FF4DEFB9749D46F0D0B99692D2734C8E9FBD31B80061C6C56AE4AAE9EC2
D914ED7FE29102A5DE5923D0D39AE3C4C4D011A96E58BCC9E057EDDC6A03C84D
18D73EA7692710ED172416D00F33D7BA23013C8DEB1D3670081978E15B7B2EDC
F7544E166E40F4DF01B0AD1CC58265D29728F0715B146A9909F18BF20CFFE869
457D01A9C528CF6A0832714BD68C6D95A595799376C1EF2C81A7A5B9882C3179
826C4A696866DFF7DCC7796F861DFB162FCC6AF9C6D173D93D2946E4994B9D7C
E04A2BE586CD80FBD4FF237BF1E5FF593B3D9EBE1CCEF481BD8C3E27D7971451
3F24CF7611921E7104E91F8717A6BCE818C0709F88FE12ED5E83932811210AD7
F1D0F7136631DD09C0B7F6BA09547F104E841BC2F0773CD03341E462C70894E6
F5D1F1110F858075D0ECD840A46549403CD678A95288DC5A1930270CC32C86D8
33E48E66531243D07F5CE2088B06F627B637FC9B4CFED9C1A7B8326B783D4754
2F91614EF7A65A82566ABD1BC04084726F3C2FD5805F089F8AA7F76D167D69A6
FB1E2663168C4F132E053E6E6A333FD1C1C90E64D0D0A2F5D1E6A3CC67844F41
113C7381820BFA2B3AAD20905D52F0E4AC90235C130646A859444FB9E5F5B987
83C7DAC8787C30089D1B2D60DEFB6B04A65B47ED63050C45C6B5D23360B65E9A
CAB50F5931D850E215FD0BC81E0219D7C0BC352A30CB506E7D4030A5CB25AB35
275E2FAE41A3219E1CF1B86E9CE93A84801766431F576FE5DED31DEED8109DA9
3B4884883330B770E1E83E57938A4F19AFFC85368967BEC9FC3D3396FC2AAE10
603B9EBE74838D4BAA275222915CF486C4BCDA6FC2B2BAB72498CEEE8A4ED6A2
6AACFB61259B7F63959F93AE3D0BAD489C0FCEF582E2C9756CE594BA2E583AB0
66EEF60BC3080AF961A0F54BF541412E1B63C8DE2BD20A3E45F50C59B49398CC
4D0B51BC041EF03FF59CB6227752D9E55A9798DACFB2AA92386DC9C3E5427535
ABAEE7C5F352010DFBEC7FE0BA17C8D06158958994BDC43DF2D73F74F1F86545
C34148F32B158C11339E887186FE8B12C8697710CFAA40FED6C3D74FFFAD7805
F0A823BAB7F483CF1799
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (mywriteup.dvi)
@start /Fa 138[53 37 38 39 2[48 53 80 27 50 1[27 53 48
1[44 53 42 1[46 28[73 69 68 72 6[27 58[{}21 83.022 /CMBX10
rf /Fb 134[40 1[55 1[45 28 34 35 1[42 42 47 68 21 38
1[25 42 38 25 38 42 38 38 42 9[83 2[59 11[62 3[63 4[42
16[25 1[25 44[{}28 83.022 /CMTI10 rf /Fc 137[70 73 51
1[51 1[73 66 73 1[36 1[40 36 2[40 58 73 58 1[66 9[137
6[90 6[47 22[66 50[{}19 143.462 /CMR17 rf /Fd 133[37
44 44 60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46
42 25 37 46 37 46 42 4[42 4[85 2[60 46 1[65 1[65 62 76
52 65 1[30 62 1[54 1[63 60 59 62 5[23 23 2[42 2[42 42
42 42 42 42 23 28 23 2[32 32 23 4[42 20[46 46 48 11[{}62
83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 411 Project 2) /Subject (CS 411 Project 2) /Creator (LaTeX with hyperref package) /Author (David Merrick) /Keywords (cs411 ``operating systems'') /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray Black 0 TeXcolorgray -300 -360
a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin H.S end
 -300
-360 a -300 -360 a
SDict begin 12 H.A end
 -300 -360 a -300 -360 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 -300 -360
a 83 x Fd(Da)n(vid)27 b(Merric)n(k)-300 -57 y(CS)h(411)-300
162 y(27)f(April,)g(2013)p 0 TeXcolorgray 0 TeXcolorgray
1016 489 a Fc(Individual)44 b(W)-11 b(riteup)43 b(for)f(Pro)7
b(ject)44 b(2)-300 687 y
SDict begin H.S end
 -300 687 a -300 687 a
SDict begin 12 H.A end
 -300 687
a -300 687 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.1) cvn H.B /DEST pdfmark end
 -300 687 a 0 TeXcolorgray -199 792 a Fd(1.)p
0 TeXcolorgray 42 w Fb(What)30 b(do)g(you)g(think)g(the)g(main)g(p)l
(oint)g(of)h(this)f(assignment)g(is?)74 925 y Fd(The)h(main)h(p)r(oin)n
(ts)g(of)f(this)h(assignmen)n(t)f(w)n(ere)g(to)g(learn)g(ab)r(out)h
(the)g(blo)r(c)n(k)f(I/O)g(subsystem)g(of)h(the)g(k)n(ernel,)g(gain)f
(a)g(sense)h(for)-92 1024 y(using)c(the)h(built-in)g(data)f(structures)
g(that)h(the)g(k)n(ernel)f(pro)n(vides,)f(and)i(to)f(write)h(our)e(o)n
(wn)h(custom)h(k)n(ernel)f(co)r(de.)39 b(Blo)r(c)n(k)28
b(I/O)g(is)g(an)-92 1124 y(en)n(tire)i(subsystem)h(of)h(the)f(k)n
(ernel,)h(and)f(this)h(assignmen)n(t)e(ga)n(v)n(e)f(us)j(an)f(in-depth)
g(understanding)g(of)g(ho)n(w)g(that)h(system)f(functions)-92
1223 y(at)c(a)g(lo)n(w)g(lev)n(el.)36 b(The)27 b(k)n(ernel)g(data)g
(structures)g(w)n(e)g(made)g(use)g(of)h(and)f(the)h(op)r(erations)e
(that)i(can)f(b)r(e)h(p)r(erformed)e(on)i(them)g(are)e(used)-92
1323 y(univ)n(ersally)j(in)h(k)n(ernel)g(dev)n(elopmen)n(t)g(and)h
(will)f(undoubtedly)h(b)r(e)g(v)n(ery)f(useful)h(in)g(future)g
(assignmen)n(ts.)44 b(In)31 b(the)g(last)f(assignmen)n(t,)-92
1423 y(it)g(w)n(as)g(a)g(trivial)g(matter)g(to)h(di\013)g(the)g(3.0.4)e
(k)n(ernel)h(to)g(\014nd)h(out)f(whic)n(h)h(c)n(hanges)e(needed)i(to)f
(b)r(e)h(made)f(to)h(the)g(pro)r(cess)e(sc)n(heduler.)-92
1522 y(In)f(this)g(assignmen)n(t,)g(w)n(e)f(did)i(not)f(ha)n(v)n(e)f
(that)h(luxury)g(so)f(w)n(e)h(w)n(ere)f(completely)h(on)g(our)f(o)n(wn)
h(in)g(writing)g(our)f(custom)h(k)n(ernel)f(co)r(de.)-92
1622 y(There)21 b(w)n(as)h(a)g(learning)f(curv)n(e)g(asso)r(ciated)g
(with)i(that,)h(whic)n(h)e(help)r(ed)h(prepare)e(us)h(for)g(future)h
(assignmen)n(ts)e(in)h(whic)n(h)h(w)n(e)e(will)i(alw)n(a)n(ys)-92
1722 y(b)r(e)28 b(exp)r(ected)f(to)h(write)f(custom)h(co)r(de.)-300
1771 y
SDict begin H.S end
 -300 1771 a -300 1771 a
SDict begin 12 H.A end
 -300 1771 a -300 1771
a
SDict begin [ /View [/XYZ H.V] /Dest (Item.2) cvn H.B /DEST pdfmark end
 -300 1771 a 0 TeXcolorgray -199 1888 a Fd(2.)p 0 TeXcolorgray
42 w Fb(How)i(did)h(you)f(appr)l(o)l(ach)i(the)e(pr)l(oblem?)39
b(Design)30 b(de)l(cisions,)i(algorithm,)g(etc.)74 2020
y Fa(Bac)m(kground:)62 b Fd(Blo)r(c)n(k)39 b(devices)h(are)f(c)n
(haracterized)f(b)n(y)i(random)f(access)f(of)i(\014xed-sized)g(blo)r(c)
n(ks)f(of)h(data.)73 b(The)40 b(smallest)-92 2120 y(addressable)35
b(unit)i(on)g(a)g(blo)r(c)n(k)f(device)h(is)g(the)g(sector.)64
b(All)37 b(device)g(I/O)f(m)n(ust)h(b)r(e)h(done)e(in)h(units)h(of)f
(sectors,)h(whic)n(h)f(are)f(then)-92 2220 y(mapp)r(ed)d(to)f(blo)r(c)n
(ks)g(in)h(memory.)51 b(The)33 b(Lin)n(ux)g(k)n(ernel)e(pro)n(vides)h
(an)g(en)n(tire)g(subsystem)h(for)f(blo)r(c)n(k)g(devices,)i(the)f
(source)e(co)r(de)i(for)-92 2319 y(whic)n(h)28 b(can)g(b)r(e)h(found)g
(under)g(the)g(\\blo)r(c)n(k")e(directory)-7 b(.)39 b(The)29
b(most)f(common)g(t)n(yp)r(e)h(of)f(blo)r(c)n(k)h(device)f(is)h(the)g
(hard)f(disk.)39 b(Hard)29 b(disks)-92 2419 y(are)d(complex)h(enough)g
(that)h(optimizations)f(can)g(b)r(e)h(created)f(for)g(p)r(erforming)g
(I/O)g(op)r(erations)f(on)h(them.)74 2552 y(The)h(subsystem)h
(dedicated)f(to)h(p)r(erforming)f(these)g(I/O)g(op)r(erations)g(is)g
(called)g(the)h(I/O)f(sc)n(heduler.)39 b(Blo)r(c)n(k)28
b(devices)g(main)n(tain)-92 2651 y(request)35 b(queues)g(to)h(store)f
(their)h(p)r(ending)g(I/O)f(requests.)61 b(The)36 b(I/O)f(sc)n(heduler)
g(essen)n(tially)f(w)n(orks)h(b)n(y)g(managing)g(this)h(request)-92
2751 y(queue,)31 b(deciding)f(the)h(order)e(of)i(requests)e(in)i(the)g
(queue)f(and)h(when)f(to)h(dispatc)n(h)f(eac)n(h)g(request)g(to)g(the)h
(blo)r(c)n(k)f(device.)45 b(Seek)31 b(time)-92 2851 y(is)c(the)i(amoun)
n(t)e(of)h(time)g(required)f(to)h(p)r(osition)f(the)i(hard)e(disk's)g
(head)h(at)g(the)g(lo)r(cation)f(of)h(a)f(sp)r(eci\014c)h(blo)r(c)n(k.)
38 b(One)27 b(of)h(the)g(primary)-92 2950 y(optimizations)e(that)i(can)
f(b)r(e)g(made)h(to)f(blo)r(c)n(k)f(I/O)h(p)r(erformance)f(is)h
(minimizing)h(seek)f(time.)37 b(I/O)26 b(sc)n(hedulers)h(do)g(this)g(b)
n(y)g(merging)-92 3050 y(and)h(sorting)f(the)i(requests)e(in)h(the)h
(queue.)39 b(The)28 b(en)n(tire)g(request)g(queue)g(is)g(k)n(ept)h
(sorted)e(sectorwise)g(so)h(that)g(all)g(seeking)g(along)f(the)-92
3149 y(queue)i(mo)n(v)n(es)g(sequen)n(tially)-7 b(.)42
b(Since)30 b(this)g(is)g(similar)f(to)g(the)h(algorithm)f(emplo)n(y)n
(ed)g(b)n(y)g(elev)-5 b(ators,)29 b(I/O)g(sc)n(hedulers)g(are)g
(referred)f(to)-92 3249 y(as)e(elev)-5 b(ators.)74 3382
y(There)30 b(are)g(sev)n(eral)f(\015a)n(v)n(ors)g(of)i(I/O)f(sc)n
(hedulers)g(built)i(in)f(the)g(k)n(ernel)g(already)e(and)i(optimized)g
(for)g(di\013eren)n(t)g(purp)r(oses.)46 b(The)-92 3482
y(Deadline)27 b(I/O)g(Sc)n(heduler)g(is)h(designed)f(to)g(prev)n(en)n
(t)g(starv)-5 b(ation)26 b(of)i(certain)f(requests)g(\(suc)n(h)g(as)g
(write)g(op)r(erations)g(starving)f(reads\).)-92 3581
y(The)32 b(An)n(ticipatory)g(I/O)g(Sc)n(heduler)g(is)g(designed)h(to)f
(maximize)g(thoroughput)g(and)h(is)f(ideal)h(for)f(serv)n(ers.)49
b(The)33 b(Completely)g(F)-7 b(air)-92 3681 y(Queueing)26
b(\(CF)n(Q\))h(I/O)f(Sc)n(heduler)g(p)r(erforms)h(w)n(ell)f(in)h
(nearly)f(all)h(w)n(orkloads)d(and)j(is)g(the)g(default)h(sc)n(heduler)
e(in)h(Lin)n(ux.)36 b(The)27 b(No)r(op)-92 3780 y(I/O)d(Sc)n(heduler)h
(only)g(p)r(erforms)g(merging)f(of)i(requests,)f(main)n(taining)g(the)h
(request)f(queue)g(in)h(near-FIF)n(O)e(order.)34 b(It)26
b(is)g(in)n(tended)g(for)-92 3880 y(blo)r(c)n(k)h(devices)g(that)h(are)
e(truly)i(random-access,)d(suc)n(h)i(as)g(\015ash)g(memory)g(cards.)74
4013 y(As)g(for)g(managing)f(request)h(queues,)h(the)f(k)n(ernel)g(pro)
n(vides)f(sev)n(eral)g(data)h(structures.)36 b(Kernel)27
b(dev)n(elop)r(ers)f(are)g(encouraged)g(to)-92 4112 y(use)20
b(these)h(data)f(structures)f(wherev)n(er)g(p)r(ossible)i(as)e(opp)r
(osed)h(to)h(designing)f(their)g(o)n(wn.)34 b(While)21
b(generic,)g(they)g(ha)n(v)n(e)e(b)r(een)i(thoroughly)-92
4212 y(tested)k(and)g(p)r(erform)g(w)n(ell)g(in)g(most)g
(circumstances.)35 b(The)25 b(most)g(useful)h(of)f(these)g(data)g
(structures)f(are)g(link)n(ed)h(lists,)h(queues,)f(maps,)-92
4312 y(and)31 b(binary)f(trees.)48 b(The)32 b(I/O)e(sc)n(hedulers)g
(use)i(either)f(link)n(ed)g(lists)h(or)e(binary)h(trees)f(to)i(manage)e
(their)h(request)g(queues.)48 b(F)-7 b(or)31 b(our)-92
4411 y(purp)r(oses)26 b(in)i(designing)f(our)g
(shortest-seek-time-\014rst)e(I/O)i(sc)n(heduler,)g(the)h(built-in)g
(link)n(ed)g(list)f(data)h(structure)f(w)n(as)f(w)n(ell-suited.)-92
4511 y(The)f(k)n(ernel)f(pro)n(vides)g(metho)r(ds)h(for)f(adding)h(to,)
h(deleting)f(from,)g(and)g(retrieving)f(items)h(from)g(lists,)g(as)g(w)
n(ell)g(as)f(mo)n(ving)g(items)h(from)-92 4611 y(one)f(list)i(to)f
(another)f(or)h(to)g(a)g(di\013eren)n(t)g(lo)r(cation)g(in)g(a)g(list.)
37 b(Our)24 b(particular)g(implemen)n(tation)h(w)n(as)g(a)f(circular)g
(link)n(ed)i(list,)g(meaning)-92 4710 y(that)h(the)h(last)g(item)g(in)g
(the)g(list)f(w)n(as)g(link)n(ed)h(to)f(the)h(\014rst.)74
4843 y Fa(Design:)74 4976 y Fd(W)-7 b(e)24 b(designed)f(our)g(system)h
(to)g(p)r(erform)f(exactly)g(the)i(w)n(a)n(y)d(an)i(elev)-5
b(ator)23 b(do)r(es.)35 b(The)24 b(sc)n(heduler)f(will)h(dispatc)n(h)f
(requests)g(in)h(order)-92 5075 y(of)29 b(increasing)e(sectors)h(un)n
(til)i(it)g(reac)n(hes)d(the)j(highest)f(one,)g(then)h(it)f(will)h
(dispatc)n(h)e(requests)h(in)g(order)f(of)h(decreasing)f(sectors)g(un)n
(til)-92 5175 y(it)g(reac)n(hes)e(the)i(lo)n(w)n(est.)35
b(It)28 b(will)g(then)g(rep)r(eat)f(this)h(cycle.)74
5308 y Fa(Algorithm:)74 5441 y Fd(When)j(new)g(requests)f(are)g(added)h
(to)f(the)i(queue,)f(our)g(sc)n(heduler)f(iterates)g(through)g(the)h
(other)g(requests)f(and)g(adds)h(the)g(new)-92 5540 y(request)j(in)g
(order)g(of)g(sector.)57 b(If)35 b(there)g(are)e(no)i(requests,)g(it)g
(is)g(added)f(\014rst.)58 b(One)34 b(optimization)g(w)n(e)h(made)f(w)n
(as)g(a)g(comparison)-92 5640 y(b)r(et)n(w)n(een)c(the)h(new)f
(request's)g(sector)g(and)g(the)h(sector)e(of)i(the)g(request)f(at)g
(the)h(head)f(of)g(the)h(queue.)46 b(If)31 b(the)g(new)f(request)g(is)h
(lo)n(w)n(er,)p 0 TeXcolorgray 1929 5889 a(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray -92 -277 a Fd(w)n(e)30
b(iterate)g(in)h(the)g(lo)n(w)n(er)e(direction.)45 b(If)31
b(it)g(is)f(higher,)h(w)n(e)f(iterate)g(in)h(increasing)e(request)h
(sector)f(order.)45 b(Ov)n(erall,)29 b(this)i(algorithm)-92
-177 y(ensures)23 b(that)i(the)f(request)g(queue)g(will)h(alw)n(a)n(ys)
d(b)r(e)j(sorted.)34 b(The)25 b(SSTF)g(data)e(structure)h(w)n(e)g
(designed)g(holds)g(a)g(v)-5 b(ariable)23 b(to)h(indicate)-92
-78 y(the)f(direction)f(the)h(disk)g(head)f(is)h(mo)n(ving)f(through)g
(the)h(queue.)35 b(Initially)-7 b(,)24 b(it)g(is)e(set)h(to)g(1)f
(\(forw)n(ard\),)h(whic)n(h)g(will)g(cause)f(the)h(sc)n(heduler)-92
22 y(to)31 b(iterate)h(through)f(the)h(requests)f(in)i(order)d(of)i
(increasing)f(sectors)f(and)i(dispatc)n(h)f(them.)51
b(When)32 b(it)h(reac)n(hes)d(the)i(highest)g(sector)-92
122 y(in)h(the)g(queue,)h(this)f(v)-5 b(ariable)32 b(is)h(c)n(hanged)f
(to)g(0)h(\(bac)n(kw)n(ard\),)f(causing)g(the)i(sc)n(heduler)e(to)g(mo)
n(v)n(e)g(through)g(the)h(requests)f(in)h(order)-92 221
y(of)d(decreasing)f(sectors.)45 b(When)31 b(it)h(reac)n(hes)d(the)i(lo)
n(w)n(est)e(sector,)i(the)g(direction)f(v)-5 b(ariable)30
b(is)g(c)n(hanged)g(bac)n(k)g(to)g(1)h(and)f(this)h(pro)r(cess)-92
321 y(rep)r(eats)26 b(itself.)37 b(This)27 b(algorithm)f(pro)n(vides)g
(t)n(w)n(o)g(b)r(ene\014ts:)37 b(it)28 b(minimizes)f(seek)g(time)h
(without)f(starving)f(the)h(requests)g(on)f(the)i(edges)-92
420 y(of)f(the)h(queue.)74 553 y Fa(Co)s(de:)74 686 y
Fd(W)-7 b(e)33 b(used)h(the)g(No)r(op)f(sc)n(heduler)g(as)g(our)f
(template)i(for)f(designing)g(our)g(SSTF)h(sc)n(heduler.)53
b(W)-7 b(e)34 b(c)n(hanged)f(most)g(instances)g(of)-92
786 y(\\no)r(op")24 b(to)j(\\sstf")e(to)h(distinguish)h(our)e
(functions)i(and)f(v)-5 b(ariables,)25 b(but)i(to)f(a)g(large)f(degree)
g(w)n(e)h(k)n(ept)g(the)h(same)e(functionalit)n(y)h(of)h(the)-92
885 y(No)r(op)g(sc)n(heduler.)74 1018 y(One)d(c)n(hange)g(w)n(e)h(made)
f(w)n(as)g(to)h(the)g(no)r(op)p 1435 1018 25 4 v 30 w(data)f(struct.)36
b(W)-7 b(e)26 b(c)n(hanged)d(this)j(to)e(sstf)p 2762
1018 V 30 w(data)h(and)g(added)f(head)p 3550 1018 V 30
w(p)r(os)h(and)g(direction)-92 1118 y(v)-5 b(ariables)26
b(to)h(trac)n(k)g(the)h(curren)n(t)e(sector)h(and)g(the)h(direction)g
(the)g(sc)n(heduler)e(is)i(mo)n(ving)e(through)h(the)h(queue,)g(resp)r
(ectiv)n(ely)-7 b(.)74 1251 y(W)g(e)37 b(mo)r(di\014ed)h(sstf)p
703 1251 V 30 w(add)p 867 1251 V 29 w(request\(\))g(to)f(place)g(all)f
(new)i(requests)e(in)h(a)g(queue)g(that)h(is)f(sorted)f(b)n(y)h
(sector.)65 b(W)-7 b(e)38 b(added)f(lo)r(cal)-92 1350
y(v)-5 b(ariables)24 b(to)i(this)g(function)g(to)g(hold)f(the)h(curren)
n(t)f(request's)g(sector)g(as)g(w)n(ell)g(as)g(the)i(sectors)d(of)i
(the)g(next)g(and)f(previous)g(requests)g(in)-92 1450
y(the)30 b(queue.)43 b(This)30 b(w)n(as)e(necessary)g(to)i(b)r(e)g
(able)f(to)h(compare)e(the)i(sectors)f(in)h(order)e(to)i(place)f(the)h
(new)g(request)f(where)g(it)h(b)r(elonged)-92 1550 y(in)d(the)h(queue.)
74 1682 y(W)-7 b(e)20 b(mo)r(di\014ed)h(sstf)p 669 1682
V 30 w(dispatc)n(h\(\))g(to)f(use)g(our)f(sstf)p 1580
1682 V 30 w(data)h(struct)g(to)h(k)n(eep)e(trac)n(k)g(of)i(the)f
(direction)g(the)h(sc)n(heduler)e(is)i(mo)n(ving)e(through)-92
1782 y(the)27 b(queue.)36 b(This)27 b(function)g(is)g(the)g(meat)g(of)g
(the)g(I/O)f(sc)n(heduler;)g(it)h(do)r(es)f(the)i(actual)e(dispatc)n
(hing)g(of)h(requests.)35 b(W)-7 b(e)27 b(implemen)n(ted)-92
1882 y(our)e(elev)-5 b(ator)25 b(algorithm)g(inside)h(this)g(function)h
(to)f(ha)n(v)n(e)f(the)h(sc)n(heduler)g(switc)n(h)g(directions)f(when)h
(it)h(reac)n(hes)d(the)j(request)e(with)i(the)-92 1981
y(highest)g(and)g(lo)n(w)n(est)g(sectors.)36 b(After)28
b(dispatc)n(hing)e(eac)n(h)h(request,)g(this)h(function)g(deletes)g(it)
g(from)f(the)h(queue.)-300 2031 y
SDict begin H.S end
 -300 2031 a -300 2031
a
SDict begin 12 H.A end
 -300 2031 a -300 2031 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.3) cvn H.B /DEST pdfmark end
 -300 2031 a 0 TeXcolorgray
-199 2147 a Fd(3.)p 0 TeXcolorgray 42 w Fb(How)i(did)h(you)f(ensur)l(e)
f(your)h(solution)g(was)g(c)l(orr)l(e)l(ct?)38 b(T)-6
b(esting)30 b(details,)i(for)e(instanc)l(e.)74 2280 y
Fd(W)-7 b(e)32 b(used)g(prin)n(tk)g(statemen)n(ts)f(inside)i(our)e(sc)n
(heduler)g(for)g(debugging)h(and)f(testing.)51 b(W)-7
b(e)32 b(initially)g(used)g(the)g(no-op)g(function)-92
2380 y(for)h(dispatc)n(hing)g(and)g(used)h(prin)n(tk)f(statemen)n(ts)g
(inside)h(our)f(add)p 2065 2380 25 4 v 30 w(request\(\))g(function)h
(to)g(mak)n(e)f(sure)g(that)h(requests)e(w)n(ere)h(b)r(eing)-92
2479 y(added)28 b(in)h(the)h(appropriate)d(order)g(of)i(sectors.)39
b(W)-7 b(e)29 b(grepp)r(ed)g(dmesg)f(for)h(the)g(output)g(of)g(these)g
(statemen)n(ts.)40 b(Once)29 b(w)n(e)f(knew)h(that)-92
2579 y(add)p 47 2579 V 29 w(request\(\))i(w)n(as)f(w)n(orking,)g(w)n(e)
g(then)i(wrote)e(our)g(dispatc)n(h)g(function.)47 b(When)32
b(a)e(request)g(w)n(as)g(dispatc)n(hed,)h(w)n(e)g(prin)n(ted)g(the)g
(its)-92 2679 y(sector.)41 b(When)30 b(the)f(elev)-5
b(ator)29 b(switc)n(hed)g(directions,)g(w)n(e)g(prin)n(ted)g(the)h
(curren)n(t)f(direction)g(and)g(the)h(new)f(direction.)42
b(This)29 b(pro)n(vided)-92 2778 y(us)c(the)h(con)n(text)f(to)g(b)r(e)h
(able)f(to)g(determine)h(whether)f(requests)f(should)i(b)r(e)f(prin)n
(ting)g(in)h(ascending)e(or)h(descending)g(order)f(of)h(sectors,)-92
2878 y(and)i(then)h(w)n(e)f(w)n(ere)g(able)g(to)h(c)n(hec)n(k)e(the)i
(dispatc)n(hed)g(requests')e(sectors)h(to)g(con\014rm)g(this.)-300
2927 y
SDict begin H.S end
 -300 2927 a -300 2927 a
SDict begin 12 H.A end
 -300 2927 a -300 2927
a
SDict begin [ /View [/XYZ H.V] /Dest (Item.4) cvn H.B /DEST pdfmark end
 -300 2927 a 0 TeXcolorgray -199 3044 a Fd(4.)p 0 TeXcolorgray
42 w Fb(What)j(did)h(you)f(le)l(arn?)74 3177 y Fd(Before)f(w)n(orking)f
(on)h(this)i(assignmen)n(t,)e(I)h(just)h(assumed)e(that)h(blo)r(c)n(k)g
(I/O)f(w)n(as)g(a)g(basic)h(asp)r(ect)f(of)h(the)g(k)n(ernel,)g(happ)r
(ened)g(b)n(y)-92 3276 y(magic,)i(and)f(there)h(w)n(as)e(only)h(one)h
(w)n(a)n(y)e(to)i(p)r(erform)f(it.)49 b(I)32 b(no)n(w)f(kno)n(w)g(that)
h(blo)r(c)n(k)f(I/O)g(has)g(an)g(en)n(tire)h(subsystem)f(in)h(the)g(k)n
(ernel)-92 3376 y(dedicated)h(to)h(it,)h(that)f(blo)r(c)n(k)f(devices)g
(can)g(v)-5 b(ary)33 b(greatly)f(in)i(ho)n(w)f(they)h(store)e(and)i
(access)e(data)h(\(\015ash)g(memory)g(cards)g(vs)g(hard)-92
3476 y(disks,)d(for)g(instance\),)h(and)g(that)f(there)h(are)e(sev)n
(eral)g(di\013eren)n(t)h(optimizations)g(that)h(can)f(b)r(e)h(made)f
(for)g(di\013eren)n(t)g(purp)r(oses.)45 b(I)30 b(had)-92
3575 y(heard)d(the)i(term)g(\\sector")d(previously)i(but)h(no)n(w)f(ha)
n(v)n(e)f(an)i(understanding)f(that)g(it)h(is)g(the)g(smallest)f
(addressable)f(unit)i(on)f(a)h(blo)r(c)n(k)-92 3675 y(device.)55
b(I)34 b(learned)f(ho)n(w)g(to)h(use)g(the)g(built-in)g(k)n(ernel)f
(data)g(structures)h(and)f(re-learned)f(some)i(asp)r(ects)f(of)h(m)n(y)
g(sophomore)e(data)-92 3774 y(structures)26 b(class)h(that)h(I)g(had)f
(forgotten.)p 0 TeXcolorgray 1929 5889 a(2)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
