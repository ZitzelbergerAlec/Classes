%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: mywriteup.dvi
%%CreationDate: Sat Feb 16 13:36:59 2013
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMR17 CMTI10 Helvetica
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter mywriteup.dvi -o
%+ mywriteup.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.02.16:1336
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMTI10
%!PS-AdobeFont-1.1: CMTI10 1.00B
%%CreationDate: 1992 Feb 19 19:56:16
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
end readonly def
/FontName /CMTI10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 58 /colon put
dup 63 /question put
dup 65 /A put
dup 67 /C put
dup 72 /H put
dup 76 /L put
dup 80 /P put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
readonly def
/FontBBox{-163 -250 1146 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0930297866E1CD0A319B6B1FD958
9E3948FFB0B4E70F212EC976D65099D84E0D37A7A771C3101D6AD26A0513378F
21EC3643079EECE0C9AB54B4772E5DCA82D0D4ACC7F42FB493AA04A3BF4A1BD6
06ECE186315DBE9CFDCB1A0303E8D3E83027CD3AFA8F0BD466A8E8CA0E7164CF
55B332FAD43482748DD4A1CB3F40CB1F5E67192B8216A0D8FE30F9F05BF016F5
B5CC130A4B0796EE065495422FBA55BEE9BFD99D04464D987AC4D237C208FA86
0B112E55CE7B3782A34BC22E3DE31755D9AFF19E490C8E43B85E17ECE87FA8B9
1485831624D24F37C39BF9972D74E6EC4784727AC00B9C4A3AD3DA1C22BD6961
7E0ADAF55422F22ACA5E4DCD4DF9FCD187A566B7FB661D0530454D0DD6C6C50A
7A3875C6CBF8EC7769F32A1F3F7FC1C072BADEC97794D4E90E0035282A170402
356E5A9CD9ABD80AC4342A5283E458A7269252F4541CBB6452B39ED54D336D0B
19928E9CD1AB26AD83EB209E2EC75011A2643813053B5DBB0246097C4821B5F2
C92554E9140BE35B2DBFCD98809A8EC9FC910FDE9E0D86457C70ACB056EBF90F
244DC0A5BBD455E15D6E3180311D52CF50B0BF7D0A7F64F3A1821E0AEDBC2E7B
AEB549FE1D51088C153799C6E089B5D5D65E1C4E2D2B430CDF1FFA23CCB25D95
5C4DD885310A706B320AB25C8D742C6F29953254FA54DAAEE60ED477877D19BC
D28E9AB576B0EA088171FD000B60D73B3C57F754BC07EBC9BF751B7D2B32459D
993861B7C4B0D98C422A11BECEF76F4EFC0ECAEE89723E6CED53E3678D733363
2DF068AEF0FE7DFB57393BDAA439A6A4C396F86032A98009EAE1247B7DE83B3B
E46DF2898598FF5E6CA6953127432A967E4FD41CDD60D6E413059A58FA556EF3
309178B57C16A763CFC9BEEC276944BDEA255789EF4E1ECDE1EA43EEDB955513
F42EDDCF39AE522A1DC2DC523F046EEC4CCAE25792B702C288732F5B13B5CCE7
E8B6A1A1DB86B1EA38883E481BEAB54023EDD9BB94E7780DEEA577ADAA169E66
AB7D8607B409619E79F242CF52E618AC0DAE43317C507CDB27EA8A1472D4E8D9
17E62C98DFB049C78AD64570A853842DF3C2E1E6F72227550D82DDEC12B70DC4
24EE312E9850B6FD41EB620714A30E063355596A6CE644D6303E71757A8D901A
868000B4A48732764C46E7ACB9507B7A2BA757530152A5A26336671AE7DA1347
01D34478C2A8EB8A7E06A6E1C5543A51105114677AC42F42CDD32C1E9D7C0BB8
A5784518676D62E957F31222495005B76282EB9E9CF79C8B70BA8098185F8CD6
278619FBED6C1591107758A8250571302C030D29FEF6FD6AEFC263C2A95E45CF
D44846B376A4F6DA6024811094229354E9009E702D1E1E8F264D5A2E5BF7FAE6
E6EBDDEC597787BF973441C2C45C3619ABFAF9F9AFD2D4686159E735CBBA530C
5F86DB6AD63ED64778D10E11E0439BC2B3E2C0DEC92F44B1A760C9A28BC522B2
7BF99589D2DD84417AE38DA3FAA3AFD792C228E42DE50DBB08AF7F0E35F66745
EB3F67F11F7EFB18157304AF1D0E53FC87695C48FC1CC1EF3EA74FF666823C86
BAC05A7E291A5CB0E034C17DF4A5E2F0DAD8353346BABD3D5C99E17F98417606
75D56C5A6EA39BB00B57BADE433260C4E367E9FD73264FD0FC985F13CB9005AE
2D23803740CE05683C8794179B2AD9F7A2C4D1133F95AC2A35C05355F5CFB5FA
E1D951CB73AF307A98E0382D0A2988D098A2953E7FF10CC82E94EDBA49B33477
7B6DB91BE5AE77E169C603854F120FDC0431DAA6D28C46EBA79F5A475334A90A
977429A5E727CE29854F14C970629EDECB2DD6EC319F9B64F6AA08FA65A55CA2
8CC9546F07A4916BB7638E72ABE26F0AB11913D667FFAF2E6D45023761BD0EBF
A8BAB338E263AAEC391482554684C5BEDE42CBF9E1B7CEFC66B6D079D3FAEAFD
8F38F2C15F49DEE35AADDBB2D73A3DDA3AE58DE9AB07A49D958B1D15FF9C2668
D73EB12E73D6DBAF333C2E4FE7E850C2CC4F90C314283E914352EA8C670FD95D
413AC60EED6A865A7902D5F1BBB91A4FA2A25C4907894A86CEA9A2B8A8D0851B
0D7FCC649C7246D5070632AD66DE3194EB3F014C0371FA7979E98BA8F88D8C78
9A205C81825E1B68F3213FD2FA61383067D634D63C37CCB05B462693B8E205F2
1AEE3FB4BE60820A9621A58C2D5D7E9216B08B7BFAE037C26C14354EF2A8AA60
9ABF4E6E85C3546AA5D6E561C90D8E02FAF4CE00269420B3C49D05FEB9D617FF
FA9076927CDBA8673DF35652E5DDB2B80EC3E307CF20BDAE5106611502B903B4
1DD601FA160B3287AD46B944E191FB26AF1EEB72640DB58B057F8304F47B0D89
E459C1A235FB028EBB9DD77E5A676EDAADCB24948967B593A215C65B7A862E8A
74B3891F9236B81967FABB0604BA79B10455CEFC31B6FA03C8A97ACD17B3BB3C
AEE019035AC42EA5D75A1FF0A33C2F24698FE01FA07D5BF56226E22B130CBDD9
EA2FFFA3CD48AD819D8D6FEDFE94F7501452520AA37F80402531E93E81BE4FEF
3262AEC093D8EC9F4FC74DC5D0050A53A9B759E1FDD8325591233A92EBEFF2BA
604354804D3C1F4568358B44CFA056F4D3F2D5342E8040107DF970879491931F
402C64408B6B946BE55BACB3A8AD48BF3D1A66AE9DDB615AFBBBF9824C30195C
8A1B3AAE4B909F45E1F43C1141D9CB33BBE4BAFFDF792E03289FF8953E187039
1AADDC738AECBA88B7539E056DB3A0A6DBA0F17977C39B3D57DD358C574465CF
5AF4A9D257CDFD62F5805ABF14F72CE6B9C3E675E644DE269FE8F649E0F0D083
5B3BE59C12EE2FE5A399081F334F5D5B1FAEDCFBE8874D701C7A4408F2F6E1B5
24656903CD82D7844E781DAA90544F6E9B2625DEEE76F40F0402680EBD872E72
C9EA91CC7E2B232732CC9F00CC57E46F5F33E8C6369F4444E623D914839E5C7F
FFD4DBC3DCF74DFEC7983A117F4BABAFD3038A903D74CB52DD80E297F7B804F0
CBF6761D8DD2B95B76F617EEE7D859EDAFD46C75F4B064E4CDECA30506E0B130
F9B67110C6BCC906D26FFFA12C84BCFB28E9B964284BE50209288B9FE626B720
E3854CBA3FA6FEA11FF5019C8BD1AC6FA97F7D47E10B5710663CC527A0F08689
5FF42F909B5C38531AAC24E7713F554305CE735FAE4AE6475B76810C6ADF0F84
2E329292ECA28CEF95B48072657EF4D21AE7F6A085343854766D196D6AC73CB5
3F7684AEC5AFFD0DF343AB20A1672114B73C5ED96D24EC2019316AEFB0E35B64
22A43A7D430D2EBE40ECDB2A90B1DA2D449C86DD0EE8D8460A8D37030A960230
41B0C6B6DF8C868B7F1BE58DEB1CAE8D58DF157912D62616C7FA51444547D331
A3236B525D8C4F630BF41849866195CB5F34F67F5A14432779CE4AEED2E7B890
24DCD02432918325F0857DBBDB2196DBCBD54C7880D325909B9017488A93BE34
A7BAE7D2C8759CC897F85946B10419D251FE516D3AF99AEE49AC463A536974B6
8688A14D9E48D6C2C18DA7786B6A5491EC523116EF38095597DC11270AA0723B
F8F7A9E99C252F28B950E7247531FED475F6A9CD60F0E0530340F876614E9A95
A5C9717CE56059B00A41AFA3D735A68BC3EAF803644288BC8BB53535840273F3
2673E8F09FFBC7E43B07876856C88D6A463197A0BE0538FE879989DBF05DD5F4
CD6562012F1C9D919EFDFC956230B220E0AF5460A4DA955B2054B777ACEE7253
848366D2548B2E1A5E8A0CC297354FB4527D3433CF7B95D31DAD15EC0B5F8199
FDC5C0CC5CC6E51C2A007FF06FBBEEEF3F5A6688B448361D28CAC1B7F4055118
BC8B4159BEBEAB4186790DB048DAA86F0950D787D96E69215E275A276827D3CA
4D33E578C66B66EFB0E5D2B899245B33FEDB6B9A7D8003C28F952067B121F623
E369E8543FDED6A4B2660BC831F268D089F314B742B7B29E04B13D9F34BB14B3
85E729EF212E4EC7F218434583F5B423DA5C96418CC5896E742AE8933875037C
561C19C719EC88896B674FB88C1381EBE1EB433F8215CA3DB33DC5E0F1BAC18C
9D41D93827D3264E38E5E9EBD96B397743BDB8681FFD2865D82C46CAC6DFE1E4
F3D321627AB6168E9B5F7B484CCA074B4CAB4CFDBD57F81ED724D4AA59D7A38B
E84AC016DCA0741F99E1509A5F82E6B3C5B29BF1DEED24B0F1823772B7336DA7
1E87B62A4FCF215CB695DF4FBC9672940A30A5394200D9F21EFC52904EA8F002
2D7DBFBFC166F546A70830218E6B2581EE26B5CE20D48B26D975B15E0745B05A
4454B495D649AB48E71129AB43FE36501DF72707798BEF35AEC084F357108191
9923EC3AD50E5BB3AECAB2D9992D7EC44A0DB2FC58DE7703A5FBE73EEB5E24DA
A1FA5B1609EE9D64DB4FB6E25A121EA78B0A88FAD78AA2AAE0792510F87BB505
8B63369CAEEF9CECF08A93A12A4D3B192EDB946A3588CDBE3E4E54DFC9FC0142
065BA3AEC9F4E0101B5CCCCA004AAE3204ADD5BE3FEBAF21B23AF69BDD7EB3A1
74B15B65600706D6A47A371E4EF5879ADCBC927E0B7CB49AEF756F2A8FF440EC
469ED97108A32E58CD9AA50A083F8D28AD4073043A44068105A05B33623DAD82
FE448180568749C6F7D2E489FD4FEF5089F69237CCE11A3EA2CDA4391C26D7A9
5AAF42AA5E4AEC6E690AB9331F4C121914E5F655F611B29A83065A6D63414399
F24EF676E82135A067653AB8412A23DCA65F942EB9A8976D9A5356EA96C28FE8
650F0726D75D875ADCC3C97BA506875675A7B40C8098F5E45CF062A55E9907D4
6869ACA99EE9ACA1264DDA8FDB130D07BAEEEE90D831B218831EB51D6F78ACD8
5B50A3C2504DA676ABFD63F1CAF95FAF42174C381B3F75A27D65A33FD314D95B
01E007AF23EE4EBF31916595BFA93F835F3E9ECD95561F96A5D811DDD98EAD59
29105211F00EB6EA60C3135158B9A7C31491E4C886F5ADEC7C577BA01A658D96
54DA818318C037B8D0AC2EEC937A753611FB95413A237D10FF3AC62F2AB34A6A
B80F22C9132E3D979682F42F4D92532F0F54B92FF63C35837242B9F50BFCAE49
4BD0528FD47748F58395695C23028BC3A022BAC08E3399D54D62F3F48BD833A4
FF2BEECF00B90E3AA0C0D947CEBFD966FCAE9B9C336A7474FC9C861272B22CD5
8CBD8AAEEEE2316531ABC9D1EA09205C7A427EB6F63F5195150EE82B8E355EC4
3971F665E5B5658843DD7F83036A823416B0E1F8B5A6DDA1744F6D9BA2819312
A4CCCE269B90D52A5EF7F4FE16411DE4A6D9B1A4B773921182E9BAB87D1E1092
DE6AB020DF6F0F775D297E84B8F94FB66189C832488CBA749DCE0CD46DE8C8DC
4618944A067553A20AF90AFB99A35AFEF590B1CA385857786CA52D97B6081B9B
CF5434FCF485C5611511EB76254BB7603AB16BDDD2880C7184476FA1B583C632
1C134F87B787A3A63637CB4780B9F9C47F86459C4D2ED63C5A85681E079F580C
DDDB256BDD5A9FBBEC1CA190EC90E29D61B45BB83B821CF8E95B13C5989138BF
709C63B7996555531E7542BC2FA57F515C485F66CE30F21CB27B2825CA09FEB3
3B4486DF487AC7954410EC839A58D35C060D269F3317BC22FEF06D11B4502F5B
00160C6C2B82F6EC5AA4C215C0603EC694F9AA0AEBEEFDE01B9FB60FDBE3B7C5
094C694764BBE74FF5C36C6C446AA109AA8CE88E499C81A84F45B31C88890C2B
EA7E21E2A92B4772FF249829278DBF7C2DF1653FEC400260D9C771BC725B741A
831D07A84C768C911A51E830FF4E85A9A74360E23166A7C81F93F34F5E31C001
20B1EC430818EF8E0B3BD973B46D9AF615E6829EE51649D2C81FBA8A48539404
0DA4441536D9DE75DB9F639EAB3C2DD7EA56B64173E4DC859A4B1ACFD8CAD120
33A36995B5E12F340B9AD8D3BC36D0EF58C3E73282AD5B0E09A307C22486FE69
0CAF2E7EACC62121D6E043EAFF159DBEABEBB1AD02CF29B6C2170B3B5B58E613
494450FA39BDDD55696EE3CAB5905B164F113D3C5EFC52BEB6DE6C852B3E2EF2
1819D3D8E27E165466BEF0C1E871C5EAD81585FFFB2BF10B67F4019AE52376DC
635DBEF1C88BDA577AA64A7EA93D058CF4F4E44E97BD63187FF47E03C9A48B90
1AA416030F7535B2E7275919437E0C9B23C7284F450BB5F35F0710DF61EBCEAC
E5EB9FF4026B8CE315D587FBB21FD8D6ACEEE4A05129630F8705A02C6E0D33F5
B8FA9A72A7079991FCF3CE3BC52E274BAA498D70321372EC325271E4DCA4ED24
5BDA528433A3ABA3C4886A787CAEEC326C0BDC8DAAA4E9847AF57FCB8C7FAA14
9A2D29DBFB8F77CD041476E949EBC7F1A16C15975E1BD723EA75428A5B171D6A
97B4AED0862C01DF6F6BB59835F66EDDD3AC738CE736F5FA51227A981CA29C96
FA875000D70667BE52E6B184A47D9BC0178A85C164F0148DFA7C5311B0E80409
1826FA7CAC18F1C2DCD9AAEC87647449B1F9D5FA2CEA715BB8A0DB700C50D463
6B9D828E9BD46A55543B231D7D982A31FB39385C80BE6FA3CE45BB22A5C1B6F1
999A6AB4B972C2979BA5ADB8F0DF58C63DE60E48F07552353DE2428AB178ED30
E3F3C51B0D2BC333E143950B3B3F83998828424A15260661127D5AAD5AA3CD93
2AF3C82E81E410B8F15977C4F64CF0C888AF9258F6AE309CBA2C786DBD295B4E
D655B228F85CEF6094BA92B212C178AC02FF57749129E87ECDB7A816BEB355C5
2FA0509B5BFBDBE00D91D317A8AC17498E787F0CFBC190ED39021A5EE99400E1
36150CA3548CC7670A417BAD33C9AF630A6DA074FDF70305E57F09AE5AAF9F28
8BC9E35F3CB2F17F44A873642DCF30E10A3D99D8B7725A5B9D7D7B79A6D38D3B
0B7DDA7356259BD2923C35B6F10E5023F70E85F1AF93D82B441B152FD9C9EFE3
9FDD092636731268338F89E987C6DC8D362F7F061DCCDB849A4E1F0F0F3956F7
D58D600EA536A5A899683BFAA263E91C7BC169101D4F57607E508BDED2200CF2
69476BC395CFC54A1EE55DEC0855DF660E07857AA06ED0E78D7722F126DE9701
60F6220804B204135DA34630402C978F8E571942F3AB5B553C2D77EBCD0EF145
5805CA5F4146B3633BBAF383B9D5F5FCF304A6C7ADAABBADE847C67743020185
36292EA5916F6F5D102ED5CE3E262F4B06C88AB38FDEEE50A5E5E7CA6D650D4B
F13F6A0B9690CF4613EE61DC1443A0405027CEDD164C8A0D10AAD5A9E511F3BC
3D6C61F246F10704709519353CE029BFA4676FD0C36781E89FBCC6EC7E001AC8
5C94BCCFE24DDF51E60DE02AD0238520BD228FC14CE48AA67E0EA8A62F42C443
556BB214B7D08F70952B673E2392142E128282AE786ECF78EB8A905115D4E8FC
A08D74DFE1A8B58E74D24C7680FC23578C67651ED3B4D2957C6C3DFAA81AFE1D
068E28504DDF098A2E684610DFC8EB119C45CCA933C2EC46B941E1060E3CBA06
6359534A5A2F2ABA88B38A51F42FD3B299E39338BD2F67A58199D880C463D342
7859FB0CF618392A76626CDE4E4E7A2A9D5D358755111E746D6794D85D20976D
8D45C6847D08E40EE5E129362C13E0BB09ACF4E6C5D6E270D9D26E4247F11225
C3C0C463D1C9E9D7C1AEE89A93EC6B4583B3680025090CC05769C5337A8A857E
28A429768AAB9359036360BC991A2F6D5ACD1AC21CDC6A3F8507FBB591638145
213BE9FD705387E843E407D686770977DFBE8ED1067CC8B22790A5B13936B7B8
378CDC20FD7CC9EB84503DB5939F8C058C7226F7EAA74EF0F5771D3BE4A8028F
2D3DB50DD888C8195687D68FBA8503E187539617D36F32AA656C7EB16B4AABED
5E4E7959BBD36DD89CAD0A0EBB0287A16B5BC2EDE3008671E5C7B730F6611307
5CF1B50158A302A98A8E161CFEEF5EB2603FCB04990C8E05ECF3645B1025C7CD
476C9743F8369AAB76F354EA3A254CA6B0DEE84BD9646107EFB4832837587434
BFA20E541F89BE88832194B5709607B7CBA1FAEB83369C6A135A6450047DBFDD
A9B6691D60EDE5AF4F151249F561BA6638ACE295EACDE3CF772900FA3B525264
908E979230458CF7F4B5CBF9D3590BBBC6E713F1564445081448B336595115F4
EEAB087BFFE8A111023CBE6DC374A8C5BA48046534AB5ADC75CD87F2BDD8C2E4
74F16B21AE305D190B3F2D7E41E6EBC0FEC7D5FCDD0089411B4490CF535FF1EB
1CED9C264647C8DD8B19D472477DEAEA805F47F378AA0D162607C7247AE23C15
15431C9D7A80D6644F257D8E590B42B7A6A4115C89FEAB648DD9B825D1B55389
94854212A73566D9774725B0A5E45B1B627E0F4469B22AF499F6E0443AF163A0
DBF7BF725C63EFC4E57C4D337BA1845D789744D3F8DED84359CFB4F766D0A809
4DF3E2071B2F60D867A2A73FEA0F1B3797987FF4745851E106116BDF5E824F69
D48FDEB1A0E32F92B42E339BE4B74FA29C58EC9476008431F123C0CA4B48BEF9
943A5764717576794648F3B810937285BBA656E4659856B764D927A096033D21
C9898DEEA008FC517566C606FC651DA1328F2C70E2711D80F1183602F4D0EBD0
A76A269E077C3B6723200A333215195E07F81C794103A9BBAAD9CE3AAA3E808D
A5E81DC5202270B76E7BA9356A23D1F8F04775574F19EAE5F2FA503A8E837D46
F7CC2D687C7639583F8BEABE35531330140F69FF68E3DC6132073D9E71D9A30A
D14D2B03E82D3A3AE9C8D4709FE82DD1868F65D6556214FB3B1099C6C86883DE
772DDE36DCC0D4068512ABA05C9B4414B7B00BAD483F4108DD5CAB920C7961C6
7668AD0A938DB01DA6C5F7F37973A1CA7B5BB2F35AB6F02BD79108188E28FB95
4A0C3307C4EB6812C4C5DEFCE6E5FFE4ED283FB9C0F2C474CEDDA637D27DB69C
098573608D662F9B792B48E1957D23071976D6ADC6CFE6B7276D2F6B1DED8661
EEC95F803A56FBA8C3906BB86F5B6ABE484ACDB0BC9D6758D16F5DF6EFD7B860
C7324436276B1D2D33F1BA977AEDAE15BCEA5D3165F79F945C619B3A62C86368
1944358D892E13F4FD58395FC5549F593F0BF769F1E43D1A416D6863A04652AF
055B8AF61DC020F1FD47A1F5A6E9F838CF819ED98E1C548C596ED085C67DDFC1
602E81EFF4345FB8D3DC4FA80A886E9E23EFC6332CC7D229CE6AE0476D8B60B9
7D8C7A048FA458F81B62F4136816EE2678CC06CF4FFD39BAA69D37AF01E9833C
D3AFB52D2B057506F718BF6EACC0167C6A0A9298C6D4EB65AA7A5498B896892E
8244CD09CFECE1FA71960D69B65F8126EA27C95B2F99901B31C7E8851AA31763
1F4BDE9C99683524B2830BC0CFC009E59FAF60212E9F16439864B4EB6D2D0F91
CBDA58ACFBE359B2EC0AB443802A75D5B9E8E63F89EF085B3EA0C3F69924AA34
A0CB080B6FF685776DD9F4ED6144784BCE5D37246EB4714384F224840F1F0695
28DD04C1FBA8BBF5EC1EB39E39B427F55A2EAF2C02B06FF444D296228CCDBFEE
22265C31369329C4B38599BA7C6A3DFA24C28C6058EE23179B5C3289A98E68A2
400AF92FFFB7156FB36D03E74CEE7597E5CE8D2E818D526F4A1C0A257FA6F56D
62B8844BE725223AD0EA52855A37157EA8DC9D80CE8BD9BCDA363D317D151B58
B2E1F6F111083E5AB276333B9E9D4B0390D56DA48585AA047F300EF1400EC6CE
85EFDECB1D1DFB2800BCDE5044AC97C2888E15658A4E475C6A3240289A1BEC3D
A3CD79B356016CF6566F40D3C5453B2808C7AA938483286C2907247DC788825E
99AE31F1721AD8EEC7CF41E385AEA4646319210F7959B42C1A83CB2858C4840C
89BFCD43960A497DD83CA0701FA9348B85C3ADC9F4306F2575EED883C4C73468
95FCA34C68DDE4010AEC69875040F3D479D015665B72D0FD6CC8EB1C5545D3BC
C25ABBCA7852DED859E3DE98345B6233B64912420DED9A5D6BB845BA7BC5B4DA
6BFD9176D1E0F90FE60F0AAF0EF7B1534DD33CA35E3B56167F4159BFB3F5AA54
7E403FDCDDF0EB142F2D691B507CCC9CC5A48449F76D32C6A9C9D498BA3A219B
A11113144937CE18F61C4B3E60EDFE3C698B0290EF19CD7B520D9627352F9A82
E0623EC244ADBDF467BF0B64C9420E535FD7EBB9D6A5383C2ED875CF457DE362
E376AA83E00C3D3C93856FEB42E5A2CED702BE69
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
dup 65 /A put
dup 87 /W put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B41B05588453
D4417AEA07EB3348CA1A966A79D47C78CBBF71B6E2EE4333214506C249DCBF19
D4535A856FBF22993F5A31E5B07A543A7A73D8F1301E0A3B35304F7BDE15FB2A
FE9D953FA9AADCA0C7C11AD18110744D2FDF6230FEE9566E444C8BF8A93E8949
791B832EB077BFC3336ED8091B5BF8BF12D9C59C18A3B57937BC982A25B01D99
A2570DE249036F1907AFA4AE58F79FC00B5B34BC8C0AA918867369EDCACABB76
9B42093F446F31D861B151139BCB3B7B38645C84548CAFC1279EDFC388E5FA36
1C902FB416BCB2A08122F2B2F8D26A97E7503ECEC64864FD3B7B299A5754EBF4
FA6DED41E0CE7DE1136A89531ADBD9FAA0ED99F1421B48D6CF78C44D5E6F20C3
40E90852F23BC8641E2F550ED0D8D2ADED9204EB4B233CA1171853BA9BFE4048
D55BD5C1D73E439DA0D8CB32C55AB2142E0F710052EDAB9881CB048FF28AD181
A3EA9D346D2AF744D71C374614AE76037889EECC943ED493F261066799778942
0CABA0850F881CAC752FED681CD62F0D19B40EB14A78E77D17F44131CB9F1660
6E5DCFE0DD5741238C6F9CA8A2ACE1BCD69C6A0373171D80CC1900E73D6E6535
5D05716A051C7E9CED17DA303A08ADFD826BCFD1A2CAEEEAFDC796FE6DEF549F
95B365C12D5C13538150AD313DC7E5A781C890BD3803F989CD798A4F984B8FE7
724C79147D711EAE6A7530E1802B53D16F748D316199BEFFBBFAFBA1B79092DA
99939FC1F1CEE28CB8692B6FA7910E58B5AED33C1EC996059B3FFA83273B0857
7D3980708BDAB5622E507C9729EA1428B7604A3ABBB955E87C6ACD7EEC2FF890
52FE91FF418997B0B765E66BB434D6AB4F4C479ED2755DD439E44C4BDC5801F6
E432D9C25A32ED3FA5E50E17F79FF87A9DC2D1D67E335CF1E7BEDD83960D0F36
65EFB271AEAF49B3956263E3F99480CEDE85245DDDB582944E6579F85B3211B1
1A1AF75E4A4A5979F952D1C35548C9016EFBDCDA4776130622390F588370613B
9BBB394BA57867F43B302CAAABE77BFBB1C065FA0A3F328ED8E129D8F6E919A0
220DBE8AAB40B845878BE8E50C1E4C417E280AAA6E4514873739CB7D25FD8E58
4ECF403FEEF7D2CAB39E94975D3E027B55F4DB3581A358FFEB3EE723F4FA85AD
940E62B2B439340C7B73F770BBB0877CBB53711FBAB0F788FBD54683CE72F8CA
2EE98B48ED5C468BED476E6E02DAA618A6FD054C36A594EC0FB173F6AB523805
E61EC854AC9AC353EE18AAFEAECB79EF83CD510691B95CA82E293EA3DA649EBF
031DF5AC75BF0A91BFE207DA57A495DD60045393EE02BF5D3EDE8BA081171021
D660598DDE71B45AB95B5CBF058CE51134176096A4122CEF8C122302BAF5C462
918B7B6A064683D40A2998D29B4D82AB7DA0D80062365F97260336CB9DCF86C3
C0406E7254FA5D0738A9C3C9CC13D7311CCE7EA152046B484E44AB6EEA4B7CAA
DAD95627627C07CD43720EEBD1166EEE12DB80DF5F63E049328E92E4C868CFF8
C32E4D4002EC4AFC4F5C1F8741C9F261CAD43F93CC17EB6E700E0809C6329D70
C6375F110DCC234AE7B42CAB6DC92EA998F2E506E829A132295F6AFBEC40F606
83BB6B13C08950F8834C8F1A61EA69F3C3450FA76E8170C907EC352D4F8E010B
007E23D698EF4E80F25977E03F48207ECCB6E2020FA3122DEBD7D7AAE0F12855
99EEAE54F95D901CCA1E2E537B11773BF93C1C2366548A58F42ADB6AC3DDFFBD
1B70D05EF4E2B483D45EC2156DE9B0E681E4BA786CE0934DF0D7B5571C5544B2
2C580E8FA884847111CF176EB96C8521BF515373F0674D98F9ED7E79E23346AC
5EBAE038D79832974A5C7BC8A09B596279154F43074A6741F852CDE40530A95D
88D43E178BF13D1904A36AD9A8C206D565E3335DB058ADE239B1BB74412C3CF3
1EE655D7A4368CF3BBFECFDD57B3D5AD2E70F81AAAB9023C0DD06F2AFA67801E
596771D70FF1C0499B9E35B46EF31E4D4CFCC823BA32C1FAC80B6AA233B5C34D
988B9AE674F9E9FF16B0240E09DC27D83A437FE6A374384147930C9ECAC1A1E5
1900AB6E12671400A1CE535213FC052033693E71FAD018BBC777B7B6653BA1E2
A692C6F44AD30619F110CC8F78DC18E969AF287AD641E0AEBAF6BC111342B0C4
62078F0A3A7EDACF644E3D6650CF477F60F45F848AF6692118B684C6BC5E13AC
1866CE193A6ADEB91B461C2C53E195BAB8EACEA6A9A12B26076FDBF6D19CD0A8
87DB3108F2C12857DC6EFB871C0C3711F53FEBA98C07B5873C0EE9E6646E376E
A03271A965B60FD8ED2D86731FBD60D833FB091E82A50E4CEE23D5B29D66212C
78AE201919FC0A9B447D7F1161D96D7EDDDD5D8C44AB27C0BE708E5BE580D08E
445EE5C08B07E31BE5354B6756A2E7FF20212CA6E6F9E209799179EB2BBA4519
9CA3BE8F21D539C5DF6D4ACF0404DC5317E57A3AD325A722D81F72B3FB9134B0
3288876EBC66780F5F5E9B2DD4A1ECBFBE24ACCDC25712F6D610A5C535063BAF
7D98D9605967D579CF04D3AB4E37F23B1C33C04421C72DA86914B6B34F1E42B5
7D26B02D5BAF3CB1A39A6D5A0A1EDCEB62EB13DB62E7C73D401A080CA5166B9D
0A3680775B2D2ECDB43E6826665249AB0E4D5A8331B0E8503013E02EF5F229D3
AE58D843BD9FEEA6D7B0A3FE53704F88853221F4E19D2AFF0E939CFA92DCE380
AB513122CDA07AF18508499DCA7908ADD4DA82F7BA0AD7640F5F4F4DA1B7DC1D
9CBE268AB436F4BD01344D1CEB6361C02AB1BB69A7CE8E5F847312B2008DF47E
D06DF08FA6E624C149954322397497330B1B29DCC96DE17215516D2721FFD795
5F586E9246F696E16DCE8E8908A9F1D164B21C16E217A7CCB313B36E3F24B07B
D41EBC7F3C17381DE0CED0A830A5C4BCD0DC772158884EE11065E2229800B26C
37E0A159E55883288EEF22D3F0E16E72C77A52C7809726E2E50AAB998AC30557
DAB353D880B5ABEDBC1BB95FA49BDE02AF5B0AD808873790515E87FC66979E4C
6B8BA691D55C70085B14855D321E9B1BAAC720CE762BCB8AAC16B8BED3183D65
8DCA8BD6618E3043B0959C2CC1146CADFB6611AF9F9A9E9F30D3D3B36569CEF7
FC075FA298B015A6DB8AE579AD85651D99A0AD5EEFCC7EABF0688D94E8C99376
8EDBE8D8BDC2ED0B2900E0DF4B6CA47EDE2AA30E94B3AC918D9F8B6E6FFBD88D
9DBE179791AD20F3E01380F6A7DAB0F88041DEF07B3CA0899BB72A938F9EAB19
E4D9115BF70EEF2E321417614D374F9DD6FCF5E0EE1A00FF93AB48C1AA8656DD
0E3E7CAC54E05F9874C7585DBFEF3A493F233367BE657A7E4454EA40462E5F08
59E187FC6C91EEE8E468A989897B29E0D06D166A92BF2803590FA73D7FB09890
78EAA7EDD1B8FDA9C48BB1D551C82BB3E0776C0B551990E8EC35A6C18A7D8628
47FE6BEF08E390F326A040698CB1BFD7B38B4B56ED25A4607261114DF1D9FA92
C9FBEE5BAC156E767E92BEF4A2F4632010315D93774DE89A102D705DFDB5D7CF
3D86DEDF309CCCF2A0C6F01E7DA201FB95A039FC5C495E1DF6E99B3B7EAA4E4A
4A9DBFDF87EFAF21CA20D7FA1F5F1F0EF7683C5CF32F5DF3A2967F40B171FC5D
826B5328F2F577AB86FDB8D21E871D8CF7E4CD7AC4D4B4C501E9AD63DEAFCA15
CC023EFE4E952F2AB0B45435DE54B8D8202E9E25EBCE0EC41F0BE40092FC6D0F
8DA8F7484DF8F11B0B9C9674CE6F8424D29F918EC6BC348E3B5DB2CD38DFEAC0
13A20B6A8AE9E7EF47D164DB03BBA11A36E398EE37199FE587F6BD7DD48B351D
513B1FFEDF2550B17E5170F462
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 14 /ffi put
dup 33 /exclam put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 59 /semicolon put
dup 62 /questiondown put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 91 /bracketleft put
dup 93 /bracketright put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B2F8B99FE0F73BA44B3CF15A613471EA3C7A1CD783D3EB41F4ACEE5
20759B6A4C4466E2D80EF7C7866BAD06E2A1040FAF2DE1FD6AFD5FD97EAAB614
956897A7BA8B194E613047BF469C7B4261CACC1DF1648E8A86E926F8702B5ACA
6CEB4E3E85EF23EF5C9C53097F3BF17243B8D4BF0E6B0C5982FD14E4E916D363
E265322DF0823E9990F966A842ED69BADFAC2CD1754FC84C0FF6750D2373F997
362DDA16A0D73B178FB7B67307204AF174AB871C254B8E7CD77058113B702B2C
13F341A972B67756D65C6A9F553C365E20F0BA59F8537C88E0C13F87CEC69C9E
0775F760C4EE10819388782A2CC2E9C000DCBA76E4EFC7B390E50611F3D4F6A9
CE60FC3B742F046E84B4A302F5DB51092CD59F103DEE2910757696C3F131517C
416687E6DF671911BFEFE08D1C5D0B16F9302960E29760EE101C5BDFBA4176A0
260ED46500F88BD388506DA361B0E9FD796196E66B332C82CFFEB7974F9E4428
B82C64ACBDF865B4356C4E2C8E6ED840AD5579B7E08BFA3BD81AB1FAE47901EA
E298F60FFB651A0ADDD1C312033C9D1FD4D0FEE44FAC4B0288339260EA0072DD
0AA168900C492640EB652F4ACF14A4F84878F5EAE4169AF39131695A11CC691C
FCA75087938B15ED1B742607D839E542C965383D5E6718EA6C25512F1532D0D8
545EE6AF47BF5B6F6AD0D9E4429A2C2DB0A08F27ABCFCF35A8FE443907C13797
8759A7C6447E79C614480152107AE498E53B76AEA5549B61C5475A0EB482F403
62CEC29A918CCB798C30DA069C1E3F3150D278FF7E28A719E53D811618CFC182
B66AB0DE0164CA5165A71B5913619B632E5C132EF0798C46F3FB3EF6D80CABD3
983727B7A34A68BB6F74BE17E07815A97BC0AC07F57B55DC943D22973255580D
158E8616EA9D226DFA38011C9CBDDFB885D53AF3052A3B6C7BD2B5C210810274
8DB8760CF67EA52C8B139B17C509FA2BD891B5803E21719BAAA6ADCB2560C50D
B0B219969C88DA1A6548D87316170A909FA8549DA3C67A2462CD35651DADA2C6
C62E7274A4E409CCC494B50DE64CF04F73F690515DB90D9C7238BA4E404B7D6D
1BD31AA9A1CF5B0F58D18B708F47B6166832962FFF74C40E889790D87EEABFD5
09A878CE4621251A2B8F53A807330D55643827EB39C82822F390061817AD1722
20C33A868A61A89BA653C2698E05E0E0735B1E4DE5B23653E0749E67E9959674
5FB6202FCB2DCDF555CA2782F4797DA96C8C4CEAC13438EA9AA5461BF8209B99
9D22800171DA3D8CBAB9DD31F12A21EC6158B3A9F7BD2125EB5C5481EC055100
8902080C0651B9508735D417FB71A67878B461CD195627DF2B1DF26A9AA50E1D
885DE7EF87EF19004F3B4CB98AB145E4C7F0C29944276EC255CFF8334CD0B88D
C3F4205E1CAB64A525C6093AE03D6DF9C02645D73DD74CAE1529E44C07F09883
95464C1042D0F5ED5EA69769C465F2E3B93538277EE0BB74FF3EEE16D6639B9C
17E246146021173341F56D08E0D32859ED7E8B804FBCF7CDAE65B317C6D0B0C4
622E336530732286C11756E8F21E80E25CD9ECBD1CD33CCE4E15FC33CA72B747
E57B1CA8E39FA995C6AEDBDA0C10E62BF96C6B7C7882FE818665779401C153CA
B7F30FDE8AA61BB6A1D0581D6A3FA76BB323B5C830443C1CC38ED1C9A81D543A
6000A11E429F134C5D3A51508B5D2E4B9D0AD085F2447287148C94DCB3A16ECE
34F555B7277425490CEA3E22CCCF29C13C88108DAC0CB9488D839D0DECA559B6
237A321C0CFD17E532657A20E24FB60A200C8B452FC529BA01B80587DA902A25
C703A527A40FBEA8377A76F889504F7558EC98DF11197C6821467AD320E93971
B10A234AEA0A8D812D32101D5E35FC6381D2830A72EBA05E3FFC7E1DF10F961B
7C3A381C7ECE20C15660B8EFF936C07B1EC9078E1B444303B33522F640AF0E93
BE0C661FF5DCFE7F579165B096935BB10BA271AFF0F9D518737FFA45A6B7340D
0531B40CAE116FEEC0349350C61447F9EB23D86F1574AE5DD2C105420BE4A5F7
16566CB99633A7C8622C877FFE7B19BC1B32211C20B83CF2EE213D216E61F70A
377D331406743D2E58684F03CC96145C963FE2BD8B71767EAC2594E8082426C6
25F92618B9D75D1FB1B1A9AE5C1C630269EFD79714E3B658301669F5CFF49F9C
53575852E9DC54B02753B7754A9901820C4024B3B3256FADB5C63FE9E21DBDB8
E90570A747600176C8505B58CEF1E62BA777875598BB801FFD7673992F1E725F
8307276787C303AAE8D8A527D938A2F74CEBE1C3E3B39845B043865C106BECF7
70AFD46767B165BE62398C6AB66A894FB83E587DAF6F8C2F53B06CAD76598463
A29F224F2B0BE710A67F03DF94077EC293E3B02259CF6F53DD7E373B06D747A2
EA53B8F6EA3A59AF5F9B8D6C60F6D2A83874D631C06460F5E38CEB935D3D5B99
C2C376C7BDFAA2E74AEDF9B4BB68BEE5453E48139E5D29EB5EB24FD77501749D
3D2F5ABFCFA47C6CC35B7B30E10166833750D01786A493CC334E67D13CC83001
8096609C058FBD8ECD2444ABAA37CDE25DD1325B1B16EB858CF215190478909C
C5DED23F040A366BD4327D0DBE1CECC95FF07E0AFD20D2097D2AB08807A0A2F5
BB6C60C594C39E816906FE0C4405FA5B90006EC1484918110A9DF815FE6D7766
CC6505EA3958251A1301A4A11381F8CDD62EAED660A5B96E72DDE341413E8710
90A9E3B977F9C010089C14AC7C6C10996FAB93BDEC7EFED01F4ECF5107948F94
97B7C753FF84E267466235B7B22D2725E1A828FDFB8DD52389B675C9A112B58E
1906E4038C581CA2CAA5CCA97DE143848E5A287259BCACFE87B8F40B2D411201
3A1372861DD2CADF2DAF4938E4444E890FA1E4576A1DF4CED09B5DCBF312F3D0
ED874A656052737E302DD835F5DD48E6671F6AE2100BC8EF5588F73901F7A0EE
8D654EA69608FA333453BEA6339D16DC233F8BC05FC5ABE904A4058918648793
1AA3F0EC326A75FE114D087B2E886F30E03C3B371B31F4CCADFBF80884D2E43E
DDB9956F9269504E38AA646B1A64E65637B8164FD01C31F72FEFED8D883F5BD5
BC9FA78260A6DC73CE088B19535D31C82953F3D49C055E78F83A9B4CAD00FE25
8F042E7D9E6A281065AD59EE86E14BA045540A3FF7C183B87DD6636826F9D1C7
694C7928B418A9FA1072F00D8FD65D0F5C75831C12A50AA75E9EB13B35AA7669
1E98617661FB444245C12D4D411C06A8C55C609C8354EE4E99193349BE53A36D
0F68852FE19EFB13FA33F6EAB0EC606BFF9A1A2E1EABB2CB1C1A32405BF441F3
94672296BE16B6780F4FA03368CCEF66DFAA1CCA0722AC2D3D66D181A3DD6144
5DA7A3A0AE95F6EA68ACA36B614305CD71BD68416FECCB49F589E5448E2F0C6A
78BA2B4C11721723BE781DD14A12EECF4EB70F53CFCA6503B7489C1EA6253EFB
ACF856BCE403B86C1432BE3888320E514EA337439786FBFE60B93213D1E9B769
78B5C1A46A628748A50E7FE01041A66DF5FB4E5132F4DA99717D8E689BDF5CE2
C545543D9849CE2FAD4F41A82BC312F8BE19B55FE3B7772072D12586AEEEADCF
846BB26547E30F49851F48FC509EFD42DD646BF399BBC9A6E110175A10696786
CA23C43E1C3552A1E1CD0E1EF79DC0434EFCE937E719081D205826353C1D67EC
5270E2B11CDC578880D018207DB33886CC1AE82D5813AF70329122D8838EF96D
6BBDDA945D1666D7779F35B846C7CE4BA6E1AB1BB05ED14924E2E48EC9FE6F11
815FE4B8533F4D34B41F9FF85A9656D33711530610DDD8CC2D46AAE3065E941F
B9C316E5C72F88A17127AFF034A7333A6495143EFD0388830AA68999AED7AFAC
465D4428F06CA5E30CBAC5F0664C4E7192FE1115655D34A725027645E49EE55B
F70D4F81F43957D172C743400430DA59725230A13C6115323E02E840198BE8C9
1397C1B33537765EC77C41D6FE7CC95AD725C8707608B3D8D67F48029A1770C7
F77674802C8858E5CC7B46D48F27A0120CB62B1E60219FC963F4AA1773DC4827
48DF65370DDCE19AE6C6154A83435D6A5E3DABABB20FC8DED43F33D423CD3103
EE070E269D2159BE2CDF1D402969FEBA5F1046C562998BC7EA785E6453DD6EC3
4C4C303FCFF7A9208E0B4BA5D921739568004B9375871183B15E3C66F30D2754
9911E6589E1BBFE3F7866744BBAF32F2F3A4369FD5901D457915312B4F1BA78C
CD82711E9209B29562BD223F215A736897CBD666E52C7A27CEE7B44EC7447FE1
3ECB8989F42541E98441B7EDD56C1462F140110402783ADE32E4715AAB9DE594
59E92689DC6B804A6A4CC4C68F206C98A774E2C78C57A57CC53B921BFAF9BE98
336D71EB098C539E215AE83759CAD2A1D80161A6C0E6FA9DBFFA4F3C15A504A4
FB85435CAE2E20DE5149944C455A9A39FDD9A492CA26F897A2674D4AC07E8E1B
64D05FC6CE7BDF13742018DD750CEA0724098481C84BC2692F302A3FF958F4D7
4DF4453FCE1EC7BB10AC40F6EF211FA267B0DFBA4FB8E070072414CFDD63036A
04DE2D09ECF6748DD248030CC5B850AB02E369EFCEF8CB890080F6DD15AC46CD
437E0B0E36FD60FA2196A9B2CB5A9B45F4FA15C33CE9D956F3B72F3E193FD645
11F8CF5B8ABA1E9A55C0F5B1142A1BA7ADDB4E2A5F35A622B4E1E85A71AAABE8
DFB86768775EEA9496F61F440E1B8B17E5D2F71F9D592DC39E7CDFD5BB55D8AC
F2C7C17BF748F3C595F82CF2AF06F01E371FD60F2B4AAA20E2169970CA8D033B
7DB92084FA2514AFC1C79D1951A2A8868AFF7CF34A8C4479AAD4D4588BC8B8E5
237A12D2998170EFE3B18F2AC2ABD10FE455FBF6ECDF90FFEB457D9BAB0A146F
4A574705574FEEF6688697A762480D4C54E9FCBC6ABB2026107405EB845A50D8
6A9384ABE0326E666D13D5A30AE19661C16B41A6ABB6CDDBE7B7A5E6DFD79AB8
D6AB33D5168C0D26771E3D122C73DF98115060F0CA5AE66E224D6EA3406C26D5
BB77BCC321619F4800CA98839D238193B0CBB044BF304C83F53BF90DB2CEB718
38F6A31BA20E7483394E8ECC99713F653D02578198A80595B8B66BBFA2F71923
44AE4A6C5EA29449ECFCD99CE1826E48501A6E31DA8DBECE5F0E518A63798B01
C215FB01B88E356CFB22CA696C63148233CC775CA18157087FCCAF1AE43A7B31
A6E5B9C6CBA9BB43615D78F24A80D58021608421B1BC62C5DDE000151FA0B20D
7EC6AC7450A9D281753515727CDC1B37A09FC4D57544F98F0F45FA6682F930EE
25870D141E03DE863AAEEBF40A405AB7CC3385BCEE94CEE7D2B27E4A54E722C1
0DE0BB58A040FDD6A723C103D16E2D899A26BE11B9CE5A9C2FAE9951E50522D1
43D95B81CFD5842A89E8418144A2D2E24F132BE54B2CACA1C780DAEF44EEB3D5
94567673816442D58EF4304A706618E62449ACC841790AD0A7319A5874EAAAC1
2FA842D21E7590C0BE86B87A3918EA75A3F43703369D6DA24984398113B0C81A
9888D4B476477E2650CA4D106E1B39EEC778488AD4B1B558974572B3F5A657B2
763E7389B9444E9446CC5AF6487B843AB8138A56C231F03838D0AE61B2D48ADC
A06FB32C17B99898362BE27562C06B02987970B5E692E0AEA32BBC100C54E211
5A923099A3BE581737419294FC237B6339D6FEB799F1F4BBA35C86878E3CFFC2
92E75BF3CF21FA814D88E8B5EDCCE15398ED83CAD9EE4235C97B9C23712B04CC
2BB1816C710CFB5D1F1F715C6BCC2DBD7CBB444D2369945DA2F764D85DC238FE
D1903576A628EC2BF8A2D91F286FDA95DB5BE77DB240CE85E89E0A16C62284C4
37DE9F8F8994EBB731A2C51E779885C93E13987924289E93B2BD559602661762
346BE2520BFA78E334BDF7373583D3960A7A4EAB83C09289DB29CF6CA05FCD2C
9DAB1B5F474D0D90146D4D7029730897DCDF88ACAF9E21D75DBD74B2EE40C072
4DE4072992A246E13FFBEC5AB9AE490590E3AB9C97B2725E202A3F989B93CFCE
2BA4B6BE9F0976BAE513B00D61720E8E1C0FE253B921E10E718144068625F658
020381A55ED02F6711889BE9E006834C5C561CFF848C840BF1FCB47DE4DD7D91
EB58821ACC5358B971A2DAB61BB50DFAB53FE86D7EC53E923E6FC8F41F42A22E
287C09E04BAD3664640C5E4297FE0865F0C375F1DF5F0DF84074D331D990370C
D7B09CFBC5BACF6AF14E8CD84B5E80882A49EB928744728DD9CE751209712E11
D213C0FFD5A0E72DBBBFF890A2801017DD5C3A219ABD93FD68C19E6F8D772763
59863FA44EB58631FAF8224094D3EE76EDE4BA60D8F3F621D194218E06276323
89C947D16346B62E4B41E2A0698BD76E7B3A0CA297E2ADD6FEE6B327A4428D3C
C3B2F80BADF50EC9AD9796B623DF1F4B50639ACF6329958FA28F9A4E626261FA
A22C057B3E7C917D8B05FED94B2A20D79AA111F3DCA4A5A42AAEC2FCAD67C45A
7EAEACE26162248B3082EA1BF29ADD9E1A2709F097E4EDC1A8F7B6CA43DB6E2E
8355018D857C444521728768726C7916CADB60C8C269A1DBD83E80F8D401715D
51C11C824776DC41D1E3BA336FEED80DEE147282DE8BAEF9673A0A81EED372F6
35080A1DA2B07942F289937EB838924E01B8CDDD0BE7618917AD7D921CF313A5
B8CB89CFE9B1F138C93D951760115A390132227ADF952EE1965F4248F3C8DB56
1FF4020685DA86DA60836E754A82C5A30C2B232FA6556308FD5E13CB976D65F3
693C3150626523D8C9E808F0A6C27446C6F82DF37BFA88FA58F3817E15E0B819
85C1DE87636A2C4AC7F82DB10D41BABC63CC1464D347CA4B17F287806FED917C
A058DAA2BEF2A2C29FEBAF0909932ADCAE999BC28890AF6615F62025340838EF
4D5D3A58BFA95C5026845B778A072E2CAF01A76C0A5BC6407F454015456CB5F6
448B5085CEE004DDF7E0DED626F32BA1EE39F9A7A6C52ECF9CED6CF948C6460E
B55A895C22F5D1A70CC67D2033B3E29CC4DC357A75CAE8BF8338124A2E3CC13F
1C27BADADA5D290917D4399CBBC46B13BB5FF3F4F1DFDB8DDE1F07DE019E4ADF
278DE9C1EE3B67510F76C27B262D361ED0F1605F08F8F8F33F4859F39F341A3B
87E7E211D70C31359A0AA24ED789A97D6D954E87879C3D6E962A6DACFAF15BD7
B44B95ABF5C81A444724CAE21C0FBF947FECBF68FAC0DDA5DA9613F37F77CBA0
D052178888B985159B16C620E6518B95F1D332AA880B587C40BFB8198FC319E7
6CC47BDD3CDF751434023AFA353383019FD6066651934B1010D565FC3EDC727D
B6F0BFB9AE7D6837ADE117F442D54BF6F597FEE67AA98C8071A24E766150DF73
54F7A55BE342422F48EA86C5AD7D8D39F8C448CD13085CB743796CD4B005E98D
A391A117BE560A8B585F6368CBC71E64EF3AD7B186813D4845D7C185F3DBAC13
44931696AB20C589A614AA4626CC5987D6BA9E55AF73CAC2982D4223564F87CF
06B31EE45DC0CB2D100990582C8212D839D44564FD28775FC2C60992D52270A7
D3E48D82B08D1ED5E641BBE40FCA493F116A961692A02FD896BDE8D16F9FCB16
29AA0D95E99B1BBCA091457D2BC55AE49C66BFB632982817E16449996DB26A4F
C63B278C836DD9072E8AE1F498596125085FAD32648AAE1F3008C87468DDCC38
7D14ABA71BAB34081678314B7BC9CD1AE4429AC557E23720DE0CC24878B31771
436E0024D74B2113FCC351A90BD6BC6B6E4A6188A08DA5E326507075AC89FC3B
D436CAB56AC67EE70402D2F3E6741803A16C100EF7337B8FE5AA2CF67774EEA9
3BDAC4AD670BF0387A7CF0C74C067DB52CFE93D9ED403378761A5FE14C776CF7
161DE903EA8FD34CB34F1611D05347782AFBB4F9F505A055331A7C60A0A31065
3E027016E4D9C71C7441966CC59973E919DFC0A82498FEFB6A837B6BE6BCB2F7
CEAE588FDF84C7D10D0C5B3FA6E9E08ED0973DBA325C0C15ACE2180E420D1AA0
39AE8A88FB0E4FB141819C93CAC37B53C6F880574220D1CF89B438317A87B4F8
C8779AD25D42FB3185FBF44825DB97C7944B05DBFCD00D904E835B3720845093
3BC42E574F4B0C3331454C69149AE8659EA10B0A4B8E26C4A2C64EBFC32414B3
E9B9A01A793618043333669C81C57EA8983C17A7B532D279B80A08F93D808544
FD98E9DF4BC6A8D0639D2708AD0E602030402C47AA1F30B60770B2F423B8E2AB
5215F25FB98FD77396A280471354A41C8DDCED7AF3C509067B821E32D9901D79
C52731B46DE3FA6C811896B0E57D07ABDC3807ED68FC0B7E0A7C8E399E4E75E3
BB33483B331F4C5DD15147A7B26417F0BC1BCE010777F2ABC71010F16076D797
6B5B4AD892958F4D1A1999313C81E27032F0D694C4FFA2FA7493CF401FCF1733
A5425F7A6AAFE53E11B8801814476014098C29199F249983CDBB276C24854A61
21BDDF009CAE27B89BDBFF11E5C29C84678E1FAE4AEBDF1921834DB376D2AF6E
47B6A3222D10AA51A5D040E56CFFF83D7D3EC19BF2C5BF58A68B222A699DDCCD
FF1A6EF7B4BD42F55D3EF77A97A5B1EB180FF14B965EDC2A51A7688395E86932
B022934674A91507FDD9FCCB071222E2F143F227E9E8583BD0204F6691D29FA9
DE18BA2E0349945DB41E67AADC442AED0FA408CF5EF6B7F94BABCADCA761BA2A
C354071771A23EB15DCA267226718F33A3AB41F401A1ED0E7C185D293E6EB40C
D2A6F21E8D98B9EA6B088F73EF93B78C1EBD83035C9DC8F7604B332869F8F40C
40AA0F22BEEC683CC24A1CAA6193B4A3EDE46EEDE5D4AB856BF24F9206EFF917
B452BAACF64AD12A433FE74B5F160590B97FFCA4F85B5AA44AD55D2C23E11206
6C4115DAB36CCB52BE93E6A5C3D2A96FA24AE3813070A1761EF12BE1CDA0F44C
4E36981A036EE818EADF8759F4EB6C3CB766690B8044B2D7D41526F7E1382D95
29B086E722EBC6B0EA567E076C16B26995330274BE731A3EE6973A2937E24011
932133A923E2D71395F3B8D7E6CFBA337ABD9881E3117862C6FECD596AB90BCC
4BA8727537D36591FB78F4BE1D801AE46406A1EE48BDD838E55C995A38B0AA44
23A9E11A59EC773FF980DCB7483ABC1162FD1E84ABEAF62610A584A982B2FF86
9EF519DFB2B3B375068DF9713692AB3CBFA61D84B36C8CF77BD1C81286EA1810
E1E2A3FE9771F70BB2B7917277EB5B67625F2DB83D0218A7C60900489501734C
17F9832BE06B6F982115E3573191A22EBEE2F7AE7AE585E55CCA4D5CFF84FA47
DF2421C7C358AA127056FFEB8D7C297A75FD0CB75D6B1471C589E754C3D974FF
61536DABD104C3F2ED8E5C6856EBBD08ADAAA0AC81CAB2E4856448743189E412
55E831F709B3AA29E9640FC8E8B079AA49A70ABE12FA6F28C01D0A4946F80ECA
7FA24BC4221F2C14F489852EF1E74B86C8917F0ED001FB0862103307B349CEEC
301C481CBCE8EBB5C2C736CBF9BDBB0B9471EF7CAE41AF32D80BED162A657FC8
44453AF6C5980550E5D9474B744E40EAB2039C1346CD9F6D13AE07401B5058B1
95EBD321E87D81D576C3843FF4924A68E644E473C21ECE139644FD3DBAA7DC4D
D52196CA209BB1F01830667537E8615190FDEC6002B507131DFF34275554EE34
DC86436FF59E00A63DE64647A6AF190916D63019BD69072F775CFF4FBEEB5E07
76798644B1DF2BEF00A65C4CF76157B1465C4D1CAFFDE33E6533B8C4BE93797F
403A2A37FEA53077E76383A8868B936E7C91CA21EDD810456F2BEB61D133221B
7703E86363A15A05A6ADD590CFE64E1E03DC23AE691F762E1C2511D8D7031FEC
83489712D3F9E6411EF0FD44ADCA64A073F646FA4699F30FFB26860CA0046FFB
3A94501EB717394A59C0208C1A8643B07A74288FF77D9B43BAA692CBA77F4AA0
598F81AE0FDFD53552E816BCC40B487EF6C31D69D80A1CA2DD1BE9BEAF5D8B85
92411D804E73F6A3A3154CD4073DD1ACE4E65F9444FB1E09B269FAA3A8763665
DC33F0D083605BCCF584FC0570390602605E6C5FA882A7A9AA2915866F7BD2E7
12A74162AE4746E47C0423968ED07A6951762CDA2AC52F0DD764C7ED7F591866
208B3F7604FF96A7A490A76D04031E7EF61C83D4978B26D7F784B53DFBB3C5F5
13099040913E55C0ADB0FE2E727DFC579B15832822EE91823FC90FF539AB5902
DAFFD9B8270761D5EFFF3BB2CB702BF9055C7D7728AAD46F1D1EEB18A7BF0BB1
11B597782AB07C4005CE8E86A3F463668E2817FF4C26B6706C5BCAF0A0AD356F
158F081088D1364F17BE46FE237585A458F7D98FB895EB8F5C6AD39F3CE472FE
1FBDBF28F5276D6FC177A9804F6830CEA91F9C8FB6C930A989F91E1793834312
EF1939DC9CC37C99B2DD84D63D39DEC86B7B659B8546FA575B896E06551AFEDD
84033A596D6CAE6E191A3A13FF5C10740911DA5F153AC3B12E00DD486B868647
09B5E738CF614FC2B092A3C573023616D9D29CDC30810F0E021C5D2BA091EF4A
963FEAF65861D4C6F49D09691E24FB19516BB58CF07DFDEC79BB75016B59072A
B728079102A9A25F6CA5C8B49B6D19A3A3B84EFED7B54C69AC26E418B8A58846
10E1E70B5D18EC159C5078F2BF6E2A77F400EA0C4EC8164C3A90A697D860C4A7
7C970AFC4B077396129561E21603191A5926D2C6BEDC6861C8EFF1F587A83536
F27CCA3E9CFBB6E910F18F9EAAF4524836C90F941E1613ADAC35D4A5805A5100
6FD92761327075D2DD5BF7069478827603575814E5AA80BB5E1B8C62139F23E7
D7CE5FA6CB414A04309AD057E2E5FE2B25CC4604BAD22B13BCCBA9E0D126C594
EAEF0DDCCE603275C047017711F751F8C06F2E3F5277465C1F326732000AF753
6AA2EFEC17B2C37E9A31629A5C225BF5C560EA97DAAD21900AE057D687AF7777
E2CADF859D6D01BD0B221AA6A606F7D2046CA724FCBCF887603AC6A1ECA9C974
5A8C647BB06BEDBEFABB11E3D0052E0683A10F7200EC35F986252CA8C58C0575
2581FD6F535FF41645F6236629B2275319348DB3B17480DF35A19464F578087E
20841B7A9D402566FCD915FC4965966F7C06B05065FD652F77666D64770B35B0
B44F9D280434EBF5F1F06B7CCB513EF1F8B3838B12857A349F5F75B1C5E384C9
47788F783642EA5AA878155CAB5773E3EE18B003457F12559C8586B61F1443AE
09442BC1AB28997C64001C420D8B87B29CBDAAB9ADEC8DE2B1B5736DE8242027
7A4B07569301E95F7D8445138C06E3ECBF87C1757D33B40DE662A3D5B3AD4F1D
AB5D5E8B0B19C17A725CF4C36EA3CCBFD1F2A0BCAE79FE9670B38BFFBC3A941E
BD5D4750535BC994310646E148F0416395CF7C1F8336AE5497AC6BE83C2CB596
09923EB809EDABED0F212C8CAA334B0DEFA169B6F7A7B4483B634A472E73304A
2F726BEF8779885A52FB5266764258A4472EDB926EC8EC4F06F16C49745EDBC1
D63D39052B20901377D9A45C39D77D8D93D4B1E23BA47466597175C62F67565E
4507BE024C2996C639DF2E4CC8304255715A504845E108EC9443930834AA1122
8C9932F5CFA705CD7373C9E65629FF4F64C164231481CF234E296691218CB679
90049155F6731018929067779BCD76EC6D0524DF0F5702FB07E49E0AD7044073
1AD84B1EFCB2BB26EE10D1F94382157F7DC147241CB0AD5105C3BCFAD6C68334
7DAC5A46E29B5B596D5A091D83C0F71473E436183E77E1FB358C16C8F862D9EA
31ECEDEA06714EF8E58AFFC96151B0A41186E009A26D6A4147B9D6E622B194E7
771BF22E7E0E54659B7003C78488554AC8F0E5B37BCAE97F00047ACB6F3CA979
FE82ECA89C271CD4E6DEE261296A3CCE48F77E88E2F2B1AC6F21780ECF72F44C
96B763F0310A21BEAF0D85537685AFF9B7B2CF81088A6D446F65F5FF9729D67E
827B64013E27B8DB1B46FAFC50209879C0AD4F616A3F878F3C3CFEE1A6102523
73DC006C1AFCA6A50C024DB8213F059C28ABDC02B8F1D533E7818A9632142FEF
5486462FAB9F95B9B790AE7341D90A097DC2C2A8F0E036CCEA969F198712F025
83F3E0DD90F37A926C91FB72CAB8BA5400DE83771A68811141F47364E3B69EDC
57F33F1E4BA0BCC275826748F7F82CB7B2E6D6EDA4B3BB75A814678AC5F3E8CA
E45D21A72F97882BB1BBA6DDAD7F98F111F3DB441CD47DC1BC6B32BD2C8939AF
8E54505C1FD64CC0240B522DF2F94AD5832B1DBAE3F568E6C3691BBE6F52B8F8
AC0204D1F9F8C2558B75CB8E53E659047F3D0F9B15D6E5ACE5D3367F83F244DD
5A6EC3519F8A704B6A269BBE45DFF0CF2A829F3366BA2DF6D1416ADB0794527D
E65ED6B0AB430E35E577A8DBAD93FE2B6592F023986FF5207F6001C061D0D4A8
3B4EC259056A01CB23A5C4EE6A4294BFF285486A5B55E71712885EA6ECB65B6F
C8E4788F70FC63E13437CE96A0D6F80F45B181A05FFA3464B49A7D5A9438A10B
9C125C59EDD894119E95FFC76449EF1D1731457305ECC38152E0124F1DDB34D4
DB567EC5423631D63DAD7795DF82E395C1751FAE97F4D5F700E4EB5957CADC72
BC22F39200BBA945F0C4E37F75C557B1838647A46E22A58234975890988FD967
A76E5EE991A121B165F113EB4F21225C1936C31FE011122A5F1E818E128FB27F
F9AAC826CBF36D31EA7BF6823663BDB516B9C1DDFDC10135C57A4F56D078CA7A
80515A064CC70E334ACC914066094C0CD2327BC141A737FC807941D750640FED
82486A2D40AAF3619CCDEBE6219D2242F189E1790140054AD5C1EBCB045DC00F
317F961D337097B3471B6F3CE5FF84FAD41EE57377936FFE9BE891523013EB47
7380911D5C2D2A9811C4B9D457B6612E62F06DE9CB4904D05A99F56DE5C6B22E
2A003F13A9C0243C22866E490A65F2C42B19AB6A1BCDA74D87DBAC6EADB509B5
9ECDF257638513A9B524F6639D24C271491AE6B8069A4DA22149BAD8AABE3D6A
7789DCB0A616D73A0CBCC48B04F03AA5F18BE98A35081E35807680A15A4D5484
C05CC9883678FEBC2CA13A432D228A1F8BBABE39E20BF97E45AACFCB24BDB44A
3714D28C63F828148489106712420BFAD7284D785FEA3C6FE9D56A7324270F4B
F6C7F5628D82B919148060DF179FF9894AACCF2A9C2F8C0C9DBE8E6DF3EA705F
B492A2973445A8A1DC2D5981A18E1EE8DD95ECEBE33D512912E5376BD63028F5
189E78C26E40A4EF6498819A1E77C7BB7C9126F85A86419B68E42C7A00955152
576619569382CC2472D68A530352488D30307F3D4189549BA1257B7BF719118F
7F60AE098CE1833029A251A79FAE35F35215C32123B666A46E228C77C82EFBA4
5E3D305FD47FD0D05D8A3174C79C282866007FFE80F2C14ECDB1DE54B31C1E71
48A0DA753F0A7452390761BF875A3762166F844FD8F3E1C7C13E7CF122EB09CA
DE5316B0F08AEEC438CA651AEBECE160F6E6D09146DCA4C4D6756FDBC6344E14
529A642AF5BD97236BF498B31030961E68954092A1A28CF6F78DE325E253CDFA
A20E88C5EE48DD985A3172B461633F0EA9D897637F699979C42F6C0C000FDA89
3A5A1790D5E31F9F9135FDA08C4F3CB41304C45641B1586327F659523C170A11
7E702AC1126901BFD4E379CE97625287DDEC019D9943D2FAD7EDC6F8FCA4C738
9E81B6B3B7D615346E761B414570B1817C1B5DFBF0FB1F4C136BA7170ECBA0FB
3AF27B4E92DB9493AA4F5804D83B4ABAC27079CFE2FEC58748D7DCB577BBFF6E
A52B1CD5566E42C8F595CB5FE3A0CDF55FF73BF193A8A7BA93CC55BB56AA6C28
8F98D693532747C7DCB224FECF80D4924C7668DE966512937B84119EDBCE7E59
B18148348F5E7886B3BD624B0D6A60F5E56946D5067687EAE8BB79523768D1C2
9D82E2849DC505D1A29DDEF26BEA28A0303314FCED128CA19FBBE467872ADD30
9DB94D8DB033C9127E12C8F4FE8D326B887600312D4EF80C55CE620DCEE5D8ED
5009FBD3B9F5440F3F405C9D1F923808DB32A572B99D23354B83B386D66C89EC
1E09AA248EFE6D5B3F2FA8C13CEA46A102CE84AFF1FDD134A0BC3216D46082E2
1E0D1EBCE07611937D612F2651AF090D9473E968A3524CA996F5103FF99869AF
47FBF9C6275E747836525BFEBB043BF0184BAB2FE61106F8ECC95694CC9ACB49
D5C09E44533F27F5BAD71B3D551C9877B139D3DA8BB48123345CAB063E8D37B7
1387E29417CD25B5DAD3857800E4DC153C530B4E3B5BCC6B880838437AAE2EB2
8BF17A0197707A9C8CB77E611E5193ED681ADAD27C1F25D35D9CBC1F4E9E375A
55705708B5D5B96988E3AB263C5E8BCD42D8CBAAEE6E405A774BB202842E63A3
4DF410E3190C606D2D659D710AD83D8FAC9F590B71087AD711854F8F75557EAA
B9D3DD00F7C575F42EACA92753F39ACC4BE68AC562EBEE0A7C35963140673E67
BCAB66EC97CCF2FBCF7E2274FA39D2681357130FFB39B2571FAFA0245E0254D6
F416C9ECCD12C27F1380E23071261D1DFF7A0F67968CCEBD1783BE872EB92059
2324AE567320E030BBF3CB9929DEC49B9EA80522F4FB708E001136828F336142
54D5975E1BEAC242FE962557072827C2B69C37B20EC372656BCE8AA4842C5DE7
A61A8040DE6F35EF8EFE1E1946B843D06BC9B8667C69938B6D2FEDEFDA832D04
51CD8FAF87BD537B5DEF829E67EC708A763468B57EE2198201E6E7FD83031D0E
22B522E58A3708DAA982E7ADA2A95237FEF536B508F85BFAF71933A14D372F89
76A71D32E57C61CAEDB420E7409750D2D3D8C33E1C464D48DD71D45C97CBB7D2
831F7468D1FF2A2FFF0DE2952F77B9C1A5709704DD85F54C5BB16B44B2601C33
6D4D0603610EC31DCB4BFEE84ABEE989353D17A34101AF5B21A11A7C01BBE371
C266BB58BB1185D87D2CFDC1A8C98690E12DFFFFC1DB09E1228C437267A29FFB
57ECE20EA4534DCCD4C3A8F23B67FD37D213F5C4C0CAF60D3A8C632FCBD5EA88
E2776565CD68F2575937073FDA5C15CDE9A9D4E522F85E239444B3E7883E06F3
12B76FF3989B3A35CBD59BB9CB68236217A45E56472F38A5D9D242F61A535747
1C90676161C4E4186D27719777914E2772034991199A51F2B7A59A2857896E24
863F2C95FD6CB7B42F74C5CF94B619E3E43E3B6024570E1D77436BEA465ED0BC
EF7ED7489A1DEB30A9E8FB07CEF990246FFDD4907A4CF91DC7A1EFFE7CFA825A
5FAA053024BA63E088CE42E50A07BDC70022AC96614D50E47F6F98D0CB8EDAB5
587A0574DE13FD2013289D9FA17B17CF865F3BCA12F13BA62BD73FCE050EAEA0
2F6038F136177317802AEE3027A3D6E306A9FC1D9E779017DAA901212C49B9B8
F20D4DC4563A5752E7CE6E9A87422639EA59C125FF73386F53083DF08B31155A
DDCDCE6484FAE0F3F42EE50BD96232FDC13521705E0B453CF6C9F63DC2BABEB5
808DC8DF009B187401FD5F45E3D57160864DD221E6EB9254E8BBDA0FFBE8D45A
FCA10F28F878D5C3350D9E5FCB683F55591CF83FD06A31013CDF332002B69FE2
2B6F5DD65B927EEBB19DBE1992D1FE950DC65DA5FA70483072F9D2276E57BEEA
ED35A203C836D70331B3A06E74868FBAF176285C826B02DBE2CAF6F9EE9AC3BF
43863D51C6FB50A7F11F514B7ED06360D6AC6A50FBF5974E99C5ACE33CE4E3F3
2E12A93C76D9D8E0C6166D43BC5365138F125FB09A0279F741FC618E694C9CB6
A851B0BCA9AA3747510C3E7B081797A9A948ACA8B2CA293E82D2DCA64E8035F6
D7557CFB6F6C320B066FCDB6D1CA888CB85845B0628CE934BBAE5042F8A524CC
B582CF74BD0D022E2D25F574A4D9928D081E282818D50C0C6450EADAFA28E061
65021C501169903AFC5F39F8486BFB84FC181E34C4A115AD5EF956EAC6F10AD3
BF3FC1391EEC5C562E03DE42307D31ED295EAE804E6993542F72FE041FDBB58F
B9190BCBC713540E7FC50677A0E67D3AF7DCECBE6DBAA1149F1CC2703D402B01
204B99401F23D97E6973DB38926F36DDEA519E9D509C3C23D9D4A58B1889BD71
52DA7C2E67B2261C07AF767A972C80D75DCF18F2DA0E1342B5CFD4515F6768C3
7ED99D3E0817CF011D07FE4B8738594788519D99BF15767D2A53BCB70CEB4954
E478F0D6D9C465EDD8359C3E004BB62B670D03227FC7558153D7E80E0EF6EFB7
2001573402BEEC4687E1CF801913D4E1D9DBDB335E1CC21EEFB55B8B70FDC77C
A350BE82C1F95E757CBD754B444B28E6E28377DB248C8E614602D2D22B0B0520
D2C4D8551969189F17B9C413A77CAE6FC93346365341E87C33D2A0C9136197B2
8958A250B5338C2EC24BD2913A07C3F9B67B4A5D3F929491CA0B5822388B0F5B
3FADD3AA151B06491F96785BF8BE8D6DF444F46FBD50A260D183DBB7E3059151
48DE4B78F50A2F5B4C5E2DBDBCFE1AB29F9BE7A137366164664F38693FD6EE2F
5A5C1FDC53C9B6E37BB7C0BB790FB576D4DB5DC4FD16386C1D3C50D3725E0FBC
065D7AFC0A567FFDD9B74CDF6CF5EE690BA8C0998D545F048058017866B77B96
EF0E014FDE508C190B0D15C65D57090C6D8DF06E81EC0DD780D7CE5C432B9507
33DD505B6B6A64EC4A1E90587F3855D385C3405085277A3C65E66A46A3E10837
B4BA5BCF905D8D37EB7FC0C0B1454415FB10582590DC92A070C1A35DD7C01BDE
EA017470BA675BCE3311898AC3976A8F4DFA97A33A30BC26A862522C352D91C4
C0E10AA9BB24C85D00DBA13D4089CE4C19C3CA376B3162BE95BB503690415D24
BDDD0D61F001CF5094EDF5DBB2E84925DD6F5262B4D872AEC255A236DA0B2BE8
A87D7073DC679CDCF5147D903A6FA0312AAE351CCE7912B84A675AC58322B665
2491D80A43701BDF5DF998A9EF68AA7416AF7301596B15470369F2BB156FB720
442361B7A65B2A366A5F83C78AD212714AA0EBFE9B79F845C1C4778633B393EC
0F8CBA925ED1D28FBC297474AB6859AFE43ECCD9D42193A041A6E10433ABEA58
A1DEF1B109D67A3D7AD43185FDC1874376F42AD2FCD1DCB17A5DC55468F75369
273DFEDD0E6CEAF5B138BEE52959050C017BCC62DA905A68BC66E304F27FB46D
7C8683E667E5D943D55BDB85A37D670D0C53CA3A651AFD0E1F2E38A92D7B3B4F
3331F0FC761533C99DFB7C07126A98E32C6F0535D25A168081FA799EAE2E1FC9
3F1E9876C15BA0DB46EEDFF59540C04A073D81D013310F08F018F26CFBF21B47
65B056A265D0C5574A575E68474CE08ABDACA1DBC045B656F35CC080E860B008
055F92826435659955B8DD61908AA4BE65947752181B5BC46A05BB812BD43CB0
58196642F3058464099230F445B08FC3308495FBD672F240B3F9FFC648EDDC77
8FFE4D59B4A04F9CAB8949CFDB854A858820C18A976F7575417F98497D36E97E
2C7C6D6C0494D7FB2CBE69E68DB53F2D78C94275F27C614A1967309378A7AC7E
5026A6E5FA27F8683C20C8386D3B12D8E0B09F0CE8F9AEB419C1EDD3A26BB7FA
0CD75D86D005D07DD84871A0074AF0FD90024BB48D2D4CFAC53BBD457C5C48B3
36D27B126D4C117D08D6D9EB0EFDEB429514F351E79776E6E5F1E47421306A3B
59EE77A1A29D51A2BA46F5DE81F4CD0C10797E0E2A8277B4DB367D6373C5E2DC
53912366A12DE87B34E651A064465A72B4960D52C9E415D28E5DCF88ADF7AF89
5E8763D1FBA4FD14A6534E4B0C3920756E4D02859766CD80BCC7DC49F577A5A1
716165D81F4E3DA09CA9F4F0587D9BC18E6941A3919A4AB0834247AC3E33798C
B9936A2802B7CF6228298386EAB61A3B99A2231D1FE72BF9BB31BD74F6633F48
40A254782F96CE73D6AE795C2C2D1C91CA1409BA5E060D29294F924244235627
D8C038B9DC1B4CEC5D05F511EC6289D992656C302733BD92FF32C422F0836053
15FD8E72F13184DE2042F60251CBAB91FEDC8628B9432AA060DE8711D769572B
9C3A0FBD9B4F7C421F634403C5E15417C01FED66C5326DA11848F3DB893793DF
079529A8B08E1290F96E2BB195232F0053F24A0C972963A975A9769628C3DB20
817F622EF0506C0915BB4A1FC8B906E503556460C080CF1F55E4FC54F2CFFB1A
A8F941174031556B4D2FFDC27A27B5F24AEB74679352E4B52E4DB845642152A0
D968361E0591C9CF021278AD2E1DD7867D6822047C526A777D25274229C342E3
DD92D941D234061218DA0F2F712712859EA022BA7D11BD63381E506539CC81FC
62BE72375B19030E2E8798C108C6CA565F77488D14D5BF28BD9AA596D7DA217A
EB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (mywriteup.dvi)
@start /Fa 134[40 1[55 38 45 28 34 35 1[42 42 47 68 21
38 1[25 42 38 25 38 42 38 1[42 9[83 6[56 3[52 3[62 4[59
1[62 1[42 4[25 11[25 1[25 44[{}31 83.022 /CMTI10 rf /Fb
138[73 51 52 51 1[73 66 73 111 3[36 1[66 40 58 13[137
21[99 13[66 51[{}15 143.462 /CMR17 rf /Fc 133[37 44 44
60 44 46 32 33 33 44 46 42 46 69 23 44 25 23 46 42 25
37 46 37 46 42 3[23 1[23 3[85 62 62 60 46 61 65 57 65
62 76 3[30 62 65 54 57 63 60 59 62 2[39 2[23 23 42 42
42 42 42 42 42 42 42 42 42 23 28 23 2[32 32 23 5[23 18[69
1[46 48 11[{}72 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 311 Project 3: Uniqify) /Subject (CS 311 Project 3) /Creator (LaTeX with hyperref package) /Author (David Merrick) /Keywords (cs311 ``operating systems'' pipes signals) /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray Black 0 TeXcolorgray -300 -360
a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin H.S end
 -300
-360 a -300 -360 a
SDict begin 12 H.A end
 -300 -360 a -300 -360 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 -300 -360
a 83 x Fc(Da)n(vid)27 b(Merric)n(k)-300 -57 y(CS)h(311)-300
162 y(15)f(F)-7 b(ebruary)g(,)26 b(2013)p 0 TeXcolorgray
0 TeXcolorgray 1207 489 a Fb(W)-11 b(riteup)43 b(for)f(Assignmen)l(t)i
(3)-300 687 y
SDict begin H.S end
 -300 687 a -300 687 a
SDict begin 12 H.A end
 -300 687 a -300 687
a
SDict begin [ /View [/XYZ H.V] /Dest (Item.1) cvn H.B /DEST pdfmark end
 -300 687 a 0 TeXcolorgray -199 792 a Fc(1.)p 0 TeXcolorgray
42 w Fa(Plots)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
-300 4508 a @beginspecial 25 @llx 185 @lly 585 @urx 605
@ury 5760 @rwi @setspecial
%%BeginDocument: figure1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.0.0.783 (R2012b). Operating System: Darwin 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64.
%%Title: /Users/david/Dropbox/Winter 2013/CS 311/Assn 3/figure1.eps
%%CreationDate: 02/16/2013  13:36:23
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:    25   185   585   605
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:    25   185   585   605
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode 0300 7260 csm

    0     0  6721  5039 rc
85 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 6722 5040 rf
6 w
0 4107 5209 0 0 -4107 874 4485 4 MP
PP
-5209 0 0 4107 5209 0 0 -4107 874 4485 5 MP stroke
4 w
DO
SO
6 w
0 sg
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
 874 4485 mt 6083 4485 L
 874 4485 mt  874  378 L
 874 4485 mt  874 4432 L
 874  378 mt  874  430 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 841 4630 mt 
(0) s
1915 4485 mt 1915 4432 L
1915  378 mt 1915  430 L
1832 4630 mt 
(0.5) s
2957 4485 mt 2957 4432 L
2957  378 mt 2957  430 L
2924 4630 mt 
(1) s
3999 4485 mt 3999 4432 L
3999  378 mt 3999  430 L
3916 4630 mt 
(1.5) s
5041 4485 mt 5041 4432 L
5041  378 mt 5041  430 L
5008 4630 mt 
(2) s
6083 4485 mt 6083 4432 L
6083  378 mt 6083  430 L
6000 4630 mt 
(2.5) s
5813 4832 mt 
(x 10) s
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 80 FMSR

6039 4758 mt 
(4) s
 874 4485 mt  926 4485 L
6083 4485 mt 6030 4485 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 603 4529 mt 
(-0.5) s
 874 3971 mt  926 3971 L
6083 3971 mt 6030 3971 L
 773 4015 mt 
(0) s
 874 3458 mt  926 3458 L
6083 3458 mt 6030 3458 L
 673 3502 mt 
(0.5) s
 874 2944 mt  926 2944 L
6083 2944 mt 6030 2944 L
 773 2988 mt 
(1) s
 874 2431 mt  926 2431 L
6083 2431 mt 6030 2431 L
 673 2475 mt 
(1.5) s
 874 1918 mt  926 1918 L
6083 1918 mt 6030 1918 L
 773 1962 mt 
(2) s
 874 1404 mt  926 1404 L
6083 1404 mt 6030 1404 L
 673 1448 mt 
(2.5) s
 874  891 mt  926  891 L
6083  891 mt 6030  891 L
 773  935 mt 
(3) s
 874  378 mt  926  378 L
6083  378 mt 6030  378 L
 673  422 mt 
(3.5) s
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
gs 874 378 5210 4108 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
1027 -740 27 -19 -79 56 -35 26 -8 6 -555 399 -4149 2988 4684 -3373 
-62 44 1079 3827 10 MP stroke
/c9 { 0.000000 0.500000 0.000000 sr} bdef
c9
1027 -48 27 -1 -79 3 -35 2 -8 0 -555 27 -4149 196 4684 -222 
-62 3 1079 3922 10 MP stroke
gr

c9
0 sg
2642  283 mt 
(Uniqify using 10 sort processes) s
3138 4773 mt 
(Filesize \(KB\)) s
 521 2889 mt  -90 rotate
(Time required \(s\)) s
90 rotate
 857 4528 mt 
( ) s
6067  420 mt 
( ) s
1 sg
0 334 1166 0 0 -334 4857 772 4 MP
PP
-1166 0 0 334 1166 0 0 -334 4857 772 5 MP stroke
4 w
DO
SO
6 w
0 sg
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
4857  772 mt 6023  772 L
4857  772 mt 4857  438 L
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
5308  573 mt 
(Real time) s
gs 4857 438 1167 335 rc
c8
346 0 4926 530 2 MP stroke
gr

c8
0 sg
5308  722 mt 
(System time) s
gs 4857 438 1167 335 rc
c9
346 0 4926 679 2 MP stroke
gr

c9

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1196 4774 a Fc(Figure)27
b(1:)p 0 TeXcolorgray 1560 4774 a
SDict begin H.S end
 1560 4774 a 0 TeXcolorgray
0 TeXcolorgray 1560 4774 a
SDict begin H.R end
 1560 4774 a 1560 4774 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.1) cvn H.B /DEST pdfmark end
 1560
4774 a 0 TeXcolorgray Fc(Uniqify)h(using)f(10)g(sort)f(pro)r(cesses.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1929 5889
a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 3816 x @beginspecial 25 @llx
185 @lly 585 @urx 605 @ury 5760 @rwi @setspecial
%%BeginDocument: figure2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.0.0.783 (R2012b). Operating System: Darwin 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64.
%%Title: /Users/david/Dropbox/Winter 2013/CS 311/Assn 3/figure2.eps
%%CreationDate: 02/16/2013  13:35:58
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:    25   185   585   605
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:    25   185   585   605
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode 0300 7260 csm

    0     0  6721  5039 rc
85 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 6722 5040 rf
6 w
0 4107 5209 0 0 -4107 874 4485 4 MP
PP
-5209 0 0 4107 5209 0 0 -4107 874 4485 5 MP stroke
4 w
DO
SO
6 w
0 sg
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
 874 4485 mt 6083 4485 L
 874 4485 mt  874  378 L
 874 4485 mt  874 4432 L
 874  378 mt  874  430 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 841 4630 mt 
(0) s
1915 4485 mt 1915 4432 L
1915  378 mt 1915  430 L
1832 4630 mt 
(0.5) s
2957 4485 mt 2957 4432 L
2957  378 mt 2957  430 L
2924 4630 mt 
(1) s
3999 4485 mt 3999 4432 L
3999  378 mt 3999  430 L
3916 4630 mt 
(1.5) s
5041 4485 mt 5041 4432 L
5041  378 mt 5041  430 L
5008 4630 mt 
(2) s
6083 4485 mt 6083 4432 L
6083  378 mt 6083  430 L
6000 4630 mt 
(2.5) s
5813 4832 mt 
(x 10) s
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 80 FMSR

6039 4758 mt 
(4) s
 874 4485 mt  926 4485 L
6083 4485 mt 6030 4485 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 773 4529 mt 
(0) s
 874 4074 mt  926 4074 L
6083 4074 mt 6030 4074 L
 673 4118 mt 
(0.5) s
 874 3663 mt  926 3663 L
6083 3663 mt 6030 3663 L
 773 3707 mt 
(1) s
 874 3252 mt  926 3252 L
6083 3252 mt 6030 3252 L
 673 3296 mt 
(1.5) s
 874 2842 mt  926 2842 L
6083 2842 mt 6030 2842 L
 773 2886 mt 
(2) s
 874 2431 mt  926 2431 L
6083 2431 mt 6030 2431 L
 673 2475 mt 
(2.5) s
 874 2020 mt  926 2020 L
6083 2020 mt 6030 2020 L
 773 2064 mt 
(3) s
 874 1610 mt  926 1610 L
6083 1610 mt 6030 1610 L
 673 1654 mt 
(3.5) s
 874 1199 mt  926 1199 L
6083 1199 mt 6030 1199 L
 773 1243 mt 
(4) s
 874  788 mt  926  788 L
6083  788 mt 6030  788 L
 673  832 mt 
(4.5) s
 874  378 mt  926  378 L
6083  378 mt 6030  378 L
 773  422 mt 
(5) s
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
gs 874 378 5210 4108 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
1027 -839 27 -22 -79 64 -35 29 -8 7 -555 453 -4149 3391 4684 -3828 
-62 51 1079 4301 10 MP stroke
/c9 { 0.000000 0.500000 0.000000 sr} bdef
c9
1027 -47 27 -1 -79 4 -35 1 -8 1 -555 25 -4149 190 4684 -214 
-62 2 1079 4324 10 MP stroke
gr

c9
0 sg
2642  283 mt 
(Uniqify using 50 sort processes) s
3138 4773 mt 
(Filesize \(KB\)) s
 591 2889 mt  -90 rotate
(Time required \(s\)) s
90 rotate
 857 4528 mt 
( ) s
6067  420 mt 
( ) s
1 sg
0 334 1166 0 0 -334 4857 772 4 MP
PP
-1166 0 0 334 1166 0 0 -334 4857 772 5 MP stroke
4 w
DO
SO
6 w
0 sg
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
4857  772 mt 6023  772 L
4857  772 mt 4857  438 L
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
5308  573 mt 
(Real time) s
gs 4857 438 1167 335 rc
c8
346 0 4926 530 2 MP stroke
gr

c8
0 sg
5308  722 mt 
(System time) s
gs 4857 438 1167 335 rc
c9
346 0 4926 679 2 MP stroke
gr

c9

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1196 3514 a Fc(Figure)27
b(2:)p 0 TeXcolorgray 1560 3514 a
SDict begin H.S end
 1560 3514 a 0 TeXcolorgray
0 TeXcolorgray 1560 3514 a
SDict begin H.R end
 1560 3514 a 1560 3514 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.2) cvn H.B /DEST pdfmark end
 1560
3514 a 0 TeXcolorgray Fc(Uniqify)h(using)f(50)g(sort)f(pro)r(cesses.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1929 5889
a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.3) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 3816 x @beginspecial 25 @llx
185 @lly 585 @urx 605 @ury 5760 @rwi @setspecial
%%BeginDocument: figure3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.0.0.783 (R2012b). Operating System: Darwin 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64.
%%Title: /Users/david/Dropbox/Winter 2013/CS 311/Assn 3/btguard_encryption.eps
%%CreationDate: 02/16/2013  13:34:34
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:    25   185   585   605
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:    25   185   585   605
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode 0300 7260 csm

    0     0  6721  5039 rc
85 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 6722 5040 rf
6 w
0 4107 5209 0 0 -4107 874 4485 4 MP
PP
-5209 0 0 4107 5209 0 0 -4107 874 4485 5 MP stroke
4 w
DO
SO
6 w
0 sg
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
 874 4485 mt 6083 4485 L
 874 4485 mt  874  378 L
 874 4485 mt  874 4432 L
 874  378 mt  874  430 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 841 4630 mt 
(0) s
1915 4485 mt 1915 4432 L
1915  378 mt 1915  430 L
1832 4630 mt 
(0.5) s
2957 4485 mt 2957 4432 L
2957  378 mt 2957  430 L
2924 4630 mt 
(1) s
3999 4485 mt 3999 4432 L
3999  378 mt 3999  430 L
3916 4630 mt 
(1.5) s
5041 4485 mt 5041 4432 L
5041  378 mt 5041  430 L
5008 4630 mt 
(2) s
6083 4485 mt 6083 4432 L
6083  378 mt 6083  430 L
6000 4630 mt 
(2.5) s
5813 4832 mt 
(x 10) s
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 80 FMSR

6039 4758 mt 
(4) s
 874 4485 mt  926 4485 L
6083 4485 mt 6030 4485 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 773 4529 mt 
(0) s
 874 3898 mt  926 3898 L
6083 3898 mt 6030 3898 L
 773 3942 mt 
(1) s
 874 3311 mt  926 3311 L
6083 3311 mt 6030 3311 L
 773 3355 mt 
(2) s
 874 2724 mt  926 2724 L
6083 2724 mt 6030 2724 L
 773 2768 mt 
(3) s
 874 2138 mt  926 2138 L
6083 2138 mt 6030 2138 L
 773 2182 mt 
(4) s
 874 1551 mt  926 1551 L
6083 1551 mt 6030 1551 L
 773 1595 mt 
(5) s
 874  964 mt  926  964 L
6083  964 mt 6030  964 L
 773 1008 mt 
(6) s
 874  378 mt  926  378 L
6083  378 mt 6030  378 L
 773  422 mt 
(7) s
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
gs 874 378 5210 4108 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
1027 -865 27 -22 -79 66 -35 29 -8 7 -555 468 -4149 3494 4684 -3945 
-62 52 1079 4285 10 MP stroke
/c9 { 0.000000 0.500000 0.000000 sr} bdef
c9
1027 -38 27 -1 -79 3 -35 1 -8 1 -555 20 -4149 153 4684 -173 
-62 3 1079 4258 10 MP stroke
gr

c9
0 sg
2609  283 mt 
(Uniqify using 100 sort processes) s
3138 4773 mt 
(Filesize \(KB\)) s
 691 2889 mt  -90 rotate
(Time required \(s\)) s
90 rotate
 857 4528 mt 
( ) s
6067  420 mt 
( ) s
1 sg
0 334 1166 0 0 -334 4857 772 4 MP
PP
-1166 0 0 334 1166 0 0 -334 4857 772 5 MP stroke
4 w
DO
SO
6 w
0 sg
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
4857  772 mt 6023  772 L
4857  772 mt 4857  438 L
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
5308  573 mt 
(Real time) s
gs 4857 438 1167 335 rc
c8
346 0 4926 530 2 MP stroke
gr

c8
0 sg
5308  722 mt 
(System time) s
gs 4857 438 1167 335 rc
c9
346 0 4926 679 2 MP stroke
gr

c9

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1175 3514 a Fc(Figure)27
b(3:)p 0 TeXcolorgray 1539 3514 a
SDict begin H.S end
 1539 3514 a 0 TeXcolorgray
0 TeXcolorgray 1539 3514 a
SDict begin H.R end
 1539 3514 a 1539 3514 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.3) cvn H.B /DEST pdfmark end
 1539
3514 a 0 TeXcolorgray Fc(Uniqify)h(using)f(100)f(sort)h(pro)r(cesses.)p
0 TeXcolorgray 0 TeXcolorgray -300 3630 a
SDict begin H.S end
 -300 3630 a
-300 3630 a
SDict begin 12 H.A end
 -300 3630 a -300 3630 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.2) cvn H.B /DEST pdfmark end
 -300 3630 a 0 TeXcolorgray
-199 3763 a Fc(2.)p 0 TeXcolorgray 42 w Fa(A)g(design)i(for)f(your)g
(system,)h(as)f(wel)t(l)g(as)h(plac)l(es)f(your)g(implementation)h
(deviate)l(d)h(fr)l(om)e(this)g(design.)38 b Fc(I)25
b(designed)g(m)n(y)g(system)g(to)h(b)r(e)-92 3862 y(as)i(e\016cien)n(t)
h(as)f(p)r(ossible)h(and)g(to)f(minimize)i(rewriting)e(co)r(de)h(b)n(y)
f(substituting)i(functions)f(wherev)n(er)f(I)h(had)f(rep)r(etition.)42
b(Initially)-7 b(,)29 b(I)-92 3962 y(deviated)22 b(from)g(this)g(in)h
(a)f(couple)g(of)g(places.)34 b(In)23 b(the)f(parser,)g(I)h(w)n(as)e
(reading)g(in)i(one)f(c)n(haracter)e(at)i(a)g(time,)i(writing)e(a)g(n)n
(ull)g(termitator)-92 4062 y(c)n(haracter)g(to)i(the)h(end)g(of)f(the)h
(bu\013er,)g(then)g(writing)f(one)g(c)n(haracter)e(at)j(a)f(time)h(to)f
(the)h(pip)r(es.)36 b(This)24 b(ob)n(viously)f(w)n(as)h(not)g(an)g
(optimal)-92 4161 y(w)n(a)n(y)j(to)i(read)f(input,)i(so)f(later)f(I)h
(switc)n(hed)g(to)g(using)f(scanf)h(to)g(read)f(an)h(en)n(tire)f(w)n
(ord)g(at)h(a)g(time)g(and)g(then)g(write)g(that.)42
b(Initially)-7 b(,)29 b(I)-92 4261 y(w)n(as)d(op)r(ening)h(an)f(en)n
(tire)h(arra)n(y)e(of)i(pip)r(es)h(in)f(the)h(paren)n(t,)e(then)i(lo)r
(oping)e(through)h(in)g(the)h(paren)n(t)e(and)h(the)h(c)n(hild)f
(closing)f(the)i(ones)e(I)-92 4361 y(didn't)k(need.)42
b(I)29 b(switc)n(hed)g(this)h(to)f(op)r(ening)g(only)g(the)h(pip)r(es)f
(I)h(needed)f(where)g(I)g(needed)h(them.)42 b(I)30 b(still)f(had)h(to)f
(lo)r(op)g(through)f(and)-92 4460 y(close)h(the)h(previous)f(c)n
(hildren's)g(pip)r(es)h(in)g(the)g(subsequen)n(t)g(c)n(hildren)f(\(b)r
(ecause)h(those)g(pip)r(es)g(w)n(ere)f(inherited)h(b)n(y)f(the)h(paren)
n(t\),)g(but)-92 4560 y(there)d(w)n(as)f(no)h(other)g(more)f(e\016cien)
n(t)i(w)n(a)n(y)e(to)h(do)g(this)h(that)f(I)h(w)n(as)e(a)n(w)n(are)f
(of.)37 b(Initially)-7 b(,)28 b(m)n(y)f(suppressor)e(pro)r(cess)i(w)n
(as)f(not)h(optimal.)-92 4659 y(I)32 b(read)f(w)n(ords)g(in)n(to)h(an)g
(arra)n(y)-7 b(,)31 b(p)r(erformed)h(an)g(insertion)g(sort,)g(returned)
g(the)h(arra)n(y)-7 b(,)31 b(then)i(prin)n(ted)f(them.)51
b(Not)33 b(only)f(w)n(as)f(this)h(a)-92 4759 y(w)n(aste)c(of)h(time,)h
(but)g(it)g(didn't)g(output)f(the)h(w)n(ords)e(in)h(the)h(righ)n(t)e
(order.)40 b(It)30 b(couldn't.)42 b(Not)29 b(without)h(reading)e(ev)n
(ery)f(w)n(ord)h(in)n(to)h(an)-92 4859 y(arra)n(y)h(from)j(the)g(pip)r
(es.)53 b(So)33 b(instead,)h(I)f(switc)n(hed)g(to)f(a)h(function)g
(that)h(found)f(the)g(next)g(highest)g(alphab)r(etical)g(w)n(ord)e
(from)i(eac)n(h)-92 4958 y(pip)r(e)26 b(and)g(stored)f(it)h(in)h(a)e
(struct)h(that)g(k)n(ept)g(trac)n(k)f(of)h(its)g(coun)n(t.)36
b(It)26 b(rep)r(eated)g(this)g(un)n(til)h(there)f(w)n(ere)f(no)g(more)g
(w)n(ords,)g(and)h(prin)n(ted)-92 5058 y(out)i(w)n(ords)f(plus)i(coun)n
(ts)f(when)g(it)h(found)g(new)f(ones.)39 b(This)29 b(minimized)g(the)f
(use)h(of)f(memory)-7 b(,)28 b(made)g(it)h(unnecessary)e(to)i(p)r
(erform)e(a)-92 5158 y(bunc)n(h)g(of)h(insertion)f(sorts,)f(and)i(w)n
(ork)n(ed)e(in)i(ev)n(ery)e(case.)-300 5207 y
SDict begin H.S end
 -300 5207
a -300 5207 a
SDict begin 12 H.A end
 -300 5207 a -300 5207 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.3) cvn H.B /DEST pdfmark end
 -300 5207 a 0 TeXcolorgray
-199 5324 a Fc(3.)p 0 TeXcolorgray 42 w Fa(Work)k(L)l(o)l(g:)-92
5456 y Fc(2013-02-15)23 b(10:15:43)i(-0800,)g(Tw)n(eak)n(ed)h(parser)g
(to)i(read)e(and)i(discard)e(leading)h(nonalpha)g(c)n(hars.)-92
5589 y(2013-02-14)c(15:13:06)i(-0800,)g(Changed)i(parser)f(to)h(use)h
(scanf.)p 0 TeXcolorgray 1929 5889 a(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.4) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray -92 -277 a Fc(2013-02-14)23
b(14:56:24)j(-0800,)g(Fixed)i(bug.)39 b(W)-7 b(asn't)28
b(closing)f(certain)h(pip)r(es)g(in)h(c)n(hildren,)f(causing)f(program)
f(to)i(hang.)38 b(W)-7 b(orks)28 b(no)n(w.)-92 -177 y(No)n(w)f(just)h
(need)g(to)f(impro)n(v)n(e)f(parser.)-92 -46 y(2013-02-14)f(11:20:14)i
(-0800,)i(This)h(v)n(ersion)e(of)i(co)r(de)g(is)g(NOT)g(w)n(orking.)42
b(Sa)n(ving)29 b(it)i(here)e(so)h(I)g(can)g(rev)n(ert)e(to)i(earlier)f
(v)n(ersion)f(and)-92 53 y(see)f(what)g(w)n(en)n(t)h(wrong.)-92
184 y(2013-02-14)23 b(10:57:38)i(-0800,)g(Rev)n(erted)i(bac)n(k)g(to)g
(old)g(suppressor.)35 b(still)28 b(w)n(eird)f(bug)-92
315 y(2013-02-13)20 b(16:06:57)i(-0800,)h(F)-7 b(ound)25
b(a)g(bug)f(where)g(it)i(hangs)e(on)g(fgets)h(in)g(the)g(suppressor)e
(sometimes.)36 b(I)24 b(couldn't)h(\014gure)f(out)h(wh)n(y)-7
b(.)-92 415 y(Will)28 b(ask.)36 b(Also)27 b(added)g(scanf)h(to)f
(parser,)f(whic)n(h)i(\014xed)g(the)f(problem)h(of)f(blank)g(lines)h
(in)g(output.)-92 546 y(2013-02-13)23 b(13:47:34)i(-0800,)g(Tw)n(eaks)h
(and)i(inden)n(ting.)-92 677 y(2013-02-13)23 b(13:43:57)i(-0800,)g(Up)r
(dated)j(parser)e(to)i(use)f(fgets.)-92 808 y(2013-02-13)c(13:16:50)i
(-0800,)g(Redid)j(signal)f(handling.)36 b(Muc)n(h)28
b(cleaner)e(no)n(w)h(b)r(ecause)h(it)g(do)r(esn't)f(send)h(a)f(QUIT)h
(signal)e(to)i(itself.)-92 939 y(2013-02-13)23 b(12:24:59)i(-0800,)g
(Remo)n(v)n(ed)i(camelcasing)f(from)h(v)-5 b(ariables.)-92
1070 y(2013-02-13)23 b(09:05:45)i(-0800,)g(Fixed)j(bug)f(where)g(it)h
(w)n(asn't)f(prin)n(ting)h(the)f(last)h(w)n(ord)-92 1201
y(2013-02-12)23 b(21:13:51)i(-0800,)g(Added)j(co)r(de)g(to)f(free)g
(mallo)r(ced)h(arra)n(ys)d(for)i(pip)r(es)h(at)f(the)h(end)g(to)f
(\014x)h(memory)f(leak.)-92 1332 y(2013-02-12)c(16:31:15)i(-0800,)g
(Added)j(helpful)h(error)c(message)h(if)j(n)n(um)n(b)r(er)e(of)g(pip)r
(es)h(is)g(O)n(VER)f(9000git)e(add)j(uniqify)-7 b(.c)-92
1463 y(2013-02-11)23 b(20:42:19)i(-0800,)g(Changed)i(syn)n(tax)g(of)g
(prin)n(ted)h(w)n(ords)e(to)h(matc)n(h)h(uniq)g(-c)-92
1594 y(2013-02-11)23 b(20:29:25)i(-0800,)g(Added)j(prop)r(er)f(inden)n
(tation)g(with)h(inden)n(t)g(-kr)f(-i8)g([\014lename])h(command)-92
1725 y(2013-02-11)f(20:17:09)h(-0800,)j(Setup)h(signal)f(handlers.)48
b(They)31 b(seem)g(to)h(b)r(e)g(w)n(orking)e(to)h(sp)r(ec)h(but)g(will)
g(double-c)n(hec)n(k.)47 b(Remo)n(v)n(ed)-92 1825 y(unneccessary)26
b(t)n(yp)r(ecasting)g(from)i(mallo)r(c\(\))g(statemen)n(ts.)36
b(Co)r(de)28 b(seems)f(done)g(and)h(bug-free)-92 1956
y(2013-02-11)20 b(17:09:46)i(-0800,)i(P)n(atc)n(hed)f(bug)i(with)h(a)e
(couple)h(lines)g(of)g(co)r(de.)36 b(Still)26 b(w)n(ould)e(lik)n(e)h
(to)g(kno)n(w)f(wh)n(y)g(it's)i(happ)r(ening.)36 b(Other)-92
2055 y(than)27 b(that,)h(just)g(need)g(to)g(handle)f(signals)g(and)g
(am)g(done)h(with)g(the)g(program)-92 2186 y(2013-02-11)23
b(16:37:43)i(-0800,)g(Up)r(dated)j(co)r(de)g(so)f(it)h(spa)n(wns)e
(suppressor)g(pro)r(cess)g(instead)i(of)f(calling)g(it)h(from)g(paren)n
(t.)-92 2317 y(2013-02-11)c(16:26:39)i(-0800,)g(Co)r(de)j(is)g(all)f(w)
n(orking)f(except)h(for)h(sligh)n(t)f(bug.)40 b(I)28
b(think)i(bug)e(is)h(in)g(parser.)38 b(Results)29 b(in)g(pip)r(e)g
(initially)-92 2417 y(b)r(eing)e(empt)n(y)-92 2548 y(2013-02-11)17
b(15:21:01)j(-0800,)h(Program)e(w)n(orks,)j(but)h(m)n(y)f(solution)g(w)
n(as)f(a)h(little)h(hac)n(kish)e(and)h(migh)n(t)g(not)g(w)n(ork)f(for)h
(all)g(cases.)34 b(Ma)n(yb)r(e)-92 2647 y(should)27 b(ask)g(if)h
(there's)f(a)g(b)r(etter)h(w)n(a)n(y)-7 b(.)-92 2778
y(2013-02-11)25 b(10:43:37)i(-0800,)i(It's)h(mostly)g(w)n(orking!)42
b(There's)30 b(just)g(a)g(sligh)n(t)g(bug)f(in)i(the)f(prin)n(tW)-7
b(ords)29 b(function)i(where)e(it)i(do)r(esn't)-92 2878
y(pic)n(k)c(up)h(on)f(duplicate)h(w)n(ords)e(or)h(coun)n(t)g(them)h
(sometimes.)-92 3009 y(2013-02-11)f(09:43:44)j(-0800,)h(Suppressor)g
(is)i(curren)n(tly)e(brok)n(en.)50 b(Ab)r(out)33 b(to)f(do)g(some)g(ma)
5 b(jor)31 b(w)n(ork)g(to)h(\014x)h(but)g(am)f(committing)-92
3109 y(what)27 b(I)h(ha)n(v)n(e)e(no)n(w.)-92 3240 y(2013-02-10)h
(18:13:12)j(-0800,)h(Debugging)g(suppressor)g(pro)r(cess.)49
b(MergeW)-7 b(ords)31 b(seems)g(to)h(b)r(e)h(w)n(orking)d(at)j(alphab)r
(etizing)e(w)n(ords.)-92 3339 y(But)c(k)n(eep)h(getting)f(segfaults.)36
b(Will)28 b(debug)g(later.)-92 3470 y(2013-02-10)e(13:37:31)i(-0800,)i
(Started)h(w)n(ork)e(on)i(mergeW)-7 b(ords)30 b(function.)47
b(It's)31 b(a)g(little)h(buggy)e(and)h(ma)n(yb)r(e)f(ine\016cien)n(t)i
(but)f(I)g(can)-92 3570 y(re\014ne)c(it)h(later.)-92
3701 y(2013-02-10)23 b(12:40:06)i(-0800,)g(Nvm,)j(got)f(it)h(w)n
(orking.)35 b(Had)28 b(to)f(close)g(output)h(pip)r(es)g(in)g(paren)n
(t.)-92 3832 y(2013-02-10)23 b(12:29:21)i(-0800,)g(T)-7
b(rying)27 b(to)g(debug)h(suppressor)d(pro)r(cess.)36
b(W)-7 b(eird)28 b(b)r(eha)n(vior.)35 b(Hangs)27 b(in)h(while)g(lo)r
(op.)-92 3963 y(2013-02-10)18 b(11:15:48)j(-0800,)g(Finally)j(\014xed)f
(bug!)35 b(Problem)22 b(w)n(as)g(that)h(I)h(w)n(as)e(creating)g(pip)r
(es)h(when)h(I)f(w)n(as)f(making)g(the)i(pip)r(es)f(arra)n(y)-7
b(.)-92 4063 y(Not)27 b(sure)g(wh)n(y)h(this)f(w)n(as)g(an)g(issue)h
(but)g(is)f(\014xed)h(no)n(w.)36 b(Remo)n(v)n(ed)27 b(debug)g
(functions.)-92 4194 y(2013-02-09)c(23:43:48)i(-0800,)g(Added)j(readme)
f(\014les)h(to)f(pro)n(vide)f(instructions)i(and)f(con)n(text)g(for)g
(assignmen)n(ts)-92 4325 y(2013-02-09)c(23:41:47)i(-0800,)g
(instructions)i(for)g(\014rst)h(assignmen)n(t)-92 4456
y(2013-02-09)g(22:29:39)i(-0800,)h(Used)i(write\(\))g(instead)f(of)h
(fputs\(\))h(to)e(put)h(text)g(in)n(to)g(pip)r(es.)52
b(It's)33 b(still)g(acting)f(w)n(eird)g(and)g(hanging)-92
4555 y(with)c(more)e(than)i(2)f(pro)r(cesses.)-92 4686
y(2013-02-09)22 b(20:55:52)j(-0800,)g(Added)j(debug)f(metho)r(ds.)37
b(Still)28 b(acting)f(w)n(eird)g(and)g(I'm)g(not)h(sure)e(wh)n(y)-7
b(.)37 b(Thro)n(ws)26 b(bad)h(\014le)g(descriptor)-92
4786 y(error)e(with)j(one)g(pro)r(cess,)e(hangs)h(on)g(more)g(than)g
(one)h(pro)r(cess.)-92 4917 y(2013-02-09)23 b(17:29:04)i(-0800,)g(Made)
i(a)g(few)h(t)n(w)n(eaks.)36 b(Same)27 b(thing)h(is)g(happ)r(ening)f
(with)h(pro)r(cesses)e(greater)g(than)i(1.)-92 5048 y(2013-02-09)23
b(16:10:08)i(-0800,)g(Rewrote)i(pip)r(es)h(to)f(use)h(a)f
(2-dimensional)f(arra)n(y)f(for)i(easier)g(co)r(ding)g(and)g(few)n(er)g
(coun)n(ter)g(v)-5 b(ariables.)-92 5179 y(2013-02-09)20
b(15:31:11)i(-0800,)i(Is)g(w)n(orking)g(except)h(sort)f(pro)r(cesses)f
(are)h(not)h(dying)g(when)g(n)n(umsort)f(>)i(2.)35 b(Strangely)-7
b(,)25 b(if)g(I)g(kill)g(an)n(y)f(one)-92 5278 y(pro)r(cess,)i(they)i
(all)f(die.)37 b(Pip)r(es)28 b(are)e(w)n(orking)g(correctly)-7
b(.)35 b(Not)28 b(sure)f(where)g(the)h(bug)g(is.)-92
5409 y(2013-02-09)23 b(00:01:21)i(-0800,)g(Fixed)j(w)n(arnings)e(ab)r
(out)h(fdop)r(en\(\).)38 b(Added)28 b(w)n(ait)g(at)f(the)h(end)g(of)f
(main)h(pro)r(cess)e(to)i(reap)f(zom)n(bies.)-92 5540
y(2013-02-08)c(20:33:46)i(-0800,)h(Added)j(suppressor.)36
b(Still)29 b(do)r(esn't)f(prin)n(t)g(to)g(STDOUT)g(in)g(m)n(y)g
(terminal)g(but)g(I)g(think)h(all)e(the)i(pip)r(es)-92
5640 y(are)d(w)n(orking.)p 0 TeXcolorgray 1929 5889 a(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.5) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray -92 -277 a Fc(2013-02-08)23
b(16:20:55)i(-0800,)g(sort)i(is)g(w)n(orking)f(with)i(m)n(ultiple)g(c)n
(hild)g(pro)r(cesses)-92 -144 y(2013-02-08)d(15:44:34)j(-0800,)g(Added)
j(co)r(de)f(for)g(suppressor)e(pip)r(es.)45 b(But)30
b(not)g(w)n(orking.)43 b(So)30 b(gonna)f(rev)n(ok)n(e.)43
b(But)30 b(w)n(an)n(ted)g(to)g(sa)n(v)n(e)-92 -45 y(on)d(here.)-92
88 y(2013-02-08)g(13:48:46)i(-0800,)h(T)-7 b(rying)31
b(to)g(close)g(write)g(ends)h(of)g(pip)r(es)g(but)g(not)f(w)n(orking.)
48 b(Made)31 b(some)g(other)g(t)n(w)n(eaks.)48 b(Hangs)30
b(on)-92 188 y(w)n(aits)c(so)h(gotta)g(\014x)h(that.)-92
321 y(2013-02-08)23 b(12:56:19)i(-0800,)g(Sorting)i(w)n(orks!)35
b(If)28 b(there's)f(only)g(one)h(subpro)r(cess)-92 454
y(2013-02-08)19 b(12:34:57)i(-0800,)h(Started)i(w)n(ork)e(on)h(m)n
(ultiple)h(pro)r(cess)f(c)n(hildren,)h(successfully)f(parsed)g(input,)i
(c)n(hild)f(sort)f(pro)r(cesses)f(not)-92 553 y(w)n(orking)j(y)n(et)-92
686 y(2013-02-08)e(09:21:20)i(-0800,)g(Successfully)j(got)f(a)g(single)
g(sort)g(pip)r(e)h(sorting)e(output)-92 819 y(2013-02-06)32
b(19:56:51)i(-0800,)i(Added)i(help)e(function.)65 b(parsing)35
b(input)j(isn't)f(w)n(orking)e(but)i(am)f(gonna)g(skip)g(that)h(for)f
(no)n(w)g(and)-92 919 y(assume)26 b(input)j(is)e(in)h(csv)f(format)-92
1051 y(2013-02-06)c(09:43:57)i(-0800,)g(V)-7 b(ersion)27
b(one)g(of)h(uniqify)-300 1101 y
SDict begin H.S end
 -300 1101 a -300 1101
a
SDict begin 12 H.A end
 -300 1101 a -300 1101 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.4) cvn H.B /DEST pdfmark end
 -300 1101 a 0 TeXcolorgray
-199 1217 a Fc(4.)p 0 TeXcolorgray 42 w Fa(Chal)t(lenges:)44
b Fc(One)27 b(ma)5 b(jor)27 b(c)n(hallenge)f(of)i(this)g(program)e(w)n
(as)g(to)i(mak)n(e)f(sure)g(the)h(pip)r(es)g(w)n(ere)f(set)g(up)h
(correctly)-7 b(.)36 b(I)28 b(decided)g(the)g(b)r(est)-92
1317 y(approac)n(h)22 b(to)j(this)g(w)n(ould)g(b)r(e)g(iterativ)n(e;)g
(First)f(op)r(en)h(pip)r(es)g(and)g(create)f(a)g(subpro)r(cess)g(that)h
(prin)n(ts)g(ev)n(erything)e(in)i(them,)h(then)g(bind)-92
1417 y(the)g(pip)r(es)h(to)f(the)h(c)n(hild's)f(STDIN)h(and)g(exec)f
(the)g(sort)g(pro)r(cesses)f(and)h(mak)n(e)g(sure)f(the)i(output)g(is)f
(correct,)g(then)g(bind)h(the)g(pip)r(es)g(in)-92 1516
y(the)g(c)n(hildren)f(to)h(STDOUT)g(and)g(mak)n(e)f(sure)g(that)h
(output)g(is)g(correct.)35 b(This)27 b(w)n(as)f(m)n(uc)n(h)g(easier)g
(said)g(than)h(done,)g(and)f(ev)n(en)h(after)f(I)-92
1616 y(though)n(t)g(I)g(had)h(it)g(w)n(orking)e(100)g(p)r(ercen)n(t,)h
(I)h(had)f(forgotten)g(to)h(close)e(the)i(previous)f(c)n(hildren's)g
(pip)r(es)g(in)h(the)g(subsequen)n(t)f(c)n(hildren.)-92
1716 y(Sev)n(eral)e(frustrating)h(hours)g(of)g(testing)h(later,)g(I)g
(realized)e(this)i(and)g(corrected)e(it.)37 b(Another)26
b(c)n(hallenge)e(w)n(as)h(in)h(debugging)f(the)h(c)n(hild)-92
1815 y(supressor)21 b(pro)r(cess.)34 b(I)23 b(w)n(as)f(initially)i(not)
f(sure)f(ho)n(w)h(to)g(get)g(GDB)h(to)f(follo)n(w)f(the)i(fork)e(to)h
(the)h(c)n(hild,)g(so)e(I)i(wrote)e(a)h(separate)e(function,)-92
1915 y(debugged)27 b(it,)i(then)g(just)g(had)f(the)h(c)n(hild)f(call)g
(that)h(function)g(after)f(the)g(fork.)39 b(Another)28
b(c)n(hallenge)f(w)n(as)g(signal)h(handling.)38 b(I)29
b(w)n(asn't)-92 2014 y(sure)g(ho)n(w)h(to)h(ha)n(v)n(e)e(the)i(main)f
(program)e(send)j(a)f(QUIT)g(signal)g(to)g(all)g(the)h(c)n(hildren,)g
(b)r(ecause)f(the)h(signal)e(handler)h(is)h(not)f(able)g(to)-92
2114 y(access)25 b(a)h(lo)r(cal)g(v)-5 b(ariable)25 b(that)i(held)g
(the)f(c)n(hild)h(PIDs.)36 b(But)27 b(I)f(realized)g(that)h(I)f(could)h
(create)e(a)h(global)f(arra)n(y)g(v)-5 b(ariable)25 b(to)h(k)n(eep)g
(trac)n(k)-92 2214 y(of)h(eac)n(h)g(c)n(hild)h(then)g(issue)f(a)g(QUIT)
h(to)f(eac)n(h)g(one)g(of)h(them)g(within)g(the)g(signal)f(handler.)
-300 2263 y
SDict begin H.S end
 -300 2263 a -300 2263 a
SDict begin 12 H.A end
 -300 2263 a -300
2263 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.5) cvn H.B /DEST pdfmark end
 -300 2263 a -300 2280 a
SDict begin H.S end
 -300 2280 a -300 2280
a
SDict begin 12 H.A end
 -300 2280 a -300 2280 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.6) cvn H.B /DEST pdfmark end
 -300 2280 a 0 TeXcolorgray
-199 2380 a Fc(5.)p 0 TeXcolorgray 0 TeXcolorgray 77
w(\(a\))p 0 TeXcolorgray 41 w Fa(What)32 b(do)h(you)f(think)g(the)g
(main)h(p)l(oint)f(of)h(this)f(assignment)g(is?)55 b
Fc(The)29 b(main)h(p)r(oin)n(t)g(of)g(this)g(assignmen)n(t)f(w)n(as)g
(to)h(get)g(familiar)90 2479 y(with)g(in)n(terpro)r(cess)d(comm)n
(unication)h(and)h(signal)f(handling.)41 b(Besides)28
b(those)h(t)n(w)n(o)f(c)n(hallenges,)g(the)h(rest)g(of)g(the)g(program)
e(w)n(as)90 2579 y(just)h(C)g(and)f(a)h(little)g(\014le)g(I/O,)f(whic)n
(h)g(w)n(e)g(already)f(knew)i(ho)n(w)f(to)g(do.)-300
2616 y
SDict begin H.S end
 -300 2616 a -300 2616 a
SDict begin 12 H.A end
 -300 2616 a -300 2616
a
SDict begin [ /View [/XYZ H.V] /Dest (Item.7) cvn H.B /DEST pdfmark end
 -300 2616 a 0 TeXcolorgray -62 2712 a Fc(\(b\))p 0
TeXcolorgray 42 w Fa(How)j(did)g(you)g(ensur)l(e)e(your)i(solution)f
(was)h(c)l(orr)l(e)l(ct?)47 b Fc(I)27 b(ensured)f(m)n(y)h(solution)g(w)
n(as)f(correct)f(b)n(y)i(testing)g(it)h(on)e(small)h(\014les)g(that)90
2811 y(I)f(knew)g(the)g(w)n(ord)f(coun)n(t)g(of.)36 b(I)26
b(made)g(sure)f(ev)n(ery)g(w)n(ord)f(w)n(as)h(unique)h(and)g(had)f(the)
h(correct)f(coun)n(t)g(asso)r(ciated)g(with)h(it.)37
b(Then)90 2911 y(I)28 b(tested)f(it)h(on)f(larger)f(\014les)h(with)h(w)
n(eird)f(c)n(haracters)e(to)i(see)g(if)h(it)g(could)f(handle)h(them.)37
b(Then)28 b(I)f(c)n(hanged)g(the)g(n)n(um)n(b)r(er)h(of)f(sort)90
3011 y(pro)r(cesses)f(I)i(w)n(an)n(ted)f(it)h(to)f(use)h(and)f(rep)r
(eated)h(this)f(pro)r(cess.)-300 3043 y
SDict begin H.S end
 -300 3043 a -300
3043 a
SDict begin 12 H.A end
 -300 3043 a -300 3043 a
SDict begin [ /View [/XYZ H.V] /Dest (Item.8) cvn H.B /DEST pdfmark end
 -300 3043 a 0 TeXcolorgray
-53 3144 a Fc(\(c\))p 0 TeXcolorgray 42 w Fa(What)f(did)h(you)f(le)l
(arn?)47 b Fc(I)23 b(learned)g(ho)n(w)f(to)h(use)g(GDB)h(to)f(debug)g
(c)n(hild)h(pro)r(cesses,)e(ho)n(w)h(to)g(use)g(global)f(v)-5
b(ariables,)23 b(ho)n(w)g(to)g(parse)90 3243 y(text)28
b(using)f(scanf,)g(ho)n(w)g(to)h(handle)f(signals,)f(ho)n(w)h(to)g(spa)
n(wn)g(c)n(hild)h(pro)r(cesses,)e(ho)n(w)h(to)g(create)f(zom)n(bies)h
(if)h(y)n(ou're)e(not)i(careful)90 3343 y(w)n(aiting)f(for)f(c)n(hild)h
(pro)r(cesses,)f(ho)n(w)g(to)h(write)g(to)g(pip)r(es,)g(and)g(ho)n(w)g
(to)g(read)f(from)h(pip)r(es.)37 b(I)27 b(also)f(learned)g(that)h(no)g
(matter)g(ho)n(w)90 3442 y(sure)g(y)n(ou)g(are)g(a)g(part)g(of)g(y)n
(our)g(program)e(w)n(orks)h(correctly)-7 b(,)26 b(it)i(can)g(still)g
(ha)n(v)n(e)e(a)h(bug.)p 0 TeXcolorgray 1929 5889 a(5)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
