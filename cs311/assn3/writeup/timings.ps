%!PS-Adobe-2.0
%%Creator: dvips(k) 5.96.1 Copyright 2007 Radical Eye Software
%%Title: timings.dvi
%%CreationDate: Sat Feb 16 13:50:14 2013
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMR10 CMR17 Helvetica
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter timings.dvi -o
%+ timings.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2013.02.16:1350
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
%!
% PostScript prologue for pstricks.tex.
% Version 1.01, 2006/01/11
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, epects 2 parameter
/PtoC { 2 copy cos mul 3 1 roll sin mul } def 	% Polar to Cartesian
%----------------- hv added 20050516 ---------------
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
/RadtoDeg { 180 mul Pi div } bind def % convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def % viceversa
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
/PathLength { flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
  }{ /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
%
%%-------------- DG begin patch 15 ---------------%%
%/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
%PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
%mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
%/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
%0 } ifelse setdash stroke } def
/DashLine {
  dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def PathLength } ifelse
  /b ED /x1 ED /y1 ED /x ED /y ED 
  /z y x add y1 add x1 add def
  /Coef b a .5 sub 2 mul y mul sub z Div round 
    z mul a .5 sub 2 mul y mul add b exch Div def 
  /y y Coef mul def 
  /x x Coef mul def 
  /y1 y1 Coef mul def 
  /x1 x1 Coef mul def
  x1 0 gt y1 0 gt or x 0 gt or y 0 gt and 
    { [ y x y1 x1 ] 1 a sub y mul }
    { [ 1 0 ] 0 } ifelse 
  setdash stroke
} def
%%-------------- DG end patch 15 ---------------%%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
%gsave abs CLW add /a ED a 0 dtransform round exch round exch
%2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
%% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
%% DG/SR modification end
%Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
%/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
%% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
%% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
%% def
%a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
%pop pop } def
%% DG/SR modification end
%
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse 
  /b ED 0 z DS SD b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub moveto } def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
  ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
  repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
  ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
  moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
  Lineto pop pop closepath } ifelse } def
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % add/sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul x add
  a2 sin ry mul y add
  a1 cos rx mul x add
  a1 sin ry mul y add
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
%!
%% PostScript prologue for pstricks.tex.
%% Version 2.00,                                    Suggestion of 2006/12/19
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Herbert Voss (hv) - 2004/12/27 
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%
10 dict dup begin
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
  /FontBBox [-571.5 -742.5 571.5 742.5] def
%  /FontBBox [-1000 -1000 1000 1000] def
%                See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch/.notdef put} for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
  CharProcs begin
    /CirclePath {0 0 500 0 360 arc closepath} def
      /Bullet {CirclePath fill} def
	  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
	  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
    /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto
		closepath} def
	  /SolidTriangle {TrianglePath fill} def
      /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
      /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
    /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
		closepath} def
      /SolidSquare {SquarePath fill} def
      /Square {SquarePath .89 .89 scale SquarePath eofill} def
      /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
    /PentagonPath {-337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
		0 574.7 lineto -546.6 177.6 lineto closepath} def
      /SolidPentagon {PentagonPath fill} def
      /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
      /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
    /HexagonPath {0 550 moveto -476 275 lineto -476 -275 lineto
		0 -550 lineto 476 -275 lineto 476 275 lineto closepath} def
      /SolidHexagon {HexagonPath fill} def
      /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
      /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
	/AsteriskPath {20 0 moveto 10 250 180 500 0 500 curveto
		-180 500 -10 250 -20 0 curveto closepath} def
      /Asterisk {AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
	    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath 
		fill} def
	/Basterp {50 250 220 500 0 500 curveto
        -220 500 -50 250 -50 30 cos 100 mul curveto} def
	/BoldAsteriskPath {50 30 cos 100 mul moveto  Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp 60 rotate Basterp
                     60 rotate Basterp closepath} def
      /BoldAsterisk {BoldAsteriskPath fill} def
	  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
    /CrossPath {40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
        -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
		40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath} def
    /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
        -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
		80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath} def
      /Add {CrossPath fill} def
      /Mul {45 rotate CrossPath fill} def
      /BoldAdd {BoldCrossPath fill} def
      /BoldMul {45 rotate BoldCrossPath fill} def
	  /Oplus {CirclePath .9 .9 scale CirclePath eofill
		.775 .775 scale CrossPath  fill} def 
	  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
	  /BOplus {CirclePath .8 .8 scale CirclePath eofill
		.775 .775 scale BoldCrossPath fill} def 
	  /Otimes {CirclePath .9 .9 scale CirclePath eofill
		45 rotate .775 .775 scale CrossPath fill} def 
	  /BOtimes {CirclePath .8 .8 scale CirclePath eofill
		45 rotate .775 .775 scale BoldCrossPath  fill } def 
	  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
    /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto
		closepath} def
      /Bar {BarPath fill} def
    /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto
		closepath} def
      /BoldBar {BoldBarPath fill} def
    /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 
		428.5 0 lineto closepath} def
      /SolidDiamond {DiamondPath fill} def
      /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
      /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
%      Metrics 1 index get exec 0
       0 0
%      BBoxes 3 index get exec
      -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop


%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /DvipsToPDF { 72.27 mul Resolution div } def /PDFToDvips { 72.27 div
Resolution mul } def /HyperBorder { 1 PDFToDvips } def /H.V {pdf@hoff
pdf@voff null} def /H.B {/Rect[pdf@llx pdf@lly pdf@urx pdf@ury]} def
/H.S { currentpoint HyperBorder add /pdf@lly exch def dup DvipsToPDF
/pdf@hoff exch def HyperBorder sub /pdf@llx exch def } def /H.L { 2
sub dup /HyperBasePt exch def PDFToDvips /HyperBaseDvips exch def currentpoint
HyperBaseDvips sub /pdf@ury exch def /pdf@urx exch def } def /H.A {
H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF HyperBasePt
sub sub /pdf@voff exch def } def /H.R { currentpoint HyperBorder sub
/pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint exch
pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def } def systemdict
/pdfmark known { userdict /?pdfmark systemdict /exec get put }{ userdict
/?pdfmark systemdict /pop get put userdict /pdfmark systemdict /cleartomark
get put } ifelse
 
@fedspecial end
%%BeginFont: CMR17
%!PS-AdobeFont-1.1: CMR17 1.0
%%CreationDate: 1991 Aug 20 16:38:24
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR17) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR17 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 51 /three put
dup 65 /A put
dup 80 /P put
dup 84 /T put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 114 /r put
dup 115 /s put
dup 116 /t put
readonly def
/FontBBox{-33 -250 945 749}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F075EA0A10A15B0ED05D5039DA41B32B16E95
A3CE9725A429B35BAD796912FC328E3A28F96FCADA20A598E247755E7E7FF801
BDB00E9B9B086BDBE6EDCF841A3EAFC6F5284FED3C634085BA4EE0FC6A026E96
96D55575481B007BF93CA452EE3F71D83FAAB3D9DEDD2A8F96C5840EAE5BE5DC
9322E81DFF5E250DEB386E12A49FC9FBF9B4C25C3283F3CEA74B8278A1B09DA7
E9AE4FBAAF23EDF5A3E07D39385D521547C3AAAB8EB70549756EBA8EF445AF4A
497CA924ACCC3DD5456F8E2C7E36946A5BF14E2E959895F7C94F49137256BE46
4A238684D52792234869EAE1A6D8ADF4E138B79472D2A90A6CA99E2394CC20CD
3841733046175B20CEBE372327BF13428EED6A3E2FDF84C2DBA4B0AD584EE9DF
B51828D3B8F385846158C29C9AC3496CB9692DD10219697B2ED4D425C3957FD8
C4600D76E045C561216EF05D38177243C314877A69A1C22E3BEC611A2EE5A216
9B7C264CF6D1839DBBD78A40610F2C0D7C2FE09FFA9822FF55035AD52546970F
83EED2D30EABB1F303091EBC11A5379B12BB3F405E371519A53EA9D66174ED25
A2E55463EC71A97BE4C04B39E68112956117C8252DB6FB14AB64534B4BCD568B
246DB833982B38CDE7268BBF74B6B0C18091E1B1F87D32D66F4DD023D1F10D2A
7736A960F72AC01F733A11023832CD68FB6288A5977743F781214D8FA9C0C3F7
80001321D4397771F728FD9EE57CFE7D9192B887EC883EB1505068261DC40089
7B7D2820F06515CD74513521F6397FEAB3AD3572D9A8269430E407E357422461
1785FC2782047F4C0339D79B16862D939F3A37F78E4E2174E4FBF132539CB760
207999FF86F6A3EBE48EB0A1CA635450FDEEF79EB16D853F3BF4B41B05588453
D4417AEA07EB3348CA1A966A79D47C78CBBF71B6E2EE4333214506C249DCBF19
D4535A856FBF22993F5A31E5B07A543A7A73D8F1301E0A3B35304F7BDE15FB2A
FE9D953FA9AADCA0C7C11AD18110744D2FDF6230FEE9566E444C8BF8A93E8949
791B832EB077BFC3336ED8091B5BF8BF12D9C59C18A3B57937BC982A25B01D99
A2570DE249036F1907AFA4AE58F79FC00B5B34BC8C0AA918867369EDCACABB76
9B42093F446F31D861B151139BCB3B7B38645C84548CAFC1279EDFC388E5FA36
1C902FB416BCB2A08122F2B2F8D26A97E7503ECEC64864FD3B7B299A5754EBF4
FA6DED41E0CE7DE1136A89531ADBD9FAA0ED99F1421B48D6CF78C44D5E6F20C3
40E90852F23BC8641E2F550ED0D8D2ADED9204EB4B233CA1171853BA9BFE4048
D55BD5C1D73E439DA0D8CB32C55AB2142E0F710052EDAB9881CB048FF28AD181
A3EA9D346D2AF744D71C374614AE76037889EECC943ED493F261066799778942
0CABA0850F881CAC752FED681CD62F0D19B40EB14A78E77D17F44131CB9F1660
6E5DC83B9BCD027C364EB85260078FE6C87BAA8519BAA6FBE7780C65ACF67442
C93185D11269A29EF8FC89A8C921B2C27D3EDF2113DC372A8394F73E5EF40728
C3AC56329B4A7EDB6CCCDF2681CD7045C071521F81618B7E88A89B9443B0B854
D739F03288EE5E4C58299197107C44DA1C9FC02C39FFA8B159A978DCFF639F1B
76FFEE0A56823DC18C5F56928878390353A7E11339E1F3C1639F9FCF0645E918
53A347C152EA854DE4BE2CA17875249347B85A912B4786F7FE63EEE8CF96F5C1
E85A7EA4EC6635548C170CB423F9C94466F797AD3FCBFD09A71FC95E9F84A273
777EB3DF0E3B074D7A034FE778C145832B8F83612086BC8E64CB051491832035
55B6B18A89BE479098E7611FA99D40A2EDAA14A25D35112AEE71E6E9B328B583
E8123435BA88D98D57F5B3FE06E552EA003A94D0AB10D55C44945CD1E1808F2D
9695803017025BE314654DA2A84774CE8AF9F3CA82D061C1800F4A062971B20E
BB2DAD1824DC5E9C884F40A2A78A8D0518D368337267DE9F77BA2C9DFDE59CE4
456D96580346F12F550FA2011BA29C21A7BD5BAACA7005FAAEF08D2A80358179
64D54B7FEC67877FDDCD85E0B86C375F33104BBC76ED1505C6BA1D28A88DAC8B
E72EA9DD11A93C696786E318C55C9F67950B672FDAF952CF85F55E908A9F4F8C
0629B08368C3786E1614DDEC973190397EBEB121BA9FC4EAE40414674EC41ADC
09CAB33A2E1947BC44A25194115B5AD94CDD6DD512A9D739F83C4A463D1F2EB4
05112462A6FB7838C59E8667C06B85F41D2F84F6DB832EB989FFAA968E462D51
0EF8A3778F24FFCB945AC616383884F0C2CACAF8DBE8333337E734E7B6CCBCD2
AEEF0B3E9A7CA0C006FC738A602E157E97AD664E3D02E6D0CBCDAEF814121574
9517999A3DF5E8E4DE4C4EA6907BEFAD3089288B23EF9977D794B4679FFA621C
813F62BC6DABBCA7A74BFC5757CE9DEF67B948238BE7044571811B038DCCD7B3
8678DC2412E56A4C0127696768FB36ADD33842E634FCD4859052F4421A6FBE4D
8D6A6D8B5D6926D1AC1BD4B248716079769BB8F83722BD712F55D9CAE17F21D1
F44BEC47681014B209F247DA9887CF71A2CDB37AA913F2729091C50308345712
9E22D0831395AFDE33EF90B7BEB8C3B1EEE3676020EB119D5E6953920F57D380
493346A484CF7B1290F5E3615C10A288B3813304B33AA6606E8BEA31E95FC79C
A6A5BCB752785605E381235952CF4AFA77D1E20159A941AD962F6255DF401C9A
4AD6998A389D4204A271DA7D34520F6B650A3E86DC01D71A239D7E3C2E536017
2CB32D1C69E29E7730D6FD04786628140551C0FD0F146D63B329817CCAD95FA1
07EF0EA992DE8EA795E52A75DCBDD45941DAD75684CB04C5BAEA052358EB4C88
008303BBE99D34BEF355E8DF62A9104EE2BAFDAD7940FA7C3E785397147728CB
09F15DF7420AA98E6B1422464AD1642B911D9E37756324F567BF6E4B6B4913B0
D1B78E0D58CB2BAC73A5589EAE4AF1F591FBC4C3DDF382D449F14AECA49C26A8
B5EEFADF1BB95FEBB6D77243576C73AAA832C972B2A750B79D2ADFD718ED0B32
98455C7E5682ECAB1E68E0CA71BDA35A9C9633A1BA2EAEE635F2000DA5BB7999
567E4D1992C8209DC702EE164455104979B559664AAAB300C7130B34E4299271
3D7B0B5849013FD35B049F6A98B089880238D092C3AA1847BBE032B55FFE9B4A
89D393452FBC5A78EA2A1A5EF93C2F0DAD5ECC0ECB39A162994526F9D7C7C5F7
E77BE6BF851293F51D30CCB868FB230AA85E3D1CFFCA90D7C46B18E374839067
DD7A2B239938AA061463F83DB4EAE6C30609489D784CEB3B46B433A97B6911C6
FC44476543F5B91746EDD6C1A3EADD807239A8797ADA5A961256798E7EBAB811
F03C9A4F7D03CC0D9AA8F019A55BA3815A7EB70B651AADEDB76DF398CF337361
2BA330A8E0C94FA9056827681746A32B1AE76560B23710A0BA1AF5FD4790B24F
32080C9E0B8B1E1453CD1981BF75185A1A67BD3E01BCC6B2093941591DF92D43
3520816AD33C5E50374E601F2DDE8F49FDDC0F0FEE08F9BDD73DB7D042E11EC7
A37442C0F966B243087292350B7A24779A1BD56D5598A7A9B752B56F6A367B0D
B49EC09647A9A47726161577BD8F1D37D7D536689865CB6D823614320B6BA3CF
6E6C408CE6A2A30EF3B88CD3D869180ADEDF9F84309D53B9967CB12C08D952D0
0D153A50721D7A84C5857448A5610DA8FF4EC1E9B99C89CC3956A9B0421A0616
658EE9ACF5A77BB861EAF161492B6896DCB0171F7FB98F76C93FC32911142C70
76AF3141431F1B02527C2F27B1D389A81D36681171D73D5355F299720873BF40
B205BBC2876F198A7CA9F3AD7EC645CF768BFB055E1197123D5C12B45370B89F
DA86723368E84C6E50B69D9C525261D7569179D99905C8DEC95F3CE70E7300F8
76D7F592BF2F8ABF6C7EB81BA6B23A3E321E056593279B4F4BA408F792DE6834
CFF65688231E6AA748C61398A412C0D687AD5471BC2DD49CAF6BA287F8152A8D
97CC56A4AD91F133773B04F330CDA039F6E07E089CCF82EA54660E4809D9C6D3
953F4CB16A2EF49B28F35B0866453E2399731D839170652BD2422C6D56EA0C6B
290881F13D31C615B2391861589BA0F174FF4F7A86B4437C2B81B4B11525D831
0BFA6E14C08C4F5F299F506045B082B8B855C2A4B4C192F4C74AFB29DB848B32
A1C48F08D08E20F916BBD95E868CF4BEF2B2A318EC2EF009CD5BA44682B8B4ED
617C19BA5D9BB5CF7AADD39D62333884CA8A179CE6E75D8B0463B92D58E20F59
BCC661B2AB7663EDBD224F1D3E8E7A720917CC9E67FE9E25ABDA0B6D322C7FAA
AE6ED1E139116A8F12716457B6D57F207C761071CB41D3C2CFE37FA1F60A55F6
24807013F98DBDD64F25862FD63D0AA1B316AA1AB14CA90F7EA0CC628BAE77E6
66653E0D548BDA3EC7EC4570FAA5CA127369F4D85AFB843E39E45F4E2F11F128
33C8FD3F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMR10
%!PS-AdobeFont-1.1: CMR10 1.00B
%%CreationDate: 1992 Feb 19 19:54:52
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMR10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 44 /comma put
dup 46 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 53 /five put
dup 58 /colon put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 77 /M put
dup 83 /S put
dup 85 /U put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 107 /k put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
readonly def
/FontBBox{-251 -250 1009 969}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BC1F3352E22A1452E73FECA8A4
87100FB1FFC4C8AF409B2067537220E605DA0852CA49839E1386AF9D7A1A455F
D1F017CE45884D76EF2CB9BC5821FD25365DDEA6E45F332B5F68A44AD8A530F0
92A36FAC8D27F9087AFEEA2096F839A2BC4B937F24E080EF7C0F9374A18D565C
295A05210DB96A23175AC59A9BD0147A310EF49C551A417E0A22703F94FF7B75
409A5D417DA6730A69E310FA6A4229FC7E4F620B0FC4C63C50E99E179EB51E4C
4BC45217722F1E8E40F1E1428E792EAFE05C5A50D38C52114DFCD24D54027CBF
2512DD116F0463DE4052A7AD53B641A27E81E481947884CE35661B49153FA19E
0A2A860C7B61558671303DE6AE06A80E4E450E17067676E6BBB42A9A24ACBC3E
B0CA7B7A3BFEA84FED39CCFB6D545BB2BCC49E5E16976407AB9D94556CD4F008
24EF579B6800B6DC3AAF840B3FC6822872368E3B4274DD06CA36AF8F6346C11B
43C772CC242F3B212C4BD7018D71A1A74C9A94ED0093A5FB6557F4E0751047AF
D72098ECA301B8AE68110F983796E581F106144951DF5B750432A230FDA3B575
5A38B5E7972AABC12306A01A99FCF8189D71B8DBF49550BAEA9CF1B97CBFC7CC
96498ECC938B1A1710B670657DE923A659DB8757147B140A48067328E7E3F9C3
7D1888B284904301450CE0BC15EEEA00E48CCD6388F3FC3BEFD8D9C400015B65
0F2F536D035626B1FF0A69D732C7A1836D635C30C06BED4327737029E5BA5830
B9E88A4024C3326AD2F34F47B54739B48825AD6699F7D117EA4C4AEC4440BF6D
AA0099DEFD326235965C63647921828BF269ECC87A2B1C8CAD6C78B6E561B007
97BE2BC7CA32B4534075F6491BE959D1F635463E71679E527F4F456F774B2AF8
FEF3D8C63B283796A9AD847424B4E6508546C36223A3B17EB82A56592F27FC27
F1D49D5FF4BBC0E16231807AF7E195AA7D0D01C7566243448B222D57B811EAE6
DE9370F84E207DC9BEC731AD6040FD9B804FA14CA264B73136F9AF34390319F6
A543D5D4D7FDDDF2F76651E557683614521110DEC1CCAC426117DDA7D6CF1B8B
7879B21FDC78BAB3C944BCDCD6A65B67F3692F0A8D5E36FB783A63D4FBC9842E
2CBC2720A7206F42A99AEC79FBBA92A27965AF40A71E05E4BA8D7FC58C828226
7A8B47241F73590CE626EDA930A1D18D758636250D9D6A09E133378CD725F586
F40320EF186DDF87AF8C2F5470EADFF45B230623DD994111A1E8B4BFF9EAB5E6
E856EC1245CA3AFCFCF6F396CFFFDBE36B49D9C362DCE2AB872606153DB94794
E08B2D606DC8E8D447D5FF7EA0CB990DB940A5951BBB6FD4919B97FD653F0D10
2D2B7A868B757A68BFC53ADF8F88D7F4844A8FA4414EF33B2816750CF10C2510
688D9DCA5C19DACFC81E5E9F5BE0B89311C8D330F0AD6E39865395536828DA89
CD911522CC273C435E3D5D1888046B04E77002CEFCCA071BFC705F51E4142EB9
C98FBE9373D36B27E5C562AEA78D2174B4730947637701EFBB2FBA3063483F9E
84B361157F09290D30732970607C7D61AAE6F23C1682727520E2D8E78FAF1CE7
4A7F14523D626C8AE9911938D312B304BFD0611E20E3049E16BE204A18575C34
4F927C770CE14BF8BB2765123898CC7E4B605C524FBFCD64745AC674E2F03A77
4D88BD415FF70F0BF582E04990012320BC72DD08F3F9D293F09A45D72E76C5A8
F701AC1D2128E2E8B3FEB532CC4F900F7E8292CE9B627F3E3B8E5B3F0B1A5483
0338525A9CF5246E5FA4F88F224E7D208C5B5868A34E643E60741FA84918D6A5
4680F00A3848FF2B73B27B543434480EF0B79DD216BBF0A606B36C6D9423630C
1C7B9AA0F2E7ECB95D053B65AA05FF6BF391BF4E772EE778018EF9BA320ED49F
AAA3EB9F97BEAE8D2BE8E2C6D70148E8DD6A47962A2FCC9DCD6848CF3FC5DC78
ED40CCE32031FCFAE2737B412807F7C9E6494D0171FD59D330F4D11703DE086E
E2A97E7E9CA2A734F154BB6B05BF3EE31E143B331C43EAF8A6288B4A54A9A21E
2A03CCDB164A503ACDB999181CA828EE39D684D048FACDABC5B57218EB1A6AC8
B7356D4ADFBD16ECCFCF2671EC881C5400A16FE9266B2ABEF0FA70D27CB4E489
A7379BD912296E6FA9E901F4327642DBDA9BF2B3172E3823CE3E11F455DCD200
6F079B73B58DF4002F04E2F3945CE4C392599EFA89808E36FC67AC4D7F3E63B6
3E3664E7F771F6C7DB51C8299B1400E457283467DA43E4B146E4F17BE9A359A5
557B9DC1524F5F0DCFED52E550B1E5C10954F0DF60C09932A12F1F5918952C5F
F11B1FA5878EF6C327DA9E2B3C7EBD5F04A6CB08F418B2AD65D5742FDBBE18FC
63EB261C3CE12180173C3EADF5B5E0D4F350FF5E2E61C7482656127988F9EB7F
BB18D1A5FCBD0EA0E7BDAF39511BF60DAA44CEA5F7E263007922817A7A6C0800
75B8F7788F3F5261877F2952093986F67EDDC6C9C895627494A75687C01173AC
CFEEDFC8316805EC51C57D8CF8D03A904E4AA83DB7E2119FDD5C308C12613719
A972EF986F9D7A6842B309D53FFFEAE2E2738ED4C4CF54D0B3DC6488F3747804
F82B6E75E89F0EEA2DC00D4AC5A54137465E15BEB1D39FB66268ED33195F3099
8B74A4B4CAAC9A28CAEF62070130F69E3D71F079D11BCB6AD4592831C0E5961A
83CB1A07475F3B06BEAADA9B00FC3F28B3D5BD0F4D070336583751028293DD57
4A55B371EB08CC9388C3A28E51D832C06F81DC91EEF6097BC864030A48F00AF5
09DE56599F0DB85BB5F9CD12F51F5F8766A437943F3837CD3A97CC197E53B848
E9D8E6FE06361AF3E38D182FB4B471335702EB2F80EBE71B3A85454F0B35E643
23331621BC9322E3E358C9E2AD281A2BA41AC670CF7B600A1F5939BB89E73E88
9745605EDFC2762EF0C7FB9AB257A9E51C5138D6B64780AB0073CE65E2B42D65
333D146638DD9B80E9746C8F7E4DB66CD9ED2762136AA66A638325789D4EFB60
4DC1B44AF1CE8002A3999EFBF8D018D8D9DA7A091D38A8B2220D4E9C660321A8
26EDD34228765DD5F48B3C2EA86301DB27B4AFCC982551FACF976B2AB76E97F3
FCFDDED68B68222DC12330D3569B01676F301697F07B8DF01A3414F00C9330A8
B7C8D8F44A76858BD4C4AD66E15D64D4CF79EC25ADB72C58931AC01298EF83E1
104AF0A6805837F53CAE814EE54D882CF18B801950BAD0DFC95A117F4762928B
9F585F724C8BC59E8DAC9283D4675AAE63E677FD6857B099BCA5844E36CF61D4
BDEDE8E9C746ED7FC0FCE3759D10288EE2395F355C8DC10822DCEB38D46C92FE
F710BBE65D17183ADAE258EBE75F49D51138904D05849CDCAED4D6439E2AFA5A
26BC7B45624A11283F792AD6C69B9474532FD3597C2EB2CE8388A54A37C05C29
A3B428FE071DDB3828677E6A3EC4CC3685FD17CFB4FAAF36E951BEC9950B49D8
C88EB702294D2EB942DCF34454F63454EAAA923DC2420531409C75F663944255
5B99DECBDB119B18BBAB1C4D8FA84018D82F8EB0B5BE3D15D1C30A6308428D94
312120464C62C2736F502FE3ADFA00650E03D7799F1AFDBC3EECC958CF0B09F0
BB5057609BA46FEF352122EB473F9A2BB687F8981489AE9B6300302E4402C65F
169677874443CB006B467DFEB34AA3F96F4F845CA798D3BCD8C831617C528758
2FFDCB7C8FE91CA44DFEAEE956D3886AAF01A71726D0EE4B6E2FECA7A5003C24
62BB96E5B24F0702BEC8822E3C7EFEB26AFBC062A29AFC44CE1A5A6E9E180166
7204FC858A1627A1C91116718DA95E598942939054EE9E4883578792F47E2C31
7CBA6DE05EECE86DC246DE95A38D048788A43669B3733F143293C02732EF1C1B
02A850E9FCC176F4C416FF98AA8966152275FD3A0F309671B432DEABAAE2ECD7
7DCC3835EEC99FE309D4D7827312E7A4BC656D92A5FFC755CCD6C40A328AF082
BA4ED20D81C59BBE9F78C67785EA818ADD28C9FDF8A79E697A97B6BC6F53B940
86A7D7A5F6CCACCC5A66FDC1024F786F932F4F8B4384A7A4A039AAD62F588292
191342EDE3D5CE2C72743ECD5BE6AE6037337154893E1D775930DEB3E3FD2191
8DFA21C52400ED206D69E87FEEC2C4166E42244961CF897FA19A59773AF45153
2F8D34F3C2AC02263535ACF855107C1AD079345AAE52B45B05FA635F707E2E1C
F363FAC0B19F286D389113AAA75EBD09033866E8490BCCED7AD5E673B8DB97FB
CBB72D2162D34B4E93A3FDF15D54796806F15C81E3FAFFC7B85E64FDD064A667
FB279C2FDB2D830B8A327D8ED82EFDBC51164A88A75921D0051A629A4FF38E15
231A712A3546655276D359FF786289E65E1311FCC88D4C76A41E42021383C208
B3666D5ADB73DD0E314612C728E829B2DA67096442718C25EF7C35E8F27940A1
65340C052E145C5503FE402142BF2306BFD8BE08DE1CDDD39F31B8ED33D5C78A
BB886844A96869D0FF44BD6DA47CD074CEC30562F6DCFD982384CDA0FD649510
B275723D0663CA4E8ADF9787A0A0FA331CD62CFF6D39A368AD6A812F627E6D5E
70638AB73A2624975320914E21A80125007F542BA913F5FD1AFD62808DCCCB15
8CED47638A72C2B034A660569DB4166D10A411256624A8DA3063C8DDF9E87D0D
CA243A8157891D4818B9290566BD6E00CB218F4A3A9727505ABC2094DD2090EC
AC29F02B1EBD01695AD21008C9B45F4BEE5D02E89C981C7A04984B476F15735F
ACBF04BE17C8754BF45941E4C0502C30FF0DD874589C62F2D786FF24701E9A58
479818D534E05B07A37B2A3FAC92AB76CD3ABDE132D3E3AADB596F1D7145FA2F
5958150D1440C6E5054AC9E1C7B91A662F1A7A8A5AFB7A7774A1CBD3E9CB94D9
7001CE10BF8A2AEB9B95A8D36BDD5F6C0ACA5FA25A3A9E7D3DD2E03E0D69CC9D
2CB14B1563F4C333A11CAAEDC86B9714D39DB31468A740C779E53884ECD68C3D
B0308BC9776684684B648984DF7E7776D542B6D69ECF8BBD03E084D14043F72B
AE73DEE450953E0605E92E199FE715D6CCD64AF5E91F6309E6DFEAF0411A3165
1F472033FF6621E0D558C34F0A706C8DA0019AAD863044474CFACCA5BE849673
A31029763A439184E63E943C6D07033A4C3158E35855CDDB20136CB58C4B51FD
841EAD7A54A25F0BBBF0AB6DF5EB7921876719C546942B48050A48D431587393
3B4C54875DD7AF5E068776F4B98E90ECA8AECCCA8A72AE0AFFCB2BCE3CDC1507
30C5E7EAD72086D56E8F3EF3711F89530B836BDEBDB14B62F78B32C9FD2000A4
FF0FE5A1D9E762719EA90FFDB5E7B84FF9C477992E4E0398E47124418CBB92BC
09D3A8FA6FF61693DA6887DCF6163E1AA4DDBC69C9B7F6A76375BD823C443CF0
E4B5633FA36E100221E8AE3FB1E6426167578FEDB14E9679DBB95E9F363F3D00
A08C886CC4263017E08DE49B1AEE622AE41C80D880038B1C28861A305C9014C7
5B365FA8014792FB3B72EC74077006F248FDA5B4D0941FE1A657A00F32C09400
B24829041DB30E89228C298C2C528713A83FEB4488A125F54B196FEC66E991CA
5273D0026C80F6C3FA49EBA1E59FB871EDD1231B943E008577D565C694825DAA
8EC6D81970E8C4E8E0EFBFE25EC2A9F1A9CC0E131D7DAB3570A3688B1E7668CB
73FC3B07AE329CED255895BD80D4DFE6BA221C36F2371F01714C337F600C66E9
133A9ABC29DFC118DC9956BD3B9228E7802D0E8BB05F2B5D72B7120A3E365164
2A4658C12F3BA4142079126609FD4B0FD65869A6ADDB9116B35DC4D11BBB45FE
33BF890DCC9CC226846E1D34F75A158B7F4D419B3247565F680995A5C93A643B
49681424B617E30CBBCB2E8BF281D2841809D5949A53746D288654C7FD84E9A9
D6DE98090962FAA6068EB55FEE3C2442B26DE400193C84262A2001C72DA3465F
7C37C2E96AF1246DD77CB9B3E340578D01FC28D9F7159AA771048D023F0889E6
444F3FDD4586C21A23B389C2837EB3A4A8C63AB6581F7CA1D96D8DAFF4EAFBBB
3DCA21FE98CBFF6E93046044C456163A655164C80F48DED4B3ED9EEA28990302
29CC0D29ABA55C6C27D3EBB9F675982240C1FC4B0C1FF7EDE9131AC4278D7298
885CC5366989B2A438D2A97D4B0FC1BE0E4991EAE28A96FB21AB4AAB19DE19D7
35C56C496E6AD6054BFB21D24496E45B3A797B94DA38B8662C9D9CEE6C237992
1DEED19CF6F79483225C58CB3C42A59161B69D6B820E1A593FC4D2B444EB2A61
E7DE0CED3C6E65A1BE0610BA07DCAC66807F500F42664C0853F8040B40CD7B75
3D8828EE4997398240DF040161AD29899DC2F633F9A30CCB3690A8DD3EC0D2F8
5F6E3921FAC406FD4B5C82E31B37ED966F21DE9407A139756E1691CE5B473036
4BAA11791F16AA122D7DB7B13DBB901040171DEA4FAB0D158E6EA20D5322D1A3
2AC7250006B2E85D2CF0A413B6835A66C6EC5E41E626DDBAC1EE130F76EBD159
9C43354B22F59A5015688E99C91D4E137774BFDBAC654CA0C41030493177A6DB
753B86B84DE8E061EF3374C18A8C6C03CF9DA3E51A0DFEE74F53ECF82CC4215B
B481D9339B3CB7237BB97ACA180F03EF68D9B0C6698732DCEC3A8382794AA1F3
898F5A31C9CA63765F4ED9E7C2D00AD789E312240566906364102A0525B34B7F
4D9CBACB42462711BB04A62EB5C1AD6D525988CA94328D755FB235FF13AC5CDE
2BCC6C76D18855A2CC7CE1D490CAA2D95299DE33FC1BDDA9D7BC9B798A93833C
90E7F84BC07FBA9CBCF43972DF1459FA91A6D542D3A885D5887B83D58B4424F5
6945133DE6ED72978CDAD6AB6EA434C4421AC32FB0B11BF359BFDBD3EBBF6FF8
449EEE7EBAA4FF6188858C5CFFF54A0ECB0F32C49CDD6FA3C82926A0CC9D8C14
4CF1AC9E7EBFC0C67EECD70A35FC77B16A156356363458104327F5F93CD2FEAE
EDC900D6ADE30A890914F7CC1E7D197EA41E18C6DC35F2A7E5CF8EE468934D0D
D02C2C17257DD00404AEAF675A95E4BB4851E0D4DD081EAF4910FDD87C0B9384
75E0A472FF15CDCADE3D7157A0732687C1C480EC31E84BB5CB0DB00DF5B89886
592478BB1221E6ACE21C903BFBE41BE39C3B288E5B20ADA1BB60B82899459705
ABB1B8EE597456757E12D0D6C2F1B278AFDAED884E251E1A097075EB15C77F1B
AAC262E45696C4D15A2757C6C1C42A0548E10B033481324450CE6FE168E556B1
6E9A1FD19D6276BC554341F3B0354B40C91735D81D2CBB8B7057F60481BC7D1A
F4D23F967E56396F2CA8EB2A3CEE10A2A8A55697CB9A191CCE9FD70EBFC17374
DB5AD34B5B6942753AAEFE3250F05F1924843061C0C57D27EAC3C2D33AC9F110
80B01DE9BFB0C4EF3302380CCED19B64F99209E763AFF230AB2C5D4DDE6112B9
E46D0DC59923423330059E33C33BD3B1741F52D645F719C32479684E3601BDD6
83541F347D803E30C2DDDC52BC381F0C486895585B809A1F54DE1777B63056A4
9F00C714542077CF051DD113A4E91022BD7C68276416934239763B5B00460826
0F4A5D8CEEA247D12CEC98CBE3DD1A218AB9968C16BDC1E3C9C741D0F604A6E1
87721F84035A63FFF11F7DBA2B732518961D8890D0FBFD573EFDB0716A59B5F7
1BCF038E71075B102E1037B32779575BB3C687482F16C1CECEDD4E9063B5312D
FD61F75195CF86C15DF16BF84C34E0BC314632589D81D0C55534BB0CE6CD693C
890F7D05A6E1BFD94C7BB376824909ABE0CAF8C3B6557882C91E945700B3E675
CE7A23907B4ABFFBE6A0E7E9BF8DCD4A29335D55A92BE886D9B6AA684946DE77
26D02F912457A8984BE3EA4B0F38C2AB93D36EDD916B3FBEFDDE8190D9758ADE
169AB9C54899396D14B48B78DF233247E1D29549620FE58F91CAF8045AC9D98E
DFD31999210E3B68576AEC0B0A83803F706451D523C8EB1A504067E38A291E1E
1A7268D08F4FF0762978E430D4962257ED510B7B1BE632D381F5D43F29D5FA8F
77857BC08B070F64B204392F9B48E581ECE0E2FF9CDBEB88186E1A14CF5321DB
788D8A34C7E6E5D8994B913702CB45D4F828A13A825F085E00ABDD1EE69CF303
228CD9C6A5C64E12E5C50C1DB5770EE72E6D9EDB9BDD2DCD78378F4BEF72A32A
21298B609AB0EB284C5FE57AB4A0CF426117D8B916245834EE07EEC1F5CCCE95
11AF375CA9F2045B99AA7C083C22E2DF37F0D7455C53C72F38D3E69325E79057
32B6783DAEC9F29548545D1846D00674B3E44367CAC6C45719F6525A998A5AC2
5B0FB29CB1218D8E8F441E655BD6F042AB2BB994C206DB6BEAF50ED3B11B40F8
995CE15F8680FA6B6F803D1A9A164FABDD2F7AA8A90435358C4FB34AF7EDAB7C
7724EC80D88C6AE4686AACAC9489F15B1A3727FE7EF663B13DDC52CD29FFDC57
F492EB6A7B85250BAEBAC217C4129DBA0B7FABB902EC0906B6523F32C077C89E
E0C4764105F597F030A291AA5168861789E74CBD542AE169CBD69B8E3C989E8E
EDB06C6552278CF52C2226F79B0051CA805745DF5BADD7918B9F3B1A90654C4F
BEB6EB5A5FAB73D15E23A3BF71E7DDF2388CD269F8463E7BBC97F462AB36BC8A
46D65BFE3BBD1AF966106BDAE69D044D949E43E8980604D90F7F23706B34E458
52D1F704D60659EDE9A157EDE60C2A1E9D57AE7D0BF2BB59EA2E09A435BA6A50
B4318522E185885EE9776B1E3504BF2F758281151CCF9E68BFDF1BB34821FF4F
94840BE3545EDE60C9C5E432250A32448E728B66CEC05B375F454DD2A57F041B
B4EAD46B22C90BDEB96595505A2246C8480FA01A0A01B441BE1CB5DB3708BBFA
080B95EBBA8DFA62C51A76C14D6B7B0CC2E81B50FCD14DC7AA0DCD8799B0D418
8EFB592457BFDD383469633B78D3D051015DB41BA6F068DE54F687C986D6DC7B
CAEC0275013F8C88AB6F86E7B50081F6F957A505D49D7B1FC9086C03E1A988FD
9D272A8AAB19E90A8CD9FB660EC5E8BCD7761D5B6B841E707E04C1AA41289CD4
D1972790959A9CB6BA3BC0C506758404EB521DC3061C478FAEB9FFFC355EC19C
67E962A73A9EC224A4E21A865339F76FC78800F5F53974BCB153C4C6E3561B56
D377B3C730D17D8757ED4786C8BD9D21E5623A80A3C18EABF507AC0FBA2D11BA
C907343E706B281399C6545E85A003D167F049752BF059D1B35BAD0CDA269D9A
1D050ED0EC3908425B2775503CB55C9281093C6AFEC12D051F894251B6F89079
A7EF7BE85A28857BDAF6D7FD6DEC59D2637C5A256A2257E985E723A060BBE9D3
E9E4C4B51A3DE5028381CBEE486A1E7D80CC5DDEE4A0B0359703E4BE832C0574
6FC82E995CF6ACF3AF8C325526B3A78E651D330E19CAB836F55DD4AD180D8802
30F740BB60CB291F780FE0A46EC75226F36BBD8D52DB253D4C2764DCD81D65B0
10E6FB1B10A36F9A75624AE8B2B67829C508D73D054AD03F013A11CA257930A8
7DA23CB5CEAB3A00A581B4C2643292B7A573124F814E4791F6BC4CE9DB357E90
0E00C74D3C8FED8CC1C2D52BB60A8F3D4D9A0C84E1BFBBBC940F35D7AAAE6A61
920A99B03F147CBD9A5AC294971155E4E3DB47273C29B985FF63A2C3E79B5989
B7D80307D3F8372CF5B4E35D61BF4B44C2991BE416F76F466E9058DB65231FBF
30CBF6A498490F81367A2DB5F78892108E122A335716E44584C4EF19C682E523
AC99101089FBF95E9EC72910C0106D6634E72341C82B1DBC3DBD97D9C0D3F7A6
8DBFAF1C2460425A0D9DFAF865F5250DB404D0B3CB6A9CCBEB66A7E60168729C
D39E1E53286AB4CF481B9A852D5DFE19B13CF3496E5651709F0CD4A2059D5F22
54664B971381BE6FE1E5B6FB159CC5CE60E53E13008733D533A885F6692F0609
48FCA061265908FF28694ECD6AB6C8A323C4020B32B43AFA8DC7192F123E4D7A
C3E746E34BA76FDE9F111E4B1461C006F0B30175B31B6D50518B28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258431 52099146 1000 600 600 (timings.dvi)
@start /Fa 139[51 52 51 2[66 73 111 36 2[36 1[66 40 58
16[96 3[90 14[99 13[66 51[{}15 143.462 /CMR17 rf /Fb
134[44 2[44 46 32 33 33 44 46 42 46 2[44 1[23 1[42 25
37 46 37 46 42 11[62 1[46 5[76 6[54 1[63 60 8[23 4[42
1[42 42 42 42 1[23 1[23 44[{}33 83.022 /CMR10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
letter
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 0 a
SDict begin [ /Producer (dvips + Distiller) /Title (CS 311 Project 3: Uniqify) /Subject (CS 311 Project 3) /Creator (LaTeX with hyperref package) /Author (David Merrick) /Keywords (cs311 ``operating systems'' pipes signals) /DOCINFO pdfmark end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.1) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray Black 0 TeXcolorgray -300 -360
a
SDict begin [ /Page 1 /View [ /Fit ] /PageMode /UseNone /DOCVIEW pdfmark end
 -300 -360 a -300 -360 a
SDict begin [ {Catalog} << >> /PUT pdfmark end
 -300 -360 a -300 -360 a
SDict begin H.S end
 -300
-360 a -300 -360 a
SDict begin 12 H.A end
 -300 -360 a -300 -360 a
SDict begin [ /View [/XYZ H.V] /Dest (Doc-Start) cvn H.B /DEST pdfmark end
 -300 -360
a 83 x Fb(Da)n(vid)27 b(Merric)n(k)-300 -57 y(CS)h(311)-300
162 y(15)f(F)-7 b(ebruary)g(,)26 b(2013)p 0 TeXcolorgray
0 TeXcolorgray 1063 489 a Fa(Timing)43 b(Plots)f(for)h(Assignmen)l(t)g
(3)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray -300
4317 a @beginspecial 25 @llx 185 @lly 585 @urx 605 @ury
5760 @rwi @setspecial
%%BeginDocument: figure1.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.0.0.783 (R2012b). Operating System: Darwin 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64.
%%Title: /Users/david/Dropbox/Winter 2013/CS 311/Assn 3/figure1.eps
%%CreationDate: 02/16/2013  13:36:23
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:    25   185   585   605
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:    25   185   585   605
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode 0300 7260 csm

    0     0  6721  5039 rc
85 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 6722 5040 rf
6 w
0 4107 5209 0 0 -4107 874 4485 4 MP
PP
-5209 0 0 4107 5209 0 0 -4107 874 4485 5 MP stroke
4 w
DO
SO
6 w
0 sg
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
 874 4485 mt 6083 4485 L
 874 4485 mt  874  378 L
 874 4485 mt  874 4432 L
 874  378 mt  874  430 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 841 4630 mt 
(0) s
1915 4485 mt 1915 4432 L
1915  378 mt 1915  430 L
1832 4630 mt 
(0.5) s
2957 4485 mt 2957 4432 L
2957  378 mt 2957  430 L
2924 4630 mt 
(1) s
3999 4485 mt 3999 4432 L
3999  378 mt 3999  430 L
3916 4630 mt 
(1.5) s
5041 4485 mt 5041 4432 L
5041  378 mt 5041  430 L
5008 4630 mt 
(2) s
6083 4485 mt 6083 4432 L
6083  378 mt 6083  430 L
6000 4630 mt 
(2.5) s
5813 4832 mt 
(x 10) s
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 80 FMSR

6039 4758 mt 
(4) s
 874 4485 mt  926 4485 L
6083 4485 mt 6030 4485 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 603 4529 mt 
(-0.5) s
 874 3971 mt  926 3971 L
6083 3971 mt 6030 3971 L
 773 4015 mt 
(0) s
 874 3458 mt  926 3458 L
6083 3458 mt 6030 3458 L
 673 3502 mt 
(0.5) s
 874 2944 mt  926 2944 L
6083 2944 mt 6030 2944 L
 773 2988 mt 
(1) s
 874 2431 mt  926 2431 L
6083 2431 mt 6030 2431 L
 673 2475 mt 
(1.5) s
 874 1918 mt  926 1918 L
6083 1918 mt 6030 1918 L
 773 1962 mt 
(2) s
 874 1404 mt  926 1404 L
6083 1404 mt 6030 1404 L
 673 1448 mt 
(2.5) s
 874  891 mt  926  891 L
6083  891 mt 6030  891 L
 773  935 mt 
(3) s
 874  378 mt  926  378 L
6083  378 mt 6030  378 L
 673  422 mt 
(3.5) s
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
gs 874 378 5210 4108 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
1027 -740 27 -19 -79 56 -35 26 -8 6 -555 399 -4149 2988 4684 -3373 
-62 44 1079 3827 10 MP stroke
/c9 { 0.000000 0.500000 0.000000 sr} bdef
c9
1027 -48 27 -1 -79 3 -35 2 -8 0 -555 27 -4149 196 4684 -222 
-62 3 1079 3922 10 MP stroke
gr

c9
0 sg
2642  283 mt 
(Uniqify using 10 sort processes) s
3138 4773 mt 
(Filesize \(KB\)) s
 521 2889 mt  -90 rotate
(Time required \(s\)) s
90 rotate
 857 4528 mt 
( ) s
6067  420 mt 
( ) s
1 sg
0 334 1166 0 0 -334 4857 772 4 MP
PP
-1166 0 0 334 1166 0 0 -334 4857 772 5 MP stroke
4 w
DO
SO
6 w
0 sg
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
4857  772 mt 6023  772 L
4857  772 mt 4857  438 L
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
5308  573 mt 
(Real time) s
gs 4857 438 1167 335 rc
c8
346 0 4926 530 2 MP stroke
gr

c8
0 sg
5308  722 mt 
(System time) s
gs 4857 438 1167 335 rc
c9
346 0 4926 679 2 MP stroke
gr

c9

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1196 4582 a Fb(Figure)27
b(1:)p 0 TeXcolorgray 1560 4582 a
SDict begin H.S end
 1560 4582 a 0 TeXcolorgray
0 TeXcolorgray 1560 4582 a
SDict begin H.R end
 1560 4582 a 1560 4582 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.1) cvn H.B /DEST pdfmark end
 1560
4582 a 0 TeXcolorgray Fb(Uniqify)h(using)f(10)g(sort)f(pro)r(cesses.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1929 5889
a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.2) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 3816 x @beginspecial 25 @llx
185 @lly 585 @urx 605 @ury 5760 @rwi @setspecial
%%BeginDocument: figure2.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.0.0.783 (R2012b). Operating System: Darwin 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64.
%%Title: /Users/david/Dropbox/Winter 2013/CS 311/Assn 3/figure2.eps
%%CreationDate: 02/16/2013  13:35:58
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:    25   185   585   605
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:    25   185   585   605
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode 0300 7260 csm

    0     0  6721  5039 rc
85 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 6722 5040 rf
6 w
0 4107 5209 0 0 -4107 874 4485 4 MP
PP
-5209 0 0 4107 5209 0 0 -4107 874 4485 5 MP stroke
4 w
DO
SO
6 w
0 sg
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
 874 4485 mt 6083 4485 L
 874 4485 mt  874  378 L
 874 4485 mt  874 4432 L
 874  378 mt  874  430 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 841 4630 mt 
(0) s
1915 4485 mt 1915 4432 L
1915  378 mt 1915  430 L
1832 4630 mt 
(0.5) s
2957 4485 mt 2957 4432 L
2957  378 mt 2957  430 L
2924 4630 mt 
(1) s
3999 4485 mt 3999 4432 L
3999  378 mt 3999  430 L
3916 4630 mt 
(1.5) s
5041 4485 mt 5041 4432 L
5041  378 mt 5041  430 L
5008 4630 mt 
(2) s
6083 4485 mt 6083 4432 L
6083  378 mt 6083  430 L
6000 4630 mt 
(2.5) s
5813 4832 mt 
(x 10) s
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 80 FMSR

6039 4758 mt 
(4) s
 874 4485 mt  926 4485 L
6083 4485 mt 6030 4485 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 773 4529 mt 
(0) s
 874 4074 mt  926 4074 L
6083 4074 mt 6030 4074 L
 673 4118 mt 
(0.5) s
 874 3663 mt  926 3663 L
6083 3663 mt 6030 3663 L
 773 3707 mt 
(1) s
 874 3252 mt  926 3252 L
6083 3252 mt 6030 3252 L
 673 3296 mt 
(1.5) s
 874 2842 mt  926 2842 L
6083 2842 mt 6030 2842 L
 773 2886 mt 
(2) s
 874 2431 mt  926 2431 L
6083 2431 mt 6030 2431 L
 673 2475 mt 
(2.5) s
 874 2020 mt  926 2020 L
6083 2020 mt 6030 2020 L
 773 2064 mt 
(3) s
 874 1610 mt  926 1610 L
6083 1610 mt 6030 1610 L
 673 1654 mt 
(3.5) s
 874 1199 mt  926 1199 L
6083 1199 mt 6030 1199 L
 773 1243 mt 
(4) s
 874  788 mt  926  788 L
6083  788 mt 6030  788 L
 673  832 mt 
(4.5) s
 874  378 mt  926  378 L
6083  378 mt 6030  378 L
 773  422 mt 
(5) s
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
gs 874 378 5210 4108 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
1027 -839 27 -22 -79 64 -35 29 -8 7 -555 453 -4149 3391 4684 -3828 
-62 51 1079 4301 10 MP stroke
/c9 { 0.000000 0.500000 0.000000 sr} bdef
c9
1027 -47 27 -1 -79 4 -35 1 -8 1 -555 25 -4149 190 4684 -214 
-62 2 1079 4324 10 MP stroke
gr

c9
0 sg
2642  283 mt 
(Uniqify using 50 sort processes) s
3138 4773 mt 
(Filesize \(KB\)) s
 591 2889 mt  -90 rotate
(Time required \(s\)) s
90 rotate
 857 4528 mt 
( ) s
6067  420 mt 
( ) s
1 sg
0 334 1166 0 0 -334 4857 772 4 MP
PP
-1166 0 0 334 1166 0 0 -334 4857 772 5 MP stroke
4 w
DO
SO
6 w
0 sg
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
4857  772 mt 6023  772 L
4857  772 mt 4857  438 L
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
5308  573 mt 
(Real time) s
gs 4857 438 1167 335 rc
c8
346 0 4926 530 2 MP stroke
gr

c8
0 sg
5308  722 mt 
(System time) s
gs 4857 438 1167 335 rc
c9
346 0 4926 679 2 MP stroke
gr

c9

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1196 3514 a Fb(Figure)27
b(2:)p 0 TeXcolorgray 1560 3514 a
SDict begin H.S end
 1560 3514 a 0 TeXcolorgray
0 TeXcolorgray 1560 3514 a
SDict begin H.R end
 1560 3514 a 1560 3514 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.2) cvn H.B /DEST pdfmark end
 1560
3514 a 0 TeXcolorgray Fb(Uniqify)h(using)f(50)g(sort)f(pro)r(cesses.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1929 5889
a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.S end
 -300 -568 a 0 TeXcolorgray
0 TeXcolorgray -300 -568 a
SDict begin H.R end
 -300 -568 a -300 -568 a
SDict begin [ /View [/XYZ H.V] /Dest (page.3) cvn H.B /DEST pdfmark end
 -300
-568 a 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 3816 x @beginspecial 25 @llx
185 @lly 585 @urx 605 @ury 5760 @rwi @setspecial
%%BeginDocument: figure3.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: MATLAB, The MathWorks, Inc. Version 8.0.0.783 (R2012b). Operating System: Darwin 12.2.1 Darwin Kernel Version 12.2.1: Thu Oct 18 16:32:48 PDT 2012; root:xnu-2050.20.9~2/RELEASE_X86_64 x86_64.
%%Title: /Users/david/Dropbox/Winter 2013/CS 311/Assn 3/btguard_encryption.eps
%%CreationDate: 02/16/2013  13:34:34
%%DocumentNeededFonts: Helvetica
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox:    25   185   585   605
%%EndComments

%%BeginProlog
% MathWorks dictionary
/MathWorks 160 dict begin
% definition operators
/bdef {bind def} bind def
/ldef {load def} bind def
/xdef {exch def} bdef
/xstore {exch store} bdef
% operator abbreviations
/c  /clip ldef
/cc /concat ldef
/cp /closepath ldef
/gr /grestore ldef
/gs /gsave ldef
/mt /moveto ldef
/np /newpath ldef
/cm /currentmatrix ldef
/sm /setmatrix ldef
/rm /rmoveto ldef
/rl /rlineto ldef
/s {show newpath} bdef
/sc {setcmykcolor} bdef
/sr /setrgbcolor ldef
/sg /setgray ldef
/w /setlinewidth ldef
/j /setlinejoin ldef
/cap /setlinecap ldef
/rc {rectclip} bdef
/rf {rectfill} bdef
% page state control
/pgsv () def
/bpage {/pgsv save def} bdef
/epage {pgsv restore} bdef
/bplot /gsave ldef
/eplot {stroke grestore} bdef
% orientation switch
/portraitMode 0 def /landscapeMode 1 def /rotateMode 2 def
% coordinate system mappings
/dpi2point 0 def
% font control
/FontSize 0 def
/FMS {/FontSize xstore findfont [FontSize 0 0 FontSize neg 0 0]
  makefont setfont} bdef
/reencode {exch dup where {pop load} {pop StandardEncoding} ifelse
  exch dup 3 1 roll findfont dup length dict begin
  { 1 index /FID ne {def}{pop pop} ifelse } forall
  /Encoding exch def currentdict end definefont pop} bdef
/isroman {findfont /CharStrings get /Agrave known} bdef
/FMSR {3 1 roll 1 index dup isroman {reencode} {pop pop} ifelse
  exch FMS} bdef
/csm {1 dpi2point div -1 dpi2point div scale neg translate
 dup landscapeMode eq {pop -90 rotate}
  {rotateMode eq {90 rotate} if} ifelse} bdef
% line types: solid, dotted, dashed, dotdash
/SO { [] 0 setdash } bdef
/DO { [.5 dpi2point mul 4 dpi2point mul] 0 setdash } bdef
/DA { [6 dpi2point mul] 0 setdash } bdef
/DD { [.5 dpi2point mul 4 dpi2point mul 6 dpi2point mul 4
  dpi2point mul] 0 setdash } bdef
% macros for lines and objects
/L {lineto stroke} bdef
/MP {3 1 roll moveto 1 sub {rlineto} repeat} bdef
/AP {{rlineto} repeat} bdef
/PDlw -1 def
/W {/PDlw currentlinewidth def setlinewidth} def
/PP {closepath eofill} bdef
/DP {closepath stroke} bdef
/MR {4 -2 roll moveto dup  0 exch rlineto exch 0 rlineto
  neg 0 exch rlineto closepath} bdef
/FR {MR stroke} bdef
/PR {MR fill} bdef
/L1i {{currentfile picstr readhexstring pop} image} bdef
/tMatrix matrix def
/MakeOval {newpath tMatrix currentmatrix pop translate scale
0 0 1 0 360 arc tMatrix setmatrix} bdef
/FO {MakeOval stroke} bdef
/PO {MakeOval fill} bdef
/PD {currentlinewidth 2 div 0 360 arc fill
   PDlw -1 eq not {PDlw w /PDlw -1 def} if} def
/FA {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arc tMatrix setmatrix stroke} bdef
/PA {newpath tMatrix currentmatrix pop	translate 0 0 moveto scale
  0 0 1 5 -2 roll arc closepath tMatrix setmatrix fill} bdef
/FAn {newpath tMatrix currentmatrix pop translate scale
  0 0 1 5 -2 roll arcn tMatrix setmatrix stroke} bdef
/PAn {newpath tMatrix currentmatrix pop translate 0 0 moveto scale
  0 0 1 5 -2 roll arcn closepath tMatrix setmatrix fill} bdef
/vradius 0 def /hradius 0 def /lry 0 def
/lrx 0 def /uly 0 def /ulx 0 def /rad 0 def
/MRR {/vradius xdef /hradius xdef /lry xdef /lrx xdef /uly xdef
  /ulx xdef newpath tMatrix currentmatrix pop ulx hradius add uly
  vradius add translate hradius vradius scale 0 0 1 180 270 arc 
  tMatrix setmatrix lrx hradius sub uly vradius add translate
  hradius vradius scale 0 0 1 270 360 arc tMatrix setmatrix
  lrx hradius sub lry vradius sub translate hradius vradius scale
  0 0 1 0 90 arc tMatrix setmatrix ulx hradius add lry vradius sub
  translate hradius vradius scale 0 0 1 90 180 arc tMatrix setmatrix
  closepath} bdef
/FRR {MRR stroke } bdef
/PRR {MRR fill } bdef
/MlrRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lry uly sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 90 270 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 270 90 arc tMatrix setmatrix
  closepath} bdef
/FlrRR {MlrRR stroke } bdef
/PlrRR {MlrRR fill } bdef
/MtbRR {/lry xdef /lrx xdef /uly xdef /ulx xdef /rad lrx ulx sub 2 div def
  newpath tMatrix currentmatrix pop ulx rad add uly rad add translate
  rad rad scale 0 0 1 180 360 arc tMatrix setmatrix lrx rad sub lry rad
  sub translate rad rad scale 0 0 1 0 180 arc tMatrix setmatrix
  closepath} bdef
/FtbRR {MtbRR stroke } bdef
/PtbRR {MtbRR fill } bdef
/stri 6 array def /dtri 6 array def
/smat 6 array def /dmat 6 array def
/tmat1 6 array def /tmat2 6 array def /dif 3 array def
/asub {/ind2 exch def /ind1 exch def dup dup
  ind1 get exch ind2 get sub exch } bdef
/tri_to_matrix {
  2 0 asub 3 1 asub 4 0 asub 5 1 asub
  dup 0 get exch 1 get 7 -1 roll astore } bdef
/compute_transform {
  dmat dtri tri_to_matrix tmat1 invertmatrix 
  smat stri tri_to_matrix tmat2 concatmatrix } bdef
/ds {stri astore pop} bdef
/dt {dtri astore pop} bdef
/db {2 copy /cols xdef /rows xdef mul dup 3 mul string
  currentfile 
  3 index 0 eq {/ASCIIHexDecode filter}
  {/ASCII85Decode filter 3 index 2 eq {/RunLengthDecode filter} if }
  ifelse exch readstring pop
  dup 0 3 index getinterval /rbmap xdef
  dup 2 index dup getinterval /gbmap xdef
  1 index dup 2 mul exch getinterval /bbmap xdef pop pop}bdef
/it {gs np dtri aload pop moveto lineto lineto cp c
  cols rows 8 compute_transform 
  rbmap gbmap bbmap true 3 colorimage gr}bdef
/il {newpath moveto lineto stroke}bdef
currentdict end def
%%EndProlog

%%BeginSetup
MathWorks begin

0 cap

end
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox:    25   185   585   605
MathWorks begin
bpage
%%EndPageSetup

%%BeginObject: obj1
bplot

/dpi2point 12 def
portraitMode 0300 7260 csm

    0     0  6721  5039 rc
85 dict begin %Colortable dictionary
/c0 { 0.000000 0.000000 0.000000 sr} bdef
/c1 { 1.000000 1.000000 1.000000 sr} bdef
/c2 { 0.900000 0.000000 0.000000 sr} bdef
/c3 { 0.000000 0.820000 0.000000 sr} bdef
/c4 { 0.000000 0.000000 0.800000 sr} bdef
/c5 { 0.910000 0.820000 0.320000 sr} bdef
/c6 { 1.000000 0.260000 0.820000 sr} bdef
/c7 { 0.000000 0.820000 0.820000 sr} bdef
c0
1 j
1 sg
   0    0 6722 5040 rf
6 w
0 4107 5209 0 0 -4107 874 4485 4 MP
PP
-5209 0 0 4107 5209 0 0 -4107 874 4485 5 MP stroke
4 w
DO
SO
6 w
0 sg
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
 874 4485 mt 6083 4485 L
 874 4485 mt  874  378 L
 874 4485 mt  874 4432 L
 874  378 mt  874  430 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 841 4630 mt 
(0) s
1915 4485 mt 1915 4432 L
1915  378 mt 1915  430 L
1832 4630 mt 
(0.5) s
2957 4485 mt 2957 4432 L
2957  378 mt 2957  430 L
2924 4630 mt 
(1) s
3999 4485 mt 3999 4432 L
3999  378 mt 3999  430 L
3916 4630 mt 
(1.5) s
5041 4485 mt 5041 4432 L
5041  378 mt 5041  430 L
5008 4630 mt 
(2) s
6083 4485 mt 6083 4432 L
6083  378 mt 6083  430 L
6000 4630 mt 
(2.5) s
5813 4832 mt 
(x 10) s
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 80 FMSR

6039 4758 mt 
(4) s
 874 4485 mt  926 4485 L
6083 4485 mt 6030 4485 L
%%IncludeResource: font Helvetica
/Helvetica /ISOLatin1Encoding 120 FMSR

 773 4529 mt 
(0) s
 874 3898 mt  926 3898 L
6083 3898 mt 6030 3898 L
 773 3942 mt 
(1) s
 874 3311 mt  926 3311 L
6083 3311 mt 6030 3311 L
 773 3355 mt 
(2) s
 874 2724 mt  926 2724 L
6083 2724 mt 6030 2724 L
 773 2768 mt 
(3) s
 874 2138 mt  926 2138 L
6083 2138 mt 6030 2138 L
 773 2182 mt 
(4) s
 874 1551 mt  926 1551 L
6083 1551 mt 6030 1551 L
 773 1595 mt 
(5) s
 874  964 mt  926  964 L
6083  964 mt 6030  964 L
 773 1008 mt 
(6) s
 874  378 mt  926  378 L
6083  378 mt 6030  378 L
 773  422 mt 
(7) s
 874 4485 mt 6083 4485 L
 874  378 mt 6083  378 L
 874 4485 mt  874  378 L
6083 4485 mt 6083  378 L
gs 874 378 5210 4108 rc
/c8 { 0.000000 0.000000 1.000000 sr} bdef
c8
1027 -865 27 -22 -79 66 -35 29 -8 7 -555 468 -4149 3494 4684 -3945 
-62 52 1079 4285 10 MP stroke
/c9 { 0.000000 0.500000 0.000000 sr} bdef
c9
1027 -38 27 -1 -79 3 -35 1 -8 1 -555 20 -4149 153 4684 -173 
-62 3 1079 4258 10 MP stroke
gr

c9
0 sg
2609  283 mt 
(Uniqify using 100 sort processes) s
3138 4773 mt 
(Filesize \(KB\)) s
 691 2889 mt  -90 rotate
(Time required \(s\)) s
90 rotate
 857 4528 mt 
( ) s
6067  420 mt 
( ) s
1 sg
0 334 1166 0 0 -334 4857 772 4 MP
PP
-1166 0 0 334 1166 0 0 -334 4857 772 5 MP stroke
4 w
DO
SO
6 w
0 sg
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
4857  772 mt 6023  772 L
4857  772 mt 4857  438 L
4857  772 mt 6023  772 L
4857  438 mt 6023  438 L
4857  772 mt 4857  438 L
6023  772 mt 6023  438 L
5308  573 mt 
(Real time) s
gs 4857 438 1167 335 rc
c8
346 0 4926 530 2 MP stroke
gr

c8
0 sg
5308  722 mt 
(System time) s
gs 4857 438 1167 335 rc
c9
346 0 4926 679 2 MP stroke
gr

c9

end %%Color Dict

eplot
%%EndObject

epage
end

showpage

%%Trailer
%%EOF

%%EndDocument
 @endspecial 0 TeXcolorgray 1175 3514 a Fb(Figure)27
b(3:)p 0 TeXcolorgray 1539 3514 a
SDict begin H.S end
 1539 3514 a 0 TeXcolorgray
0 TeXcolorgray 1539 3514 a
SDict begin H.R end
 1539 3514 a 1539 3514 a
SDict begin [ /View [/XYZ H.V] /Dest (figure.3) cvn H.B /DEST pdfmark end
 1539
3514 a 0 TeXcolorgray Fb(Uniqify)h(using)f(100)f(sort)h(pro)r(cesses.)p
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1929 5889
a(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
