;***********************************************************
;*
;*	Sum Squared of two words
;*
;*	This program will find the square of the sum of two 16-bit words
;*
;*	This was based off the skeleton file for Lab 4 of ECE 375
;*
;***********************************************************
;*
;*	 Author: David Merrick
;*	 Date: 10/17/2012
;*
;***********************************************************
 
.include "m128def.inc"			; Include definition file
 
;***********************************************************
;*	Internal Register Definitions and Constants
;***********************************************************
; General registers
.def	mpr = r16				; Multipurpose register 
.def	rlo = r0				; Low byte of MUL result
.def	rhi = r1				; High byte of MUL result
.def	zero = r2				; Zero register, set to zero in INIT, useful for calculations
.def	A = r3					; An operand
.def	B = r4					; Another operand
 
; Loop counters
.def	oloop = r17				; Outer Loop Counter
.def	iloop = r18				; Inner Loop Counter
 
; 24 bit multiplication data space
.equ	addrA24 = $0100			; Beginning Address of Operand A data
.equ	addrB24 = $0103			; Beginning Address of Operand B data
.equ	LAddrP24 = $0106		; Beginning Address of Product Result
.equ	HAddrP24 = $010D		; End Address of Product Result
 
; 16 bit addition data space
.equ	addrA = $0110			; Beginning Address of Operand A data
.equ	addrB = $0112			; Beginning Address of Operand B data
.equ	LAddrA = $0114			; Beginning Address of Addition Result
.equ	HAddrA = $0117			; End Address of Addition Result
 
;***********************************************************
;*	Start of Code Segment
;***********************************************************
.cseg							; Beginning of code segment
 
;-----------------------------------------------------------
; Interrupt Vectors
;-----------------------------------------------------------
.org	$0000					; Beginning of IVs
		rjmp INIT				; Reset interrupt
 
.org	$0046					; End of Interrupt Vectors
 
;-----------------------------------------------------------
; Program Initialization
;-----------------------------------------------------------
INIT:							; The initialization routine
	; Initialize Stack Pointer
		ldi mpr,	low(RAMEND)
		out SPL,	mpr	
		ldi mpr,	high(RAMEND)
		out SPH,	mpr
 
	; Move numbers from Program Memory to Data Memory
                ;Initialize pointer registers
		ldi ZL,		low(NUMA_BEG<<1)       ; Point the Z register to number A. Typical pointer initialization statement.
		ldi ZH,		high(NUMA_BEG<<1)
		ldi YL,		low(addrA)	       ; Point the Y register to data memory where A will be stored
		ldi YH,		high(addrA)
 
STOREA:         ;Load bytes of A into data memory
		LPM mpr,	Z+                     ; Load the next byte of the number. LPM dest, src; Z is pointing to the number and we're copying it byte by byte into the MPR. We 								
										   ; increment Z to get to the address of the next byte of the number.
		ST Y+,		mpr ; ST stores data to data memory. ST dest, src. This takes the value we just put in the MPR (A) and stores it in the data memory location where we 
				        ; want it.
 
		CPI ZL,		low(NUMA_END<<1)       ; CPI: compare immediate. CPI Rd, immediate. Branch if Z is not pointing at the end of the number.
		BRNE 		STOREA
 
		CPI ZH,		high(NUMA_END<<1)
		BRNE 		STOREA
 
                ;Initialize pointer registers
		ldi ZL,		low(NUMB_BEG<<1)        ; Point Z register to the number B
		ldi ZH,		high(NUMB_BEG<<1)
		ldi XH,		high(addrB)	        ; Point the X register to data memory address where B will be stored
		ldi XL,		low(addrB)
 
STOREB:         ;Load bytes of B into data memory
		LPM mpr,	Z+                      ; Load the next byte of the number
		ST X+,		mpr
 
		CPI ZL,		low(NUMB_END<<1)        ; repeat if Z is not pointed at the end of the number
		BRNE 		STOREB
 
		CPI ZH,		high(NUMB_END<<1)
		BRNE 		STOREB
 
 
	; Clear out the resultant memory space
		ldi		XH,		high(LAddrP24) ;Point the X register at the data memory address where 24-bit product result will be stored
		ldi		XL,		low(LAddrP24)
 
CLEARP: ; Clear product space. Sets the data memory values to zero where result will be stored. Is this necessary??
		ST X+,		zero                 ; Clear the data memory at location of X with post inc.
 
        CPI XL,		low(HAddrP24)        ; Branch if the X register is not looking at the end of the result space
		BRNE 		CLEARP
 
		CPI XH,		high(HAddrP24)
		BRNE 		CLEARP
 
		ldi		XH,		high(LAddrA) ;Point the X register at data memory address where addition result will be stored
		ldi		XL,		low(LAddrA)
 
CLEARA: ;Clear addition result space.
		ST X+,		zero                 ; Set data memory to zero at location of X and post-increment X.
 
        CPI XL,		low(HAddrA)          ; Branch if the X register is not looking at the end of the result space
		BRNE 		CLEARA
 
		CPI XH,		high(HAddrA)
		BRNE 		CLEARA
 
;-----------------------------------------------------------
; Main Program
;-----------------------------------------------------------
MAIN:							; The Main program
	; Preform an add
		RCALL   ADD16
 
	; Manipulate memory to prepare for multiply
		ldi YL,		low(addrA24)	        ; Point the Y register to data memory where A will be stored
		ldi YH,		high(addrA24)
		ldi XH,		high(addrB24)	        ; Point the X register to data memory where B will be stored
		ldi XL,		low(addrB24)
 
		ldi ZL,		low(LAddrA)             ; Point the Z register to result from addition
		ldi ZH,		high(LAddrA)
 
LOADADDR:       ;Load bytes of result into data memory
		LD mpr,	Z+                      ; Load the next byte of the number
		ST X+,		mpr
		ST Y+,		mpr
 
		CPI ZL,		low(HAddrA)             ; Branch if the Z register is not looking at the end of the number
		BRNE 		LOADADDR
 
		CPI ZH,		high(HAddrA)
		BRNE 		LOADADDR
 
	; Preform a multiply
		RCALL   MUL24
 
	; Loop forever when done
		rjmp	DONE
 
DONE:
		rjmp	DONE
 
;***********************************************************
;*	Functions and Subroutines
;***********************************************************
 
;-----------------------------------------------------------
; Func: ADD16
; Desc: Adds two 16-bit numbers and generates a 24-bit number
;	 where the high byte of the result contains the carry out bit.
;-----------------------------------------------------------
ADD16:
          ; Save all registers in order
		push 	A			; Save A register
		push	B			; Save B register
		push	zero			; Save zero register
		push	XH			; Save X-ptr
		push	XL
		push	YH			; Save Y-ptr
		push	YL				
		push	ZH			; Save Z-ptr
		push	ZL
 
		clr		zero		; Clear zero register
 
          ; Create pointers to A, B, and the resultant space
		ldi XH, high(addrA)		; Point X at high byte of A in data memory.
		ldi XL, low(addrA)		; Point X at low byte of A in data memory.
 
		ldi YH, high(addrB)		; Point Y at high byte of B in data memory.
		ldi YL, low(addrB)		; Point Y at low byte of A in data memory.
 
		ldi ZH, high(LAddrA)	; Point Z at high byte of addition result in data memory.
		ldi ZL, low(LAddrA)		; Point Z at low byte of addition result in data memory.
 
		ld A, X+			; prepare registers for add
		ld B, Y+
 
		add A,B 
 
		st Z+,A				; store binary add into Z
 
		ld A,X				; prepare registers for carry sum
		ld B,Y
 
		adc A,B				; compute carry
 
		st Z+,A				; story binary carry add into Z
 
		clr A 
 
		adc A,zero			; grab final carry bit
 
		st Z,A				; store A
 
          ; Restore all registers in reverse order
		pop		ZL			
		pop		ZH
		pop		YL
		pop		YH
		pop		XL
		pop		XH
		pop		zero
		pop		B
		pop		A
		ret						; End a function with RET
 
 
 
;-----------------------------------------------------------
; Func: MUL24
; Desc: Multiplies two 24-bit numbers and generates a 48-bit 
;		result.
;-----------------------------------------------------------
MUL24:
          ; Save all registers in order
		push 	A			; Save A register
		push	B			; Save B register
		push	rhi			; Save rhi register: high byte of multiply result
		push	rlo			; Save rlo register: low byte of multiply result
		push	zero			; Save zero register
		push	XH			; Save X-ptr
		push	XL
		push	YH			; Save Y-ptr
		push	YL				
		push	ZH			; Save Z-ptr
		push	ZL
		push	oloop			; Save counters
		push	iloop				
 
		clr		zero		; Maintain zero semantics
 
		; Set Y to beginning address of B
		ldi		YL, low(addrB24)	; Load low byte
		ldi		YH, high(addrB24)	; Load high byte
 
		; Set Z to begginning address of resulting Product
		ldi		ZL, low(LAddrP24)	; Load low byte
		ldi		ZH, high(LAddrP24); Load high byte
 
		; Begin outer for loop
		ldi		oloop, 3		; Load counter
MUL24_OLOOP:
		; Set X to beginning address of A
		ldi		XL, low(addrA24)	; Load low byte
		ldi		XH, high(addrA24)	; Load high byte
 
		; Begin inner for loop
		ldi		iloop, 3		; Load counter
MUL24_ILOOP:
		ld		A, X+			; Get byte of A operand
		ld		B, Y			; Get byte of B operand
		mul		A,B				; Multiply A and B
		ld		A, Z+			; Get a result byte from memory
		ld		B, Z+			; Get the next result byte from memory
		add		rlo, A			; rlo <= rlo + A
		adc		rhi, B			; rhi <= rhi + B + carry
		ld		A, Z			; Get a third byte from the result
		adc		A, zero			; Add carry to A
		st		Z, A			; Store third byte to memory
		st		-Z, rhi			; Store second byte to memory
		st		-Z, rlo			; Store third byte to memory
		adiw	ZH:ZL, 1		; Z <= Z + 1			
		dec		iloop			; Decrement counter
		brne	MUL24_ILOOP		; Loop if iLoop != 0
		; End inner for loop
 
		sbiw	ZH:ZL, 2		; Z <= Z - 2
		adiw	YH:YL, 1		; Y <= Y + 1
		dec		oloop			; Decrement counter
		brne	MUL24_OLOOP		; Loop if oLoop != 0
		; End outer for loop
 
		pop		iloop			; Restore all registers in reverse order
		pop		oloop
		pop		ZL				
		pop		ZH
		pop		YL
		pop		YH
		pop		XL
		pop		XH
		pop		zero
		pop		rlo
		pop		rhi
		pop		B
		pop		A
		ret						; End a function with RET
 
 
;***********************************************************
;*	Stored Program Data
;***********************************************************
 
NUMA_BEG:
.DB		0xAD, 0xBE
NUMA_END:
NUMB_BEG:
.DB		0xDC, 0xEA
NUMB_END:
 
;***********************************************************
;*	Additional Program Includes
;***********************************************************
*